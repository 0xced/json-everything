<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonPointer.Net</name>
    </assembly>
    <members>
        <member name="T:Json.Pointer.CharExtensions">
            <summary>
            Extensions for <seealso cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="M:Json.Pointer.CharExtensions.IsHexadecimal(System.Char)">
            <summary>
            Determines if the char represents a hexadecimal value.
            </summary>
            <param name="c">A <see cref="T:System.Char"/>.</param>
            <returns><code>true</code> if the character is in the ranges <code>0-9</code>, <code>a-z</code>, or <code>A-Z</code>; <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Json.Pointer.CharExtensions.GetHexadecimalValue(System.Char)">
            <summary>
            Translates the character to its hexadecimal numeric value.
            </summary>
            <param name="c">A <see cref="T:System.Char"/>.</param>
            <returns>0-9 for <code>0-9</code>; 11-15 for <code>a-f</code> and <code>A-F</code>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="c"/> is not a valid hexadecimal character.</exception>
        </member>
        <member name="T:Json.Pointer.EnumerableExtensions">
            <summary>
            More extensions on <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Json.Pointer.EnumerableExtensions.GetCollectionHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a collection-oriented hash code by combining the hash codes of its elements.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="collection">The collection of elements.</param>
            <returns>A singular integer value that represents the collection.</returns>
            <remarks>This can be used to correctly compare the contents of collections.</remarks>
        </member>
        <member name="T:Json.Pointer.JsonPointer">
            <summary>
            Represents a JSON Pointer IAW RFC 6901.
            </summary>
        </member>
        <member name="F:Json.Pointer.JsonPointer.Empty">
            <summary>
            The empty pointer.
            </summary>
        </member>
        <member name="F:Json.Pointer.JsonPointer.UrlEmpty">
            <summary>
            The empty pointer in URL-style.
            </summary>
        </member>
        <member name="P:Json.Pointer.JsonPointer.Source">
            <summary>
            Gets the source string for the pointer.
            </summary>
        </member>
        <member name="P:Json.Pointer.JsonPointer.Segments">
            <summary>
            Gets the collection of pointer segments.
            </summary>
        </member>
        <member name="P:Json.Pointer.JsonPointer.IsUriEncoded">
            <summary>
            Gets whether the pointer is URL-encoded.
            </summary>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Parse(System.String)">
            <summary>
            Parses a JSON Pointer from a string.
            </summary>
            <param name="source">The source string.</param>
            <returns>A JSON Pointer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:Json.Pointer.PointerParseException"><paramref name="source"/> does not contain a valid pointer.</exception>
        </member>
        <member name="M:Json.Pointer.JsonPointer.TryParse(System.String,Json.Pointer.JsonPointer@)">
            <summary>
            Parses a JSON Pointer from a string.
            </summary>
            <param name="source">The source string.</param>
            <param name="pointer">The resulting pointer.</param>
            <returns><code>true</code> if the parse was successful; <code>false</code> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Create(System.Collections.Generic.IEnumerable{Json.Pointer.PointerSegment},System.Boolean)">
            <summary>
            Creates a new JSON Pointer from a collection of segments.
            </summary>
            <param name="segments">A collection of segments.</param>
            <param name="isUriEncoded">Whether the pointer should be URL-encoded.</param>
            <returns>The JSON Pointer.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Combine(Json.Pointer.JsonPointer)">
            <summary>
            Concatenates a pointer onto the current pointer.
            </summary>
            <param name="other">Another pointer.</param>
            <returns>A new pointer.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Combine(Json.Pointer.PointerSegment[])">
            <summary>
            Concatenates additional segments onto the current pointer.
            </summary>
            <param name="additionalSegments">The additional segments.</param>
            <returns>A new pointer.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Evaluate(System.Text.Json.JsonElement)">
            <summary>
            Evaluates the pointer over a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="root">The <see cref="T:System.Text.Json.JsonElement"/>.</param>
            <returns>The sub-element at the pointer's location, or null if the path does not exist.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>The fully qualified type name.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Equals(Json.Pointer.JsonPointer)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>true if <paramref name="obj">obj</paramref> and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.op_Equality(Json.Pointer.JsonPointer,Json.Pointer.JsonPointer)">
            <summary>
            Evaluates equality via <see cref="M:Json.Pointer.JsonPointer.Equals(Json.Pointer.JsonPointer)"/>.
            </summary>
            <param name="left">A JSON Pointer.</param>
            <param name="right">A JSON Pointer.</param>
            <returns><code>true</code> if the pointers are equal; <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.op_Inequality(Json.Pointer.JsonPointer,Json.Pointer.JsonPointer)">
            <summary>
            Evaluates inequality via <see cref="M:Json.Pointer.JsonPointer.Equals(Json.Pointer.JsonPointer)"/>.
            </summary>
            <param name="left">A JSON Pointer.</param>
            <param name="right">A JSON Pointer.</param>
            <returns><code>false</code> if the pointers are equal; <code>true</code> otherwise.</returns>
        </member>
    </members>
</doc>
