{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome to the API documentation for the json-everything libraries.",
    "keywords": "Welcome to the API documentation for the json-everything libraries. Here you will find information for every type exposed by the libraries. If you would like some examples that aren't already included, please let me know by posting an issue to the GitHub repository or by asking on Slack ."
  },
  "api/Json.Logic.html": {
    "href": "api/Json.Logic.html",
    "title": "Namespace Json.Logic",
    "keywords": "Namespace Json.Logic Classes JsonElementExtensions Provides fuzzy-logic extensions for values. JsonLogic Provides factory methods to create operations. JsonLogicException Thrown when a rule cannot be processed or deserialized. LogicComponentConverter Provides serialization for all Rule derivatives. OperatorAttribute Decorates Rule implementations to identify a rule. Rule Provides a base class for rules. RuleExtensions Calls Apply(JsonElement) with no data. RuleRegistry Catalogs all of the known rules."
  },
  "api/Json.Logic.JsonElementExtensions.html": {
    "href": "api/Json.Logic.JsonElementExtensions.html",
    "title": "Class JsonElementExtensions",
    "keywords": "Class JsonElementExtensions Provides fuzzy-logic extensions for values. Inheritance System.Object JsonElementExtensions Namespace : Json.Logic Assembly : JsonLogic.dll Syntax public static class JsonElementExtensions : object Methods | Improve this Doc View Source Flatten(JsonElement) Flattens an array into its root components (removes intermediate arrays). Declaration public static IEnumerable<JsonElement> Flatten(this JsonElement root) Parameters Type Name Description JsonElement root The element. Returns Type Description IEnumerable < JsonElement > Returns a single array with all of the intermediate arrays removed. | Improve this Doc View Source IsTruthy(JsonElement) Determines whether a value can be considered as true . Declaration public static bool IsTruthy(this JsonElement element) Parameters Type Name Description JsonElement element The element. Returns Type Description System.Boolean true if the value is: a non-empty array a non-empty string a non-zero number true false otherwise | Improve this Doc View Source LooseEquals(JsonElement, JsonElement) Provides loose equality comparison of values. Declaration public static bool LooseEquals(this JsonElement a, JsonElement b) Parameters Type Name Description JsonElement a The first value. JsonElement b The second value. Returns Type Description System.Boolean true if the values are loosely equal; false otherwise. Remarks Ported from @marvindv/jsonlogic_rs . | Improve this Doc View Source Numberify(JsonElement) Provides a loose-cast to a number. Declaration public static decimal? Numberify(this JsonElement element) Parameters Type Name Description JsonElement element The element. Returns Type Description System.Nullable < System.Decimal > A string representation of the value as follows: strings try to parse a number from the value true returns 1 false returns 0 numbers are unchanged null, objects, and arrays return null (not numberifiable) | Improve this Doc View Source Stringify(JsonElement) Provides a loose-cast to a string. Declaration public static string? Stringify(this JsonElement element) Parameters Type Name Description JsonElement element The element. Returns Type Description System.Nullable < System.String > A string representation of the value as follows: arrays are the elements stringified and comma-delimited null returns the empty string objects return null (not stringifiable) numbers and booleans return their JSON equivalents strings are unchanged"
  },
  "api/Json.Logic.JsonLogic.html": {
    "href": "api/Json.Logic.JsonLogic.html",
    "title": "Class JsonLogic",
    "keywords": "Class JsonLogic Provides factory methods to create operations. Inheritance System.Object JsonLogic Namespace : Json.Logic Assembly : JsonLogic.dll Syntax public static class JsonLogic : object Methods | Improve this Doc View Source Add(Rule, Rule[]) Creates a + (\"add\") rule. Declaration public static Rule Add(Rule a, params Rule[] more) Parameters Type Name Description Rule a The first rule. Rule [] more Subsequent rules. Returns Type Description Rule A + rule. | Improve this Doc View Source All(Rule, Rule) Creates an all rule. Declaration public static Rule All(Rule input, Rule rule) Parameters Type Name Description Rule input The input rule. Rule rule The predicate to test by. Returns Type Description Rule An all rule. | Improve this Doc View Source And(Rule, Rule[]) Creates an and rule. Declaration public static Rule And(Rule a, params Rule[] more) Parameters Type Name Description Rule a The first rule. Rule [] more Subsequent rules. Returns Type Description Rule An and rule. | Improve this Doc View Source BetweenExclusive(Rule, Rule, Rule) Creates a three-argument &lt; (\"exclusive between\") rule. Declaration public static Rule BetweenExclusive(Rule a, Rule b, Rule c) Parameters Type Name Description Rule a The lower limit rule. Rule b The rule. Rule c The upper limit rule. Returns Type Description Rule A &lt; rule. | Improve this Doc View Source BetweenInclusive(Rule, Rule, Rule) Creates a three-argument &lt;= (\"inclusive between\") rule. Declaration public static Rule BetweenInclusive(Rule a, Rule b, Rule c) Parameters Type Name Description Rule a The lower limit rule. Rule b The second rule. Rule c The upper limit rule. Returns Type Description Rule A &lt;= rule. | Improve this Doc View Source BoolCast(Rule) Creates a !! (\"boolean cast\") rule. Declaration public static Rule BoolCast(Rule value) Parameters Type Name Description Rule value The rule to negate. Returns Type Description Rule A !! rule. | Improve this Doc View Source Cat(Rule, Rule[]) Creates a cat (\"concatenation\") rule. Declaration public static Rule Cat(Rule a, params Rule[] more) Parameters Type Name Description Rule a The first rule. Rule [] more Subsequent rules. Returns Type Description Rule A cat rule. | Improve this Doc View Source Divide(Rule, Rule) Creates a / (\"divide\") rule. Declaration public static Rule Divide(Rule a, Rule b) Parameters Type Name Description Rule a The first rule. Rule b Returns Type Description Rule A / rule. | Improve this Doc View Source Filter(Rule, Rule) Creates a filter rule. Declaration public static Rule Filter(Rule input, Rule rule) Parameters Type Name Description Rule input The input rule. Rule rule The predicate to test by. Returns Type Description Rule A filter rule. | Improve this Doc View Source If(Rule[]) Creates an if rule. Declaration public static Rule If(params Rule[] components) Parameters Type Name Description Rule [] components The rule chain to process. Returns Type Description Rule An if rule. | Improve this Doc View Source In(Rule, Rule) Creates a none rule. Declaration public static Rule In(Rule test, Rule input) Parameters Type Name Description Rule test The predicate to test by. Rule input The input rule. Returns Type Description Rule A none rule. | Improve this Doc View Source LessThan(Rule, Rule) Creates a &lt; (\"less than\") rule. Declaration public static Rule LessThan(Rule a, Rule b) Parameters Type Name Description Rule a The lower limit rule. Rule b The upper limit rule. Returns Type Description Rule A &lt; rule. | Improve this Doc View Source LessThanOrEqual(Rule, Rule) Creates a &lt;= (\"less than or equal\") rule. Declaration public static Rule LessThanOrEqual(Rule a, Rule b) Parameters Type Name Description Rule a The lower limit rule. Rule b The upper limit rule. Returns Type Description Rule A &lt;= rule. | Improve this Doc View Source Literal(JsonElement) Creates a rule that stands in for a literal JSON value. Declaration public static Rule Literal(JsonElement value) Parameters Type Name Description JsonElement value The JSON value. Returns Type Description Rule A literal rule. | Improve this Doc View Source Literal(Boolean) Creates a rule that stands in for a bool . Declaration public static Rule Literal(bool value) Parameters Type Name Description System.Boolean value The value. Returns Type Description Rule A literal rule. | Improve this Doc View Source Literal(Decimal) Creates a rule that stands in for a decimal . Declaration public static Rule Literal(decimal value) Parameters Type Name Description System.Decimal value The value. Returns Type Description Rule A literal rule. | Improve this Doc View Source Literal(Double) Creates a rule that stands in for a double . Declaration public static Rule Literal(double value) Parameters Type Name Description System.Double value The value. Returns Type Description Rule A literal rule. | Improve this Doc View Source Literal(Int32) Creates a rule that stands in for an int . Declaration public static Rule Literal(int value) Parameters Type Name Description System.Int32 value The value. Returns Type Description Rule A literal rule. | Improve this Doc View Source Literal(Int64) Creates a rule that stands in for a long . Declaration public static Rule Literal(long value) Parameters Type Name Description System.Int64 value The value. Returns Type Description Rule A literal rule. | Improve this Doc View Source Literal(Single) Creates a rule that stands in for a float . Declaration public static Rule Literal(float value) Parameters Type Name Description System.Single value The value. Returns Type Description Rule A literal rule. | Improve this Doc View Source Literal(String) Creates a rule that stands in for a string . Declaration public static Rule Literal(string value) Parameters Type Name Description System.String value The value. Returns Type Description Rule A literal rule. | Improve this Doc View Source Log(Rule) Functions as a no-op. Processes the rule, then logs and returns the output. Declaration public static Rule Log(Rule log) Parameters Type Name Description Rule log The rule to log. Returns Type Description Rule The result of the rule. | Improve this Doc View Source LooseEquals(Rule, Rule) Creates a == (\"loose equal\") rule. Declaration public static Rule LooseEquals(Rule a, Rule b) Parameters Type Name Description Rule a The first rule. Rule b The second rule. Returns Type Description Rule A == rule. | Improve this Doc View Source LooseNotEquals(Rule, Rule) Creates a != (\"loose not equal\") rule. Declaration public static Rule LooseNotEquals(Rule a, Rule b) Parameters Type Name Description Rule a The first rule. Rule b The second rule. Returns Type Description Rule A != rule. | Improve this Doc View Source Map(Rule, Rule) Creates a map rule. Declaration public static Rule Map(Rule input, Rule rule) Parameters Type Name Description Rule input The input rule. Rule rule The predicate to test by. Returns Type Description Rule A map rule. | Improve this Doc View Source Max(Rule, Rule[]) Creates a max rule. Declaration public static Rule Max(Rule a, params Rule[] more) Parameters Type Name Description Rule a The first rule. Rule [] more Subsequent rules. Returns Type Description Rule A max rule. | Improve this Doc View Source Merge(Rule[]) Creates a merge rule. Declaration public static Rule Merge(params Rule[] items) Parameters Type Name Description Rule [] items The items to merge. Returns Type Description Rule A merge rule. | Improve this Doc View Source Min(Rule, Rule[]) Creates a min rule. Declaration public static Rule Min(Rule a, params Rule[] more) Parameters Type Name Description Rule a The first rule. Rule [] more Subsequent rules. Returns Type Description Rule A min rule. | Improve this Doc View Source Missing(Rule[]) Creates a missing rule. Declaration public static Rule Missing(params Rule[] components) Parameters Type Name Description Rule [] components The missing components. Returns Type Description Rule A missing rule. | Improve this Doc View Source MissingSome(Rule, Rule) Creates a missing-some rule. Declaration public static Rule MissingSome(Rule requiredCount, Rule components) Parameters Type Name Description Rule requiredCount The required count. Rule components The missing components. Returns Type Description Rule A missing_some rule. | Improve this Doc View Source Modulus(Rule, Rule) Creates a % (\"modulus\") rule. Declaration public static Rule Modulus(Rule a, Rule b) Parameters Type Name Description Rule a The first rule. Rule b Returns Type Description Rule A % rule. | Improve this Doc View Source MoreThan(Rule, Rule) Creates a > (\"more than\") rule. Declaration public static Rule MoreThan(Rule a, Rule b) Parameters Type Name Description Rule a The upper limit rule. Rule b The lower limit rule. Returns Type Description Rule A > rule. | Improve this Doc View Source MoreThanOrEqual(Rule, Rule) Creates a >= (\"more than or equal\") rule. Declaration public static Rule MoreThanOrEqual(Rule a, Rule b) Parameters Type Name Description Rule a The upper limit rule. Rule b The lower limit rule. Returns Type Description Rule A > rule. | Improve this Doc View Source Multiply(Rule, Rule[]) Creates a * (\"multiply\") rule. Declaration public static Rule Multiply(Rule a, params Rule[] more) Parameters Type Name Description Rule a The first rule. Rule [] more Subsequent rules. Returns Type Description Rule A * rule. | Improve this Doc View Source None(Rule, Rule) Creates a none rule. Declaration public static Rule None(Rule input, Rule rule) Parameters Type Name Description Rule input The input rule. Rule rule The predicate to test by. Returns Type Description Rule A none rule. | Improve this Doc View Source Not(Rule) Creates a ! (\"not\") rule. Declaration public static Rule Not(Rule value) Parameters Type Name Description Rule value The rule to negate. Returns Type Description Rule A ! rule. | Improve this Doc View Source Or(Rule, Rule[]) Creates an or rule. Declaration public static Rule Or(Rule a, params Rule[] more) Parameters Type Name Description Rule a The first rule. Rule [] more Subsequent rules. Returns Type Description Rule An or rule. | Improve this Doc View Source Reduce(Rule, Rule, Rule) Creates a reduce rule. Declaration public static Rule Reduce(Rule input, Rule rule, Rule initial) Parameters Type Name Description Rule input The input rule. Rule rule The predicate to test by. Rule initial The initial rule. Returns Type Description Rule A reduce rule. | Improve this Doc View Source Some(Rule, Rule) Creates a some (\"any\") rule. Declaration public static Rule Some(Rule input, Rule rule) Parameters Type Name Description Rule input The input rule. Rule rule The predicate to test by. Returns Type Description Rule A some rule. | Improve this Doc View Source StrictEquals(Rule, Rule) Creates a === (\"strict equal\") rule. Declaration public static Rule StrictEquals(Rule a, Rule b) Parameters Type Name Description Rule a The first rule. Rule b The second rule. Returns Type Description Rule A === rule. | Improve this Doc View Source StrictNotEquals(Rule, Rule) Creates a !== (\"strict not equal\") rule. Declaration public static Rule StrictNotEquals(Rule a, Rule b) Parameters Type Name Description Rule a The first rule. Rule b The second rule. Returns Type Description Rule A !== rule. | Improve this Doc View Source Substr(Rule, Rule) Creates a substr (\"concatenation\") rule. Declaration public static Rule Substr(Rule input, Rule start) Parameters Type Name Description Rule input The input rule. Rule start The start rule. Returns Type Description Rule A substr rule. | Improve this Doc View Source Substr(Rule, Rule, Rule) Creates a substr (\"concatenation\") rule. Declaration public static Rule Substr(Rule input, Rule start, Rule count) Parameters Type Name Description Rule input The input rule. Rule start The start rule. Rule count The count rule. Returns Type Description Rule A substr rule. | Improve this Doc View Source Subtract(Rule, Rule[]) Creates a - (\"subtract\") rule. Declaration public static Rule Subtract(Rule a, params Rule[] more) Parameters Type Name Description Rule a The first rule. Rule [] more Subsequent rules. Returns Type Description Rule A - rule. | Improve this Doc View Source Variable(String) Creates a var rule that accesses data. Declaration public static Rule Variable(string path) Parameters Type Name Description System.String path Returns Type Description Rule A variable rule. | Improve this Doc View Source Variable(String, Rule) Creates a var rule that accesses data. Declaration public static Rule Variable(string path, Rule defaultValue) Parameters Type Name Description System.String path The dot-delimited path. Rule defaultValue A default value to use if the path is not found. Returns Type Description Rule A variable rule."
  },
  "api/Json.Logic.JsonLogicException.html": {
    "href": "api/Json.Logic.JsonLogicException.html",
    "title": "Class JsonLogicException",
    "keywords": "Class JsonLogicException Thrown when a rule cannot be processed or deserialized. Inheritance System.Object JsonLogicException Namespace : Json.Logic Assembly : JsonLogic.dll Syntax public class JsonLogicException : Exception Constructors | Improve this Doc View Source JsonLogicException(String) Creates a new instance of the JsonLogicException class. Declaration public JsonLogicException(string message) Parameters Type Name Description System.String message The exception message. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Logic.LogicComponentConverter.html": {
    "href": "api/Json.Logic.LogicComponentConverter.html",
    "title": "Class LogicComponentConverter",
    "keywords": "Class LogicComponentConverter Provides serialization for all Rule derivatives. Inheritance System.Object LogicComponentConverter Namespace : Json.Logic Assembly : JsonLogic.dll Syntax public class LogicComponentConverter : JsonConverter<Rule> Methods | Improve this Doc View Source Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type Rule . Declaration public override Rule Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader The reader. Type typeToConvert The type to convert. JsonSerializerOptions options An object that specifies serialization options to use. Returns Type Description Rule The converted value. | Improve this Doc View Source Write(Utf8JsonWriter, Rule, JsonSerializerOptions) Writes a specified value as JSON. Declaration public override void Write(Utf8JsonWriter writer, Rule value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer The writer to write to. Rule value The value to convert to JSON. JsonSerializerOptions options An object that specifies serialization options to use. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Logic.OperatorAttribute.html": {
    "href": "api/Json.Logic.OperatorAttribute.html",
    "title": "Class OperatorAttribute",
    "keywords": "Class OperatorAttribute Decorates Rule implementations to identify a rule. Inheritance System.Object OperatorAttribute Namespace : Json.Logic Assembly : JsonLogic.dll Syntax public class OperatorAttribute : Attribute Constructors | Improve this Doc View Source OperatorAttribute(String) Creates a new OperatorAttribute instance. Declaration public OperatorAttribute(string name) Parameters Type Name Description System.String name The identifier. Properties | Improve this Doc View Source Name The identifier. Declaration public string Name { get; } Property Value Type Description System.String Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Logic.Rule.html": {
    "href": "api/Json.Logic.Rule.html",
    "title": "Class Rule",
    "keywords": "Class Rule Provides a base class for rules. Inheritance System.Object Rule Namespace : Json.Logic Assembly : JsonLogic.dll Syntax public abstract class Rule : object Methods | Improve this Doc View Source Apply(JsonElement) Applies the rule to the input data. Declaration public abstract JsonElement Apply(JsonElement data) Parameters Type Name Description JsonElement data The input data. Returns Type Description JsonElement The result of the rule. Operators | Improve this Doc View Source Implicit(JsonElement to Rule) Casts a JSON value to a Json.Logic.Rules.LiteralRule . Declaration public static implicit operator Rule(JsonElement value) Parameters Type Name Description JsonElement value The value. Returns Type Description Rule | Improve this Doc View Source Implicit(Boolean to Rule) Casts a bool value to a Json.Logic.Rules.LiteralRule . Declaration public static implicit operator Rule(bool value) Parameters Type Name Description System.Boolean value The value. Returns Type Description Rule | Improve this Doc View Source Implicit(Decimal to Rule) Casts a decimal value to a Json.Logic.Rules.LiteralRule . Declaration public static implicit operator Rule(decimal value) Parameters Type Name Description System.Decimal value The value. Returns Type Description Rule | Improve this Doc View Source Implicit(Double to Rule) Casts a double value to a Json.Logic.Rules.LiteralRule . Declaration public static implicit operator Rule(double value) Parameters Type Name Description System.Double value The value. Returns Type Description Rule | Improve this Doc View Source Implicit(Int32 to Rule) Casts an int value to a Json.Logic.Rules.LiteralRule . Declaration public static implicit operator Rule(int value) Parameters Type Name Description System.Int32 value The value. Returns Type Description Rule | Improve this Doc View Source Implicit(Int64 to Rule) Casts a long value to a Json.Logic.Rules.LiteralRule . Declaration public static implicit operator Rule(long value) Parameters Type Name Description System.Int64 value The value. Returns Type Description Rule | Improve this Doc View Source Implicit(Nullable<String> to Rule) Casts a string value to a Json.Logic.Rules.LiteralRule . Can also be used to create a null JSON literal. Declaration public static implicit operator Rule(string? value) Parameters Type Name Description System.Nullable < System.String > value The value. Returns Type Description Rule | Improve this Doc View Source Implicit(Single to Rule) Casts a float value to a Json.Logic.Rules.LiteralRule . Declaration public static implicit operator Rule(float value) Parameters Type Name Description System.Single value The value. Returns Type Description Rule Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>) RuleExtensions.Apply(Rule)"
  },
  "api/Json.Logic.RuleExtensions.html": {
    "href": "api/Json.Logic.RuleExtensions.html",
    "title": "Class RuleExtensions",
    "keywords": "Class RuleExtensions Calls Apply(JsonElement) with no data. Inheritance System.Object RuleExtensions Namespace : Json.Logic Assembly : JsonLogic.dll Syntax public static class RuleExtensions : object Methods | Improve this Doc View Source Apply(Rule) Calls Apply(JsonElement) with no data. Declaration public static JsonElement Apply(this Rule rule) Parameters Type Name Description Rule rule The rule. Returns Type Description JsonElement The result."
  },
  "api/Json.Logic.RuleRegistry.html": {
    "href": "api/Json.Logic.RuleRegistry.html",
    "title": "Class RuleRegistry",
    "keywords": "Class RuleRegistry Catalogs all of the known rules. Inheritance System.Object RuleRegistry Namespace : Json.Logic Assembly : JsonLogic.dll Syntax public static class RuleRegistry : object Methods | Improve this Doc View Source AddRule<T>() Registers a new rule type. Declaration public static void AddRule<T>() where T : Rule Type Parameters Name Description T The type of the rule to add. Remarks Rules must contain a parameterless constructor. Decorate your rule type with one or more OperatorAttribute s to define its identifier. Registering a rule with an identifier that already exists will overwrite the existing registration. | Improve this Doc View Source GetRule(String) Gets a Rule implementation for a given identifier string. Declaration public static Type? GetRule(string identifier) Parameters Type Name Description System.String identifier The identifier. Returns Type Description System.Nullable < Type > The of the rule."
  },
  "api/Json.More.EnumStringConverter-1.html": {
    "href": "api/Json.More.EnumStringConverter-1.html",
    "title": "Class EnumStringConverter<T>",
    "keywords": "Class EnumStringConverter<T> Enum to string converter. Inheritance System.Object EnumStringConverter<T> Namespace : Json.More Assembly : Json.More.dll Syntax public class EnumStringConverter<T> : JsonConverter<T> where T : Enum Type Parameters Name Description T The supported enum. Remarks This serializer supports the to indicate custom value naming. The is supported via serializing to an array of base values. Inclusion of composite values is not supported. Examples The attribute can be applied to both the enum type itself: public enum MyEnum { Foo, Bar } or to a property of the enum type: public class MyClass { [JsonConverter(typeof(EnumStringConverter&lt;MyEnum>))] public MyEnum Value { get; set; } } Methods | Improve this Doc View Source Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type T . Declaration public override T Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader The reader. Type typeToConvert The type to convert. JsonSerializerOptions options An object that specifies serialization options to use. Returns Type Description T The converted value. | Improve this Doc View Source Write(Utf8JsonWriter, T, JsonSerializerOptions) Writes a specified value as JSON. Declaration public override void Write(Utf8JsonWriter writer, T value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer The writer to write to. T value The value to convert to JSON. JsonSerializerOptions options An object that specifies serialization options to use. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.More.html": {
    "href": "api/Json.More.html",
    "title": "Namespace Json.More",
    "keywords": "Namespace Json.More Classes EnumStringConverter<T> Enum to string converter. JsonDocumentEqualityComparer Calculates equality between two s. JsonDocumentExtensions Provides extension functionality for . JsonElementEqualityComparer Calculates equality between two s. JsonElementExtensions Provides extension functionality for . Utf8JsonWriterExtensions Provides extension functionality for . Structs JsonElementProxy Acts as an intermediary that allows an \"implicit casting\"-like behavior between native JSON types and ."
  },
  "api/Json.More.JsonDocumentEqualityComparer.html": {
    "href": "api/Json.More.JsonDocumentEqualityComparer.html",
    "title": "Class JsonDocumentEqualityComparer",
    "keywords": "Class JsonDocumentEqualityComparer Calculates equality between two s. Inheritance System.Object JsonDocumentEqualityComparer Namespace : Json.More Assembly : Json.More.dll Syntax public class JsonDocumentEqualityComparer : IEqualityComparer<JsonDocument> Remarks This comparison is compliant with the ideals expressed by JSON: Objects are unordered. Arrays are ordered. Properties | Improve this Doc View Source Instance A singleton instance for convenience. Declaration public static JsonDocumentEqualityComparer Instance { get; } Property Value Type Description JsonDocumentEqualityComparer Methods | Improve this Doc View Source Equals(JsonDocument, JsonDocument) Determines whether the specified objects are equal. Declaration public bool Equals(JsonDocument x, JsonDocument y) Parameters Type Name Description JsonDocument x The first object of type T to compare. JsonDocument y The second object of type T to compare. Returns Type Description System.Boolean true if the specified objects are equal; otherwise, false. | Improve this Doc View Source GetHashCode(JsonDocument) Returns a hash code for the specified object. Declaration public int GetHashCode(JsonDocument obj) Parameters Type Name Description JsonDocument obj The System.Object for which a hash code is to be returned. Returns Type Description System.Int32 A hash code for the specified object. Exceptions Type Condition System.ArgumentNullException The type of obj is a reference type and obj is null. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.More.JsonDocumentExtensions.html": {
    "href": "api/Json.More.JsonDocumentExtensions.html",
    "title": "Class JsonDocumentExtensions",
    "keywords": "Class JsonDocumentExtensions Provides extension functionality for . Inheritance System.Object JsonDocumentExtensions Namespace : Json.More Assembly : Json.More.dll Syntax public static class JsonDocumentExtensions : object Methods | Improve this Doc View Source IsEquivalentTo(JsonDocument, JsonDocument) Determines JSON-compatible equivalence. Declaration public static bool IsEquivalentTo(this JsonDocument a, JsonDocument b) Parameters Type Name Description JsonDocument a The first document. JsonDocument b The second document. Returns Type Description System.Boolean true if the documents are equivalent; false otherwise. | Improve this Doc View Source ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>) Converts an object to a . Declaration public static JsonDocument ToJsonDocument<T>(this T value, JsonSerializerOptions? options = null) Parameters Type Name Description T value The value to convert. System.Nullable < JsonSerializerOptions > options (optional) JSON serialization options. Returns Type Description JsonDocument A representing the vale. Type Parameters Name Description T The type of the object."
  },
  "api/Json.More.JsonElementEqualityComparer.html": {
    "href": "api/Json.More.JsonElementEqualityComparer.html",
    "title": "Class JsonElementEqualityComparer",
    "keywords": "Class JsonElementEqualityComparer Calculates equality between two s. Inheritance System.Object JsonElementEqualityComparer Namespace : Json.More Assembly : Json.More.dll Syntax public class JsonElementEqualityComparer : IEqualityComparer<JsonElement> Remarks This comparison is compliant with the ideals expressed by JSON: Objects are unordered. Arrays are ordered. Properties | Improve this Doc View Source Instance A singleton instance for convenience. Declaration public static JsonElementEqualityComparer Instance { get; } Property Value Type Description JsonElementEqualityComparer Methods | Improve this Doc View Source Equals(JsonElement, JsonElement) Determines whether the specified objects are equal. Declaration public bool Equals(JsonElement x, JsonElement y) Parameters Type Name Description JsonElement x The first object of type T to compare. JsonElement y The second object of type T to compare. Returns Type Description System.Boolean true if the specified objects are equal; otherwise, false. | Improve this Doc View Source GetHashCode(JsonElement) Returns a hash code for the specified object. Declaration public int GetHashCode(JsonElement obj) Parameters Type Name Description JsonElement obj The System.Object for which a hash code is to be returned. Returns Type Description System.Int32 A hash code for the specified object. Exceptions Type Condition System.ArgumentNullException The type of obj is a reference type and obj is null. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.More.JsonElementExtensions.html": {
    "href": "api/Json.More.JsonElementExtensions.html",
    "title": "Class JsonElementExtensions",
    "keywords": "Class JsonElementExtensions Provides extension functionality for . Inheritance System.Object JsonElementExtensions Namespace : Json.More Assembly : Json.More.dll Syntax public static class JsonElementExtensions : object Methods | Improve this Doc View Source AsJsonElement(IDictionary<String, JsonElement>) Converts a to a . Declaration public static JsonElement AsJsonElement(this IDictionary<string, JsonElement> values) Parameters Type Name Description IDictionary < System.String , JsonElement > values The value to convert. Returns Type Description JsonElement A representing the value. Remarks This is a workaround for lack of native support in the System.Text.Json namespace. | Improve this Doc View Source AsJsonElement(IEnumerable<JsonElement>) Converts a to a . Declaration public static JsonElement AsJsonElement(this IEnumerable<JsonElement> values) Parameters Type Name Description IEnumerable < JsonElement > values The array of values to convert. Returns Type Description JsonElement A representing the value. Remarks This is a workaround for lack of native support in the System.Text.Json namespace. | Improve this Doc View Source AsJsonElement(Boolean) Converts a to a . Declaration public static JsonElement AsJsonElement(this bool value) Parameters Type Name Description System.Boolean value The value to convert. Returns Type Description JsonElement A representing the value. Remarks This is a workaround for lack of native support in the System.Text.Json namespace. | Improve this Doc View Source AsJsonElement(Decimal) Converts a to a . Declaration public static JsonElement AsJsonElement(this decimal value) Parameters Type Name Description System.Decimal value The value to convert. Returns Type Description JsonElement A representing the value. Remarks This is a workaround for lack of native support in the System.Text.Json namespace. | Improve this Doc View Source AsJsonElement(Double) Converts a to a . Declaration public static JsonElement AsJsonElement(this double value) Parameters Type Name Description System.Double value The value to convert. Returns Type Description JsonElement A representing the value. Remarks This is a workaround for lack of native support in the System.Text.Json namespace. | Improve this Doc View Source AsJsonElement(Int16) Converts a to a . Declaration public static JsonElement AsJsonElement(this short value) Parameters Type Name Description System.Int16 value The value to convert. Returns Type Description JsonElement A representing the value. Remarks This is a workaround for lack of native support in the System.Text.Json namespace. | Improve this Doc View Source AsJsonElement(Int32) Converts a to a . Declaration public static JsonElement AsJsonElement(this int value) Parameters Type Name Description System.Int32 value The value to convert. Returns Type Description JsonElement A representing the value. Remarks This is a workaround for lack of native support in the System.Text.Json namespace. | Improve this Doc View Source AsJsonElement(Int64) Converts a to a . Declaration public static JsonElement AsJsonElement(this long value) Parameters Type Name Description System.Int64 value The value to convert. Returns Type Description JsonElement A representing the value. Remarks This is a workaround for lack of native support in the System.Text.Json namespace. | Improve this Doc View Source AsJsonElement(Nullable<String>) Converts a to a . Can also be used to get a null element. Declaration public static JsonElement AsJsonElement(this string? value) Parameters Type Name Description System.Nullable < System.String > value The value to convert. Returns Type Description JsonElement A representing the value. Remarks This is a workaround for lack of native support in the System.Text.Json namespace. | Improve this Doc View Source AsJsonElement(Single) Converts a to a . Declaration public static JsonElement AsJsonElement(this float value) Parameters Type Name Description System.Single value The value to convert. Returns Type Description JsonElement A representing the value. Remarks This is a workaround for lack of native support in the System.Text.Json namespace. | Improve this Doc View Source GetEquivalenceHashCode(JsonElement, Int32) Generate a consistent JSON-value-based hash code for the element. Declaration public static int GetEquivalenceHashCode(this JsonElement element, int maxHashDepth = null) Parameters Type Name Description JsonElement element The element. System.Int32 maxHashDepth Maximum depth to calculate. Default is -1 which utilizes the entire structure without limitation. Returns Type Description System.Int32 The hash code. Remarks See the following for discussion on why the default implementation is insufficient: https://github.com/gregsdennis/json-everything/issues/76 https://github.com/dotnet/runtime/issues/33388 | Improve this Doc View Source IsEquivalentTo(JsonElement, JsonElement) Determines JSON-compatible equivalence. Declaration public static bool IsEquivalentTo(this JsonElement a, JsonElement b) Parameters Type Name Description JsonElement a The first element. JsonElement b The second element. Returns Type Description System.Boolean true if the element are equivalent; false otherwise. | Improve this Doc View Source ToJsonString(JsonElement) Just a shortcut for calling JsonSerializer.Serialize() because .ToString() doesn't do what you might expect. Declaration public static string ToJsonString(this JsonElement element) Parameters Type Name Description JsonElement element The value to convert. Returns Type Description System.String A JSON string. Remarks See https://github.com/dotnet/runtime/issues/42502"
  },
  "api/Json.More.JsonElementProxy.html": {
    "href": "api/Json.More.JsonElementProxy.html",
    "title": "Struct JsonElementProxy",
    "keywords": "Struct JsonElementProxy Acts as an intermediary that allows an \"implicit casting\"-like behavior between native JSON types and . Namespace : Json.More Assembly : Json.More.dll Syntax public struct JsonElementProxy Operators | Improve this Doc View Source Implicit(JsonElementProxy to JsonElement) Converts a JsonElementProxy to a . Declaration public static implicit operator JsonElement(JsonElementProxy proxy) Parameters Type Name Description JsonElementProxy proxy The proxy. Returns Type Description JsonElement | Improve this Doc View Source Implicit(Boolean to JsonElementProxy) Converts an bool to a JsonElementProxy . Declaration public static implicit operator JsonElementProxy(bool value) Parameters Type Name Description System.Boolean value The value. Returns Type Description JsonElementProxy | Improve this Doc View Source Implicit(Decimal to JsonElementProxy) Converts an decimal to a JsonElementProxy . Declaration public static implicit operator JsonElementProxy(decimal value) Parameters Type Name Description System.Decimal value The value. Returns Type Description JsonElementProxy | Improve this Doc View Source Implicit(Double to JsonElementProxy) Converts an double to a JsonElementProxy . Declaration public static implicit operator JsonElementProxy(double value) Parameters Type Name Description System.Double value The value. Returns Type Description JsonElementProxy | Improve this Doc View Source Implicit(Int16 to JsonElementProxy) Converts an short to a JsonElementProxy . Declaration public static implicit operator JsonElementProxy(short value) Parameters Type Name Description System.Int16 value The value. Returns Type Description JsonElementProxy | Improve this Doc View Source Implicit(Int32 to JsonElementProxy) Converts an int to a JsonElementProxy . Declaration public static implicit operator JsonElementProxy(int value) Parameters Type Name Description System.Int32 value The value. Returns Type Description JsonElementProxy | Improve this Doc View Source Implicit(Int64 to JsonElementProxy) Converts an long to a JsonElementProxy . Declaration public static implicit operator JsonElementProxy(long value) Parameters Type Name Description System.Int64 value The value. Returns Type Description JsonElementProxy | Improve this Doc View Source Implicit(Single to JsonElementProxy) Converts an float to a JsonElementProxy . Declaration public static implicit operator JsonElementProxy(float value) Parameters Type Name Description System.Single value The value. Returns Type Description JsonElementProxy | Improve this Doc View Source Implicit(String to JsonElementProxy) Converts an string to a JsonElementProxy . Declaration public static implicit operator JsonElementProxy(string value) Parameters Type Name Description System.String value The value. Returns Type Description JsonElementProxy Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.More.Utf8JsonWriterExtensions.html": {
    "href": "api/Json.More.Utf8JsonWriterExtensions.html",
    "title": "Class Utf8JsonWriterExtensions",
    "keywords": "Class Utf8JsonWriterExtensions Provides extension functionality for . Inheritance System.Object Utf8JsonWriterExtensions Namespace : Json.More Assembly : Json.More.dll Syntax public static class Utf8JsonWriterExtensions : object Methods | Improve this Doc View Source WriteValue(Utf8JsonWriter, JsonElement) Writes a to the stream. Declaration public static void WriteValue(this Utf8JsonWriter writer, JsonElement element) Parameters Type Name Description Utf8JsonWriter writer The JSON stream writer. JsonElement element The element to write."
  },
  "api/Json.Patch.html": {
    "href": "api/Json.Patch.html",
    "title": "Namespace Json.Patch",
    "keywords": "Namespace Json.Patch Classes JsonPatch Models a JSON Patch document. PatchResult Results for a JSON Patch application. Structs PatchOperation Represents a single JSON Patch operation. Enums OperationType Enumerates the valid JSON Patch operation types."
  },
  "api/Json.Patch.JsonPatch.html": {
    "href": "api/Json.Patch.JsonPatch.html",
    "title": "Class JsonPatch",
    "keywords": "Class JsonPatch Models a JSON Patch document. Inheritance System.Object JsonPatch Namespace : Json.Patch Assembly : JsonPatch.dll Syntax public class JsonPatch : IEquatable<JsonPatch> Constructors | Improve this Doc View Source JsonPatch(IEnumerable<PatchOperation>) Creates a new instance of the JsonPatch class. Declaration public JsonPatch(IEnumerable<PatchOperation> operations) Parameters Type Name Description IEnumerable < PatchOperation > operations The collection of operations. | Improve this Doc View Source JsonPatch(PatchOperation[]) Creates a new instance of the JsonPatch class. Declaration public JsonPatch(params PatchOperation[] operations) Parameters Type Name Description PatchOperation [] operations The collection of operations. Properties | Improve this Doc View Source Operations Gets the collection of operations. Declaration public IReadOnlyList<PatchOperation> Operations { get; } Property Value Type Description IReadOnlyList < PatchOperation > Methods | Improve this Doc View Source Apply(JsonElement) Applies the patch to a JSON document. Declaration public PatchResult Apply(JsonElement source) Parameters Type Name Description JsonElement source The JSON document. Returns Type Description PatchResult A result object containing the output JSON and a possible error message. | Improve this Doc View Source Equals(JsonPatch) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(JsonPatch other) Parameters Type Name Description JsonPatch other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Patch.OperationType.html": {
    "href": "api/Json.Patch.OperationType.html",
    "title": "Enum OperationType",
    "keywords": "Enum OperationType Enumerates the valid JSON Patch operation types. Namespace : Json.Patch Assembly : JsonPatch.dll Syntax public enum OperationType : int Fields Name Description Add Represents the add operation. Copy Represents the copy operation. Move Represents the move operation. Remove Represents the remove operation. Replace Represents the replace operation. Test Represents the test operation. Unknown Default value. Not valid. Extension Methods JsonDocumentExtensions.ToJsonDocument<OperationType>(Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Patch.PatchOperation.html": {
    "href": "api/Json.Patch.PatchOperation.html",
    "title": "Struct PatchOperation",
    "keywords": "Struct PatchOperation Represents a single JSON Patch operation. Implements IEquatable < PatchOperation > Namespace : Json.Patch Assembly : JsonPatch.dll Syntax public struct PatchOperation : IEquatable<PatchOperation> Properties | Improve this Doc View Source From Gets the source path. Declaration public JsonPointer From { get; } Property Value Type Description JsonPointer | Improve this Doc View Source Op Gets the operation type. Declaration public OperationType Op { get; } Property Value Type Description OperationType | Improve this Doc View Source Path Gets the target path. Declaration public JsonPointer Path { get; } Property Value Type Description JsonPointer | Improve this Doc View Source Value Gets the discrete value. Declaration public JsonElement Value { get; } Property Value Type Description JsonElement Methods | Improve this Doc View Source Add(JsonPointer, JsonElement) Creates an add operation. Declaration public static PatchOperation Add(JsonPointer path, JsonElement value) Parameters Type Name Description JsonPointer path The source path. JsonElement value The value to add. Returns Type Description PatchOperation An add operation. | Improve this Doc View Source Copy(JsonPointer, JsonPointer) Creates an copy operation. Declaration public static PatchOperation Copy(JsonPointer from, JsonPointer path) Parameters Type Name Description JsonPointer from The path to the value to move. JsonPointer path The target path. Returns Type Description PatchOperation An copy operation. | Improve this Doc View Source Equals(PatchOperation) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(PatchOperation other) Parameters Type Name Description PatchOperation other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. | Improve this Doc View Source Move(JsonPointer, JsonPointer) Creates an move operation. Declaration public static PatchOperation Move(JsonPointer from, JsonPointer path) Parameters Type Name Description JsonPointer from The path to the value to move. JsonPointer path The target path. Returns Type Description PatchOperation An move operation. | Improve this Doc View Source Remove(JsonPointer) Creates an remove operation. Declaration public static PatchOperation Remove(JsonPointer path) Parameters Type Name Description JsonPointer path The source path. Returns Type Description PatchOperation An remove operation. | Improve this Doc View Source Replace(JsonPointer, JsonElement) Creates an replace operation. Declaration public static PatchOperation Replace(JsonPointer path, JsonElement value) Parameters Type Name Description JsonPointer path The source path. JsonElement value The value to add. Returns Type Description PatchOperation An replace operation. | Improve this Doc View Source Test(JsonPointer, JsonElement) Creates an test operation. Declaration public static PatchOperation Test(JsonPointer path, JsonElement value) Parameters Type Name Description JsonPointer path The source path. JsonElement value The value to match. Returns Type Description PatchOperation An test operation. Implements IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Patch.PatchResult.html": {
    "href": "api/Json.Patch.PatchResult.html",
    "title": "Class PatchResult",
    "keywords": "Class PatchResult Results for a JSON Patch application. Inheritance System.Object PatchResult Namespace : Json.Patch Assembly : JsonPatch.dll Syntax public class PatchResult : object Properties | Improve this Doc View Source Error Gets any error that occurred. Declaration public string? Error { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source IsSuccess Gets whether there was an error. Declaration public bool IsSuccess { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Operation Gets the last operation that was attempted. Declaration public int Operation { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Result Gets the resulting JSON document. Declaration public JsonElement Result { get; } Property Value Type Description JsonElement Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Path.html": {
    "href": "api/Json.Path.html",
    "title": "Namespace Json.Path",
    "keywords": "Namespace Json.Path Classes JsonPath Represents a JSON Path. PathMatch Represents a single match. PathParseException Thrown when an error occurs attempting to parse a JSON Path. PathResult The results of a JSON Path evaluation against a JSON instance."
  },
  "api/Json.Path.JsonPath.html": {
    "href": "api/Json.Path.JsonPath.html",
    "title": "Class JsonPath",
    "keywords": "Class JsonPath Represents a JSON Path. Inheritance System.Object JsonPath Namespace : Json.Path Assembly : JsonPath.Net.dll Syntax public class JsonPath : object Methods | Improve this Doc View Source Evaluate(JsonElement) Evaluates the path against a JSON instance. Declaration public PathResult Evaluate(in JsonElement root) Parameters Type Name Description JsonElement root The root of the JSON instance. Returns Type Description PathResult The results of the evaluation. | Improve this Doc View Source Parse(String) Parses a JsonPath from a string. Declaration public static JsonPath Parse(string source) Parameters Type Name Description System.String source The source string. Returns Type Description JsonPath The parsed path. Exceptions Type Condition PathParseException Thrown if a syntax error occurred. | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object. | Improve this Doc View Source TryParse(String, out JsonPath) Attempts to parse a JsonPath from a string. Declaration public static bool TryParse(string source, out JsonPath path) Parameters Type Name Description System.String source The source string. JsonPath path The resulting path. Returns Type Description System.Boolean true if successful; otherwise false . Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Path.PathMatch.html": {
    "href": "api/Json.Path.PathMatch.html",
    "title": "Class PathMatch",
    "keywords": "Class PathMatch Represents a single match. Inheritance System.Object PathMatch Namespace : Json.Path Assembly : JsonPath.Net.dll Syntax public class PathMatch : object Properties | Improve this Doc View Source Location The location where the value was found. Declaration public JsonPointer Location { get; } Property Value Type Description JsonPointer | Improve this Doc View Source Value The value at the matching location. Declaration public JsonElement Value { get; } Property Value Type Description JsonElement Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Path.PathParseException.html": {
    "href": "api/Json.Path.PathParseException.html",
    "title": "Class PathParseException",
    "keywords": "Class PathParseException Thrown when an error occurs attempting to parse a JSON Path. Inheritance System.Object PathParseException Namespace : Json.Path Assembly : JsonPath.Net.dll Syntax public class PathParseException : Exception Properties | Improve this Doc View Source Index The index at which the error occurred. Declaration public int Index { get; } Property Value Type Description System.Int32 Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Path.PathResult.html": {
    "href": "api/Json.Path.PathResult.html",
    "title": "Class PathResult",
    "keywords": "Class PathResult The results of a JSON Path evaluation against a JSON instance. Inheritance System.Object PathResult Namespace : Json.Path Assembly : JsonPath.Net.dll Syntax public class PathResult : object Properties | Improve this Doc View Source Error An error, if any, that occurred during evaluation. Declaration public string? Error { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source Matches The list of matches. Declaration public IReadOnlyList<PathMatch>? Matches { get; } Property Value Type Description System.Nullable < IReadOnlyList < PathMatch >> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Pointer.CharExtensions.html": {
    "href": "api/Json.Pointer.CharExtensions.html",
    "title": "Class CharExtensions",
    "keywords": "Class CharExtensions Extensions for . Inheritance System.Object CharExtensions Namespace : Json.Pointer Assembly : JsonPointer.Net.dll Syntax public static class CharExtensions : object Methods | Improve this Doc View Source GetHexadecimalValue(Char) Translates the character to its hexadecimal numeric value. Declaration public static int GetHexadecimalValue(this char c) Parameters Type Name Description System.Char c A . Returns Type Description System.Int32 0-9 for 0-9 ; 11-15 for a-f and A-F . | Improve this Doc View Source IsHexadecimal(Char) Determines if the char represents a hexadecimal value. Declaration public static bool IsHexadecimal(this char c) Parameters Type Name Description System.Char c A . Returns Type Description System.Boolean true if the character is in the ranges 0-9 , a-z , or A-Z ; false otherwise."
  },
  "api/Json.Pointer.EnumerableExtensions.html": {
    "href": "api/Json.Pointer.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions",
    "keywords": "Class EnumerableExtensions More extensions on . Inheritance System.Object EnumerableExtensions Namespace : Json.Pointer Assembly : JsonPointer.Net.dll Syntax public static class EnumerableExtensions : object Methods | Improve this Doc View Source GetCollectionHashCode<T>(IEnumerable<T>) Gets a collection-oriented hash code by combining the hash codes of its elements. Declaration public static int GetCollectionHashCode<T>(this IEnumerable<T> collection) Parameters Type Name Description IEnumerable <T> collection The collection of elements. Returns Type Description System.Int32 A singular integer value that represents the collection. Type Parameters Name Description T The type of element. Remarks This can be used to correctly compare the contents of collections."
  },
  "api/Json.Pointer.html": {
    "href": "api/Json.Pointer.html",
    "title": "Namespace Json.Pointer",
    "keywords": "Namespace Json.Pointer Classes CharExtensions Extensions for . EnumerableExtensions More extensions on . PointerParseException Thrown during parsing when the source string contains invalid JSON Pointer data. Structs JsonPointer Represents a JSON Pointer IAW RFC 6901. PointerSegment Represents a single segment of a JSON Pointer. RelativeJsonPointer Represents a Relative JSON Pointer IAW draft-handrews-relative-json-pointer-02 Enums JsonPointerKind Enumerates the different styles of JSON pointers."
  },
  "api/Json.Pointer.JsonPointer.html": {
    "href": "api/Json.Pointer.JsonPointer.html",
    "title": "Struct JsonPointer",
    "keywords": "Struct JsonPointer Represents a JSON Pointer IAW RFC 6901. Implements IEquatable < JsonPointer > Namespace : Json.Pointer Assembly : JsonPointer.Net.dll Syntax public struct JsonPointer : IEquatable<JsonPointer> Fields | Improve this Doc View Source Empty The empty pointer. Declaration public static readonly JsonPointer Empty Field Value Type Description JsonPointer | Improve this Doc View Source UrlEmpty The empty pointer in URL-style. Declaration public static readonly JsonPointer UrlEmpty Field Value Type Description JsonPointer Properties | Improve this Doc View Source IsUriEncoded Gets whether the pointer is URL-encoded. Declaration public bool IsUriEncoded { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Kind Gets the kind of pointer. Declaration public JsonPointerKind Kind { get; } Property Value Type Description JsonPointerKind | Improve this Doc View Source Segments Gets the collection of pointer segments. Declaration public PointerSegment[] Segments { get; } Property Value Type Description PointerSegment [] | Improve this Doc View Source Source Gets the source string for the pointer. Declaration public string Source { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Combine(JsonPointer) Concatenates a pointer onto the current pointer. Declaration public JsonPointer Combine(JsonPointer other) Parameters Type Name Description JsonPointer other Another pointer. Returns Type Description JsonPointer A new pointer. | Improve this Doc View Source Combine(PointerSegment[]) Concatenates additional segments onto the current pointer. Declaration public JsonPointer Combine(params PointerSegment[] additionalSegments) Parameters Type Name Description PointerSegment [] additionalSegments The additional segments. Returns Type Description JsonPointer A new pointer. | Improve this Doc View Source Create(IEnumerable<PointerSegment>, Boolean) Creates a new JSON Pointer from a collection of segments. Declaration public static JsonPointer Create(IEnumerable<PointerSegment> segments, bool isUriEncoded) Parameters Type Name Description IEnumerable < PointerSegment > segments A collection of segments. System.Boolean isUriEncoded Whether the pointer should be URL-encoded. Returns Type Description JsonPointer The JSON Pointer. | Improve this Doc View Source Create<T>(Expression<Func<T, Object>>) Generates a JSON Pointer from a lambda expression. Declaration public static JsonPointer Create<T>(Expression<Func<T, object>> expression) Parameters Type Name Description Expression < Func <T, System.Object >> expression The lambda expression which gives the pointer path. Returns Type Description JsonPointer The JSON Pointer. Type Parameters Name Description T The type of the object. | Improve this Doc View Source Equals(JsonPointer) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(JsonPointer other) Parameters Type Name Description JsonPointer other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false. | Improve this Doc View Source Evaluate(JsonElement) Evaluates the pointer over a . Declaration public JsonElement? Evaluate(JsonElement root) Parameters Type Name Description JsonElement root The . Returns Type Description System.Nullable < JsonElement > The sub-element at the pointer's location, or null if the path does not exist. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. | Improve this Doc View Source Parse(String, JsonPointerKind) Parses a JSON Pointer from a string. Declaration public static JsonPointer Parse(string source, JsonPointerKind pointerKind = JsonPointerKind.Unspecified) Parameters Type Name Description System.String source The source string. JsonPointerKind pointerKind (optional) Restricts the kind of pointer. Unspecified (default) allows both. Returns Type Description JsonPointer A JSON Pointer. Exceptions Type Condition PointerParseException source does not contain a valid pointer or contains a pointer of the wrong kind. | Improve this Doc View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description System.String The fully qualified type name. | Improve this Doc View Source TryParse(String, out JsonPointer, JsonPointerKind) Parses a JSON Pointer from a string. Declaration public static bool TryParse(string source, out JsonPointer pointer, JsonPointerKind pointerKind = JsonPointerKind.Unspecified) Parameters Type Name Description System.String source The source string. JsonPointer pointer The resulting pointer. JsonPointerKind pointerKind (optional) Restricts the kind of pointer. Unspecified (default) allows both. Returns Type Description System.Boolean true if the parse was successful; false otherwise. Operators | Improve this Doc View Source Equality(JsonPointer, JsonPointer) Evaluates equality via Equals(JsonPointer) . Declaration public static bool operator ==(JsonPointer left, JsonPointer right) Parameters Type Name Description JsonPointer left A JSON Pointer. JsonPointer right A JSON Pointer. Returns Type Description System.Boolean true if the pointers are equal; false otherwise. | Improve this Doc View Source Inequality(JsonPointer, JsonPointer) Evaluates inequality via Equals(JsonPointer) . Declaration public static bool operator !=(JsonPointer left, JsonPointer right) Parameters Type Name Description JsonPointer left A JSON Pointer. JsonPointer right A JSON Pointer. Returns Type Description System.Boolean false if the pointers are equal; true otherwise. Implements IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Pointer.JsonPointerKind.html": {
    "href": "api/Json.Pointer.JsonPointerKind.html",
    "title": "Enum JsonPointerKind",
    "keywords": "Enum JsonPointerKind Enumerates the different styles of JSON pointers. Namespace : Json.Pointer Assembly : JsonPointer.Net.dll Syntax public enum JsonPointerKind : int Fields Name Description Plain Indicates only plain JSON pointers. Unspecified No format specified. UriEncoded Indicates only URI-encoded JSON pointers. Extension Methods JsonDocumentExtensions.ToJsonDocument<JsonPointerKind>(Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Pointer.PointerParseException.html": {
    "href": "api/Json.Pointer.PointerParseException.html",
    "title": "Class PointerParseException",
    "keywords": "Class PointerParseException Thrown during parsing when the source string contains invalid JSON Pointer data. Inheritance System.Object PointerParseException Namespace : Json.Pointer Assembly : JsonPointer.Net.dll Syntax public class PointerParseException : Exception Constructors | Improve this Doc View Source PointerParseException() Creates a PointerParseException . Declaration public PointerParseException() | Improve this Doc View Source PointerParseException(String) Creates a PointerParseException . Declaration public PointerParseException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source PointerParseException(String, Exception) Creates a PointerParseException . Declaration public PointerParseException(string message, Exception inner) Parameters Type Name Description System.String message Exception inner Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Pointer.PointerSegment.html": {
    "href": "api/Json.Pointer.PointerSegment.html",
    "title": "Struct PointerSegment",
    "keywords": "Struct PointerSegment Represents a single segment of a JSON Pointer. Implements IEquatable < PointerSegment > Namespace : Json.Pointer Assembly : JsonPointer.Net.dll Syntax public struct PointerSegment : IEquatable<PointerSegment> Properties | Improve this Doc View Source Source Gets the source string. Declaration public string Source { get; } Property Value Type Description System.String | Improve this Doc View Source Value Gets the segment value. Declaration public string Value { get; } Property Value Type Description System.String Remarks This may differ from Source in that the segment may be URL-encoded. This contains the decoded value. Methods | Improve this Doc View Source Create(String, Boolean) Creates a new PointerSegment . Declaration public static PointerSegment Create(string value, bool uriFormatted = false) Parameters Type Name Description System.String value The value. System.Boolean uriFormatted Whether the segment should be URL-encoded. Returns Type Description PointerSegment | Improve this Doc View Source Equals(PointerSegment) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(PointerSegment other) Parameters Type Name Description PointerSegment other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. | Improve this Doc View Source Parse(Nullable<String>, Boolean) Parses a JSON Pointer segment from a string. Declaration public static PointerSegment Parse(string? source, bool uriFormatted) Parameters Type Name Description System.Nullable < System.String > source The source string. System.Boolean uriFormatted Indicates whether the segment should be URL-decoded. Returns Type Description PointerSegment A JSON Pointer segment. Exceptions Type Condition PointerParseException source contains an invalid escape sequence or an invalid URI-encoded sequence or ends with ~ . | Improve this Doc View Source TryParse(Nullable<String>, Boolean, out PointerSegment) Parses a JSON Pointer segment from a string. Declaration public static bool TryParse(string? source, bool uriFormatted, out PointerSegment segment) Parameters Type Name Description System.Nullable < System.String > source The source string. System.Boolean uriFormatted Indicates whether the segment should be URL-decoded. PointerSegment segment The resulting segments. Returns Type Description System.Boolean true if the parse was successful; false otherwise. Operators | Improve this Doc View Source Equality(PointerSegment, PointerSegment) Evaluates equality via Equals(PointerSegment) . Declaration public static bool operator ==(PointerSegment left, PointerSegment right) Parameters Type Name Description PointerSegment left A JSON Pointer. PointerSegment right A JSON Pointer. Returns Type Description System.Boolean true if the pointers are equal; false otherwise. | Improve this Doc View Source Inequality(PointerSegment, PointerSegment) Evaluates inequality via Equals(PointerSegment) . Declaration public static bool operator !=(PointerSegment left, PointerSegment right) Parameters Type Name Description PointerSegment left A JSON Pointer. PointerSegment right A JSON Pointer. Returns Type Description System.Boolean false if the pointers are equal; true otherwise. Implements IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Pointer.RelativeJsonPointer.html": {
    "href": "api/Json.Pointer.RelativeJsonPointer.html",
    "title": "Struct RelativeJsonPointer",
    "keywords": "Struct RelativeJsonPointer Represents a Relative JSON Pointer IAW draft-handrews-relative-json-pointer-02 Namespace : Json.Pointer Assembly : JsonPointer.Net.dll Syntax public struct RelativeJsonPointer Fields | Improve this Doc View Source Null The null pointer. Indicates no navigation should occur. Declaration public static readonly RelativeJsonPointer Null Field Value Type Description RelativeJsonPointer Properties | Improve this Doc View Source ArrayIndexManipulator Gets the number of lateral steps to take. Applicable only for arrays. Declaration public int ArrayIndexManipulator { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsIndexQuery Gets whether the pointer is an index query, which returns the index within the parent rather than the value. Declaration public bool IsIndexQuery { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ParentSteps Gets the number of parent (root) steps to take. Declaration public uint ParentSteps { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source Pointer Gets the pointer to follow after taking ParentSteps steps upward. Declaration public JsonPointer Pointer { get; } Property Value Type Description JsonPointer Methods | Improve this Doc View Source Evaluate(JsonElement) Evaluates the relative pointer over a . Declaration public JsonElement Evaluate(JsonElement element) Parameters Type Name Description JsonElement element The . Returns Type Description JsonElement The sub-element at the relative pointer's location, or null if the path does not exist. | Improve this Doc View Source FromPointer(UInt32, JsonPointer) Creates a Relative JSON Pointer from a JSON Pointer and a number of parent steps. Declaration public static RelativeJsonPointer FromPointer(uint parentSteps, JsonPointer pointer) Parameters Type Name Description System.UInt32 parentSteps The number of parent steps. JsonPointer pointer The JSON Pointer. Returns Type Description RelativeJsonPointer A Relative JSON Pointer. | Improve this Doc View Source FromPointer(UInt32, Int32, JsonPointer) Creates a Relative JSON Pointer from a JSON Pointer and a number of parent steps. Declaration public static RelativeJsonPointer FromPointer(uint parentSteps, int arrayIndexManipulator, JsonPointer pointer) Parameters Type Name Description System.UInt32 parentSteps The number of parent steps. System.Int32 arrayIndexManipulator The index manipulator. JsonPointer pointer The JSON Pointer. Returns Type Description RelativeJsonPointer A Relative JSON Pointer. | Improve this Doc View Source IndexQuery(UInt32) Creates an index query pointer. Declaration public static RelativeJsonPointer IndexQuery(uint parentSteps) Parameters Type Name Description System.UInt32 parentSteps Returns Type Description RelativeJsonPointer A Relative JSON Pointer. | Improve this Doc View Source IndexQuery(UInt32, Int32) Creates an index query pointer. Declaration public static RelativeJsonPointer IndexQuery(uint parentSteps, int arrayIndexManipulator) Parameters Type Name Description System.UInt32 parentSteps System.Int32 arrayIndexManipulator The index manipulator. Returns Type Description RelativeJsonPointer A Relative JSON Pointer. | Improve this Doc View Source Parse(String) Parses a JSON Pointer segment from a string. Declaration public static RelativeJsonPointer Parse(string source) Parameters Type Name Description System.String source The source string. Returns Type Description RelativeJsonPointer A Relative JSON Pointer. Exceptions Type Condition PointerParseException source does not contain a valid relative pointer. | Improve this Doc View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description System.String The fully qualified type name. | Improve this Doc View Source TryParse(String, out RelativeJsonPointer) Parses a JSON Pointer from a string. Declaration public static bool TryParse(string source, out RelativeJsonPointer relativePointer) Parameters Type Name Description System.String source The source string. RelativeJsonPointer relativePointer The resulting relative pointer. Returns Type Description System.Boolean true if the parse was successful; false otherwise. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.AdditionalItemsKeyword.html": {
    "href": "api/Json.Schema.AdditionalItemsKeyword.html",
    "title": "Class AdditionalItemsKeyword",
    "keywords": "Class AdditionalItemsKeyword Handles additionalItems . Inheritance System.Object AdditionalItemsKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable < AdditionalItemsKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class AdditionalItemsKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaContainer, IEquatable<AdditionalItemsKeyword> Constructors | Improve this Doc View Source AdditionalItemsKeyword(JsonSchema) Creates a new AdditionalItemsKeyword . Declaration public AdditionalItemsKeyword(JsonSchema value) Parameters Type Name Description JsonSchema value The keyword's schema. Properties | Improve this Doc View Source Schema The schema by which to validation additional items. Declaration public JsonSchema Schema { get; } Property Value Type Description JsonSchema Methods | Improve this Doc View Source Equals(AdditionalItemsKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(AdditionalItemsKeyword other) Parameters Type Name Description AdditionalItemsKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.AdditionalPropertiesKeyword.html": {
    "href": "api/Json.Schema.AdditionalPropertiesKeyword.html",
    "title": "Class AdditionalPropertiesKeyword",
    "keywords": "Class AdditionalPropertiesKeyword Handles additionalProperties . Inheritance System.Object AdditionalPropertiesKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable < AdditionalPropertiesKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class AdditionalPropertiesKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaContainer, IEquatable<AdditionalPropertiesKeyword> Constructors | Improve this Doc View Source AdditionalPropertiesKeyword(JsonSchema) Creates a new AdditionalPropertiesKeyword . Declaration public AdditionalPropertiesKeyword(JsonSchema value) Parameters Type Name Description JsonSchema value The keyword's schema. Properties | Improve this Doc View Source Schema The schema by which to validation additional properties. Declaration public JsonSchema Schema { get; } Property Value Type Description JsonSchema Methods | Improve this Doc View Source Equals(AdditionalPropertiesKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(AdditionalPropertiesKeyword other) Parameters Type Name Description AdditionalPropertiesKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.AllOfKeyword.html": {
    "href": "api/Json.Schema.AllOfKeyword.html",
    "title": "Class AllOfKeyword",
    "keywords": "Class AllOfKeyword Handles allOf . Inheritance System.Object AllOfKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaCollector IEquatable < AllOfKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class AllOfKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaCollector, IEquatable<AllOfKeyword> Constructors | Improve this Doc View Source AllOfKeyword(IEnumerable<JsonSchema>) Creates a new AllOfKeyword . Declaration public AllOfKeyword(IEnumerable<JsonSchema> values) Parameters Type Name Description IEnumerable < JsonSchema > values The set of schemas. | Improve this Doc View Source AllOfKeyword(JsonSchema[]) Creates a new AllOfKeyword . Declaration public AllOfKeyword(params JsonSchema[] values) Parameters Type Name Description JsonSchema [] values The set of schemas. Properties | Improve this Doc View Source Schemas The keywords schema collection. Declaration public IReadOnlyList<JsonSchema> Schemas { get; } Property Value Type Description IReadOnlyList < JsonSchema > Methods | Improve this Doc View Source Equals(AllOfKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(AllOfKeyword other) Parameters Type Name Description AllOfKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable ISchemaCollector IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.AnchorKeyword.html": {
    "href": "api/Json.Schema.AnchorKeyword.html",
    "title": "Class AnchorKeyword",
    "keywords": "Class AnchorKeyword Handles $anchor . Inheritance System.Object AnchorKeyword Implements IJsonSchemaKeyword IEquatable < AnchorKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class AnchorKeyword : object, IJsonSchemaKeyword, IAnchorProvider, IEquatable<AnchorKeyword> Constructors | Improve this Doc View Source AnchorKeyword(String) Creates a new AnchorKeyword . Declaration public AnchorKeyword(string anchor) Parameters Type Name Description System.String anchor The anchor value. Properties | Improve this Doc View Source Anchor The value of the anchor. Declaration public string Anchor { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(AnchorKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(AnchorKeyword other) Parameters Type Name Description AnchorKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Annotation.html": {
    "href": "api/Json.Schema.Annotation.html",
    "title": "Class Annotation",
    "keywords": "Class Annotation Holder for an annotation value. Inheritance System.Object Annotation Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class Annotation : object Constructors | Improve this Doc View Source Annotation(String, Object, JsonPointer) Creates a new Annotation . Declaration public Annotation(string owner, object value, in JsonPointer source) Parameters Type Name Description System.String owner The keyword that created the annotation (acts as a key for lookup). System.Object value The annotation value. JsonPointer source The pointer to the keyword that created the annotation. Properties | Improve this Doc View Source Owner The keyword that created the annotation (acts as a key for lookup). Declaration public string Owner { get; } Property Value Type Description System.String | Improve this Doc View Source Source The pointer to the keyword that created the annotation. Declaration public JsonPointer Source { get; } Property Value Type Description JsonPointer | Improve this Doc View Source Value The annotation value. Declaration public object Value { get; } Property Value Type Description System.Object Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.AnyOfKeyword.html": {
    "href": "api/Json.Schema.AnyOfKeyword.html",
    "title": "Class AnyOfKeyword",
    "keywords": "Class AnyOfKeyword Handles anyOf . Inheritance System.Object AnyOfKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaCollector IEquatable < AnyOfKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class AnyOfKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaCollector, IEquatable<AnyOfKeyword> Constructors | Improve this Doc View Source AnyOfKeyword(IEnumerable<JsonSchema>) Creates a new AnyOfKeyword . Declaration public AnyOfKeyword(IEnumerable<JsonSchema> values) Parameters Type Name Description IEnumerable < JsonSchema > values The set of schemas. | Improve this Doc View Source AnyOfKeyword(JsonSchema[]) Creates a new AnyOfKeyword . Declaration public AnyOfKeyword(params JsonSchema[] values) Parameters Type Name Description JsonSchema [] values The set of schemas. Properties | Improve this Doc View Source Schemas The keywords schema collection. Declaration public IReadOnlyList<JsonSchema> Schemas { get; } Property Value Type Description IReadOnlyList < JsonSchema > Methods | Improve this Doc View Source Equals(AnyOfKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(AnyOfKeyword other) Parameters Type Name Description AnyOfKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable ISchemaCollector IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ApplicatorAttribute.html": {
    "href": "api/Json.Schema.ApplicatorAttribute.html",
    "title": "Class ApplicatorAttribute",
    "keywords": "Class ApplicatorAttribute Indicates that the keyword is classified as an applicator. Inheritance System.Object ApplicatorAttribute Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ApplicatorAttribute : Attribute Remarks Apply this attribute to your schema keyword if it contains subschemas that also provide validations. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.CommentKeyword.html": {
    "href": "api/Json.Schema.CommentKeyword.html",
    "title": "Class CommentKeyword",
    "keywords": "Class CommentKeyword Handles $comment . Inheritance System.Object CommentKeyword Implements IJsonSchemaKeyword IEquatable < CommentKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class CommentKeyword : object, IJsonSchemaKeyword, IEquatable<CommentKeyword> Constructors | Improve this Doc View Source CommentKeyword(String) Creates a new CommentKeyword . Declaration public CommentKeyword(string value) Parameters Type Name Description System.String value The comment value. Properties | Improve this Doc View Source Value The comment value. Declaration public string Value { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(CommentKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(CommentKeyword other) Parameters Type Name Description CommentKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ConstKeyword.html": {
    "href": "api/Json.Schema.ConstKeyword.html",
    "title": "Class ConstKeyword",
    "keywords": "Class ConstKeyword Handles const . Inheritance System.Object ConstKeyword Implements IJsonSchemaKeyword IEquatable < ConstKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ConstKeyword : object, IJsonSchemaKeyword, IEquatable<ConstKeyword> Constructors | Improve this Doc View Source ConstKeyword(JsonElement) Creates a new ConstKeyword . Declaration public ConstKeyword(JsonElement value) Parameters Type Name Description JsonElement value The constant value. Properties | Improve this Doc View Source Value The constant value. Declaration public JsonElement Value { get; } Property Value Type Description JsonElement Methods | Improve this Doc View Source Equals(ConstKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ConstKeyword other) Parameters Type Name Description ConstKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ContainsKeyword.html": {
    "href": "api/Json.Schema.ContainsKeyword.html",
    "title": "Class ContainsKeyword",
    "keywords": "Class ContainsKeyword Handles contains . Inheritance System.Object ContainsKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable < ContainsKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ContainsKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaContainer, IEquatable<ContainsKeyword> Constructors | Improve this Doc View Source ContainsKeyword(JsonSchema) Creates a new ContainsKeyword . Declaration public ContainsKeyword(JsonSchema value) Parameters Type Name Description JsonSchema value The schema to match. Properties | Improve this Doc View Source Schema The schema to match. Declaration public JsonSchema Schema { get; } Property Value Type Description JsonSchema Methods | Improve this Doc View Source Equals(ContainsKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ContainsKeyword other) Parameters Type Name Description ContainsKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ContentMediaEncodingKeyword.html": {
    "href": "api/Json.Schema.ContentMediaEncodingKeyword.html",
    "title": "Class ContentMediaEncodingKeyword",
    "keywords": "Class ContentMediaEncodingKeyword Handles contentMediaEncoding . Inheritance System.Object ContentMediaEncodingKeyword Implements IJsonSchemaKeyword IEquatable < ContentMediaEncodingKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ContentMediaEncodingKeyword : object, IJsonSchemaKeyword, IEquatable<ContentMediaEncodingKeyword> Constructors | Improve this Doc View Source ContentMediaEncodingKeyword(String) Creates a new ContentMediaEncodingKeyword . Declaration public ContentMediaEncodingKeyword(string value) Parameters Type Name Description System.String value The encoding value. Properties | Improve this Doc View Source Value The encoding value. Declaration public string Value { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(ContentMediaEncodingKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ContentMediaEncodingKeyword other) Parameters Type Name Description ContentMediaEncodingKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ContentMediaTypeKeyword.html": {
    "href": "api/Json.Schema.ContentMediaTypeKeyword.html",
    "title": "Class ContentMediaTypeKeyword",
    "keywords": "Class ContentMediaTypeKeyword Handles contentMediaType . Inheritance System.Object ContentMediaTypeKeyword Implements IJsonSchemaKeyword IEquatable < ContentMediaTypeKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ContentMediaTypeKeyword : object, IJsonSchemaKeyword, IEquatable<ContentMediaTypeKeyword> Constructors | Improve this Doc View Source ContentMediaTypeKeyword(String) Creates a new ContentMediaTypeKeyword . Declaration public ContentMediaTypeKeyword(string value) Parameters Type Name Description System.String value The media type. Properties | Improve this Doc View Source Value The media type. Declaration public string Value { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(ContentMediaTypeKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ContentMediaTypeKeyword other) Parameters Type Name Description ContentMediaTypeKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ContentSchemaKeyword.html": {
    "href": "api/Json.Schema.ContentSchemaKeyword.html",
    "title": "Class ContentSchemaKeyword",
    "keywords": "Class ContentSchemaKeyword Handles contentSchema . Inheritance System.Object ContentSchemaKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable < ContentSchemaKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ContentSchemaKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaContainer, IEquatable<ContentSchemaKeyword> Constructors | Improve this Doc View Source ContentSchemaKeyword(JsonSchema) Creates a new ContentSchemaKeyword . Declaration public ContentSchemaKeyword(JsonSchema value) Parameters Type Name Description JsonSchema value The schema against which to validate the content. Properties | Improve this Doc View Source Schema The schema against which to validate the content. Declaration public JsonSchema Schema { get; } Property Value Type Description JsonSchema Methods | Improve this Doc View Source Equals(ContentSchemaKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ContentSchemaKeyword other) Parameters Type Name Description ContentSchemaKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.DefaultKeyword.html": {
    "href": "api/Json.Schema.DefaultKeyword.html",
    "title": "Class DefaultKeyword",
    "keywords": "Class DefaultKeyword Handles default . Inheritance System.Object DefaultKeyword Implements IJsonSchemaKeyword IEquatable < DefaultKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class DefaultKeyword : object, IJsonSchemaKeyword, IEquatable<DefaultKeyword> Constructors | Improve this Doc View Source DefaultKeyword(JsonElement) Creates a new DefaultKeyword . Declaration public DefaultKeyword(JsonElement value) Parameters Type Name Description JsonElement value The value to use as the default. Properties | Improve this Doc View Source Value The value to use as the default. Declaration public JsonElement Value { get; } Property Value Type Description JsonElement Methods | Improve this Doc View Source Equals(DefaultKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(DefaultKeyword other) Parameters Type Name Description DefaultKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.DefinitionsKeyword.html": {
    "href": "api/Json.Schema.DefinitionsKeyword.html",
    "title": "Class DefinitionsKeyword",
    "keywords": "Class DefinitionsKeyword Handles definitions . Inheritance System.Object DefinitionsKeyword Implements IJsonSchemaKeyword IRefResolvable IKeyedSchemaCollector IEquatable < DefinitionsKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class DefinitionsKeyword : object, IJsonSchemaKeyword, IRefResolvable, IKeyedSchemaCollector, IEquatable<DefinitionsKeyword> Constructors | Improve this Doc View Source DefinitionsKeyword(IReadOnlyDictionary<String, JsonSchema>) Creates a new DefinitionsKeyword . Declaration public DefinitionsKeyword(IReadOnlyDictionary<string, JsonSchema> values) Parameters Type Name Description IReadOnlyDictionary < System.String , JsonSchema > values The collection of schema definitions. Properties | Improve this Doc View Source Definitions The collection of schema definitions. Declaration public IReadOnlyDictionary<string, JsonSchema> Definitions { get; } Property Value Type Description IReadOnlyDictionary < System.String , JsonSchema > Methods | Improve this Doc View Source Equals(DefinitionsKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(DefinitionsKeyword other) Parameters Type Name Description DefinitionsKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IKeyedSchemaCollector.Schemas Declaration IReadOnlyDictionary<string, JsonSchema> IKeyedSchemaCollector.Schemas { get; } Returns Type Description IReadOnlyDictionary < System.String , JsonSchema > | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable IKeyedSchemaCollector IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.DefsKeyword.html": {
    "href": "api/Json.Schema.DefsKeyword.html",
    "title": "Class DefsKeyword",
    "keywords": "Class DefsKeyword Handles $defs . Inheritance System.Object DefsKeyword Implements IJsonSchemaKeyword IRefResolvable IKeyedSchemaCollector IEquatable < DefsKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class DefsKeyword : object, IJsonSchemaKeyword, IRefResolvable, IKeyedSchemaCollector, IEquatable<DefsKeyword> Constructors | Improve this Doc View Source DefsKeyword(IReadOnlyDictionary<String, JsonSchema>) Creates a new DefsKeyword . Declaration public DefsKeyword(IReadOnlyDictionary<string, JsonSchema> values) Parameters Type Name Description IReadOnlyDictionary < System.String , JsonSchema > values The collection of schema definitions. Properties | Improve this Doc View Source Definitions The collection of schema definitions. Declaration public IReadOnlyDictionary<string, JsonSchema> Definitions { get; } Property Value Type Description IReadOnlyDictionary < System.String , JsonSchema > Methods | Improve this Doc View Source Equals(DefsKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(DefsKeyword other) Parameters Type Name Description DefsKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IKeyedSchemaCollector.Schemas Declaration IReadOnlyDictionary<string, JsonSchema> IKeyedSchemaCollector.Schemas { get; } Returns Type Description IReadOnlyDictionary < System.String , JsonSchema > | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable IKeyedSchemaCollector IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.DependenciesKeyword.html": {
    "href": "api/Json.Schema.DependenciesKeyword.html",
    "title": "Class DependenciesKeyword",
    "keywords": "Class DependenciesKeyword Handles dependencies . Inheritance System.Object DependenciesKeyword Implements IJsonSchemaKeyword IRefResolvable IKeyedSchemaCollector IEquatable < DependenciesKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class DependenciesKeyword : object, IJsonSchemaKeyword, IRefResolvable, IKeyedSchemaCollector, IEquatable<DependenciesKeyword> Constructors | Improve this Doc View Source DependenciesKeyword(IReadOnlyDictionary<String, SchemaOrPropertyList>) Creates a new DependenciesKeyword . Declaration public DependenciesKeyword(IReadOnlyDictionary<string, SchemaOrPropertyList> values) Parameters Type Name Description IReadOnlyDictionary < System.String , SchemaOrPropertyList > values The collection of dependencies. Properties | Improve this Doc View Source Requirements The collection of dependencies. Declaration public IReadOnlyDictionary<string, SchemaOrPropertyList> Requirements { get; } Property Value Type Description IReadOnlyDictionary < System.String , SchemaOrPropertyList > Methods | Improve this Doc View Source Equals(DependenciesKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(DependenciesKeyword other) Parameters Type Name Description DependenciesKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IKeyedSchemaCollector.Schemas Declaration IReadOnlyDictionary<string, JsonSchema> IKeyedSchemaCollector.Schemas { get; } Returns Type Description IReadOnlyDictionary < System.String , JsonSchema > | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable IKeyedSchemaCollector IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.DependentRequiredKeyword.html": {
    "href": "api/Json.Schema.DependentRequiredKeyword.html",
    "title": "Class DependentRequiredKeyword",
    "keywords": "Class DependentRequiredKeyword Handles dependentRequired . Inheritance System.Object DependentRequiredKeyword Implements IJsonSchemaKeyword IEquatable < DependentRequiredKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class DependentRequiredKeyword : object, IJsonSchemaKeyword, IEquatable<DependentRequiredKeyword> Constructors | Improve this Doc View Source DependentRequiredKeyword(IReadOnlyDictionary<String, IReadOnlyList<String>>) Creates a new DependentRequiredKeyword . Declaration public DependentRequiredKeyword(IReadOnlyDictionary<string, IReadOnlyList<string>> values) Parameters Type Name Description IReadOnlyDictionary < System.String , IReadOnlyList < System.String >> values The collection of \"required\"-type dependencies. Properties | Improve this Doc View Source Requirements The collection of \"required\"-type dependencies. Declaration public IReadOnlyDictionary<string, IReadOnlyList<string>> Requirements { get; } Property Value Type Description IReadOnlyDictionary < System.String , IReadOnlyList < System.String >> Methods | Improve this Doc View Source Equals(DependentRequiredKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(DependentRequiredKeyword other) Parameters Type Name Description DependentRequiredKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.DependentSchemasKeyword.html": {
    "href": "api/Json.Schema.DependentSchemasKeyword.html",
    "title": "Class DependentSchemasKeyword",
    "keywords": "Class DependentSchemasKeyword Handles dependentSchemas . Inheritance System.Object DependentSchemasKeyword Implements IJsonSchemaKeyword IRefResolvable IKeyedSchemaCollector IEquatable < DependentSchemasKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class DependentSchemasKeyword : object, IJsonSchemaKeyword, IRefResolvable, IKeyedSchemaCollector, IEquatable<DependentSchemasKeyword> Constructors | Improve this Doc View Source DependentSchemasKeyword(IReadOnlyDictionary<String, JsonSchema>) Creates a new DependentSchemasKeyword . Declaration public DependentSchemasKeyword(IReadOnlyDictionary<string, JsonSchema> values) Parameters Type Name Description IReadOnlyDictionary < System.String , JsonSchema > values The collection of \"schema\"-type dependencies. Properties | Improve this Doc View Source Schemas The collection of \"schema\"-type dependencies. Declaration public IReadOnlyDictionary<string, JsonSchema> Schemas { get; } Property Value Type Description IReadOnlyDictionary < System.String , JsonSchema > Methods | Improve this Doc View Source Equals(DependentSchemasKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(DependentSchemasKeyword other) Parameters Type Name Description DependentSchemasKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable IKeyedSchemaCollector IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.DeprecatedKeyword.html": {
    "href": "api/Json.Schema.DeprecatedKeyword.html",
    "title": "Class DeprecatedKeyword",
    "keywords": "Class DeprecatedKeyword Handles deprecated . Inheritance System.Object DeprecatedKeyword Implements IJsonSchemaKeyword IEquatable < DeprecatedKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class DeprecatedKeyword : object, IJsonSchemaKeyword, IEquatable<DeprecatedKeyword> Constructors | Improve this Doc View Source DeprecatedKeyword(Boolean) Creates a new DeprecatedKeyword . Declaration public DeprecatedKeyword(bool value) Parameters Type Name Description System.Boolean value Whether the schema is deprecated. Properties | Improve this Doc View Source Value Whether the schema is deprecated. Declaration public bool Value { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(DeprecatedKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(DeprecatedKeyword other) Parameters Type Name Description DeprecatedKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.DescriptionKeyword.html": {
    "href": "api/Json.Schema.DescriptionKeyword.html",
    "title": "Class DescriptionKeyword",
    "keywords": "Class DescriptionKeyword Handles description . Inheritance System.Object DescriptionKeyword Implements IJsonSchemaKeyword IEquatable < DescriptionKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class DescriptionKeyword : object, IJsonSchemaKeyword, IEquatable<DescriptionKeyword> Constructors | Improve this Doc View Source DescriptionKeyword(String) Creates a new DescriptionKeyword . Declaration public DescriptionKeyword(string value) Parameters Type Name Description System.String value The description. Properties | Improve this Doc View Source Value The description. Declaration public string Value { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(DescriptionKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(DescriptionKeyword other) Parameters Type Name Description DescriptionKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Draft.html": {
    "href": "api/Json.Schema.Draft.html",
    "title": "Enum Draft",
    "keywords": "Enum Draft Enumerates the supported JSON Schema drafts. Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public enum Draft : int Fields Name Description Draft201909 JSON Schema Draft 2019-09. Draft202012 JSON Schema Draft 2020-12. Draft6 JSON Schema Draft 6. Draft7 JSON Schema Draft 7. Unspecified The draft to use should be determined by the collection of keywords. Extension Methods JsonDocumentExtensions.ToJsonDocument<Draft>(Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Duration.html": {
    "href": "api/Json.Schema.Duration.html",
    "title": "Struct Duration",
    "keywords": "Struct Duration Represents an ISO 8601 ABNF duration value. Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public struct Duration Properties | Improve this Doc View Source Days The number of days. Declaration public uint Days { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source Hours The number of hours. Declaration public uint Hours { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source Minutes The number of minutes. Declaration public uint Minutes { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source Months The number of months. Declaration public uint Months { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source Seconds The number of seconds. Declaration public uint Seconds { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source Weeks The number of weeks. Incompatible with Years , Months , and Days . Declaration public uint Weeks { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source Years The number of years. Declaration public uint Years { get; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Parse(String) Parses a Duration from a string. Declaration public static Duration Parse(string source) Parameters Type Name Description System.String source The source string. Returns Type Description Duration A duration. | Improve this Doc View Source TryParse(String, out Duration) Parses a Duration from a string. Declaration public static bool TryParse(string source, out Duration duration) Parameters Type Name Description System.String source The source string. Duration duration The resulting duration. Returns Type Description System.Boolean true if the parse was successful; false otherwise. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.DynamicAnchorKeyword.html": {
    "href": "api/Json.Schema.DynamicAnchorKeyword.html",
    "title": "Class DynamicAnchorKeyword",
    "keywords": "Class DynamicAnchorKeyword Handles $dynamicAnchor . Inheritance System.Object DynamicAnchorKeyword Implements IJsonSchemaKeyword IEquatable < DynamicAnchorKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class DynamicAnchorKeyword : object, IJsonSchemaKeyword, IAnchorProvider, IEquatable<DynamicAnchorKeyword> Constructors | Improve this Doc View Source DynamicAnchorKeyword(String) Creates a new DynamicAnchorKeyword . Declaration public DynamicAnchorKeyword(string value) Parameters Type Name Description System.String value The anchor value. Properties | Improve this Doc View Source Value Gets the anchor value. Declaration public string Value { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(DynamicAnchorKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(DynamicAnchorKeyword other) Parameters Type Name Description DynamicAnchorKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.DynamicRefKeyword.html": {
    "href": "api/Json.Schema.DynamicRefKeyword.html",
    "title": "Class DynamicRefKeyword",
    "keywords": "Class DynamicRefKeyword Handles $dynamicRef . Inheritance System.Object DynamicRefKeyword Implements IJsonSchemaKeyword IEquatable < DynamicRefKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class DynamicRefKeyword : object, IJsonSchemaKeyword, IEquatable<DynamicRefKeyword> Constructors | Improve this Doc View Source DynamicRefKeyword(Uri) Creates a new DynamicRefKeyword . Declaration public DynamicRefKeyword(Uri value) Parameters Type Name Description Uri value Properties | Improve this Doc View Source Reference The URI reference. Declaration public Uri Reference { get; } Property Value Type Description Uri Methods | Improve this Doc View Source Equals(DynamicRefKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(DynamicRefKeyword other) Parameters Type Name Description DynamicRefKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ElseKeyword.html": {
    "href": "api/Json.Schema.ElseKeyword.html",
    "title": "Class ElseKeyword",
    "keywords": "Class ElseKeyword Handles else . Inheritance System.Object ElseKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable < ElseKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ElseKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaContainer, IEquatable<ElseKeyword> Constructors | Improve this Doc View Source ElseKeyword(JsonSchema) Creates a new ElseKeyword . Declaration public ElseKeyword(JsonSchema value) Parameters Type Name Description JsonSchema value The schema to match. Properties | Improve this Doc View Source Schema The schema to match. Declaration public JsonSchema Schema { get; } Property Value Type Description JsonSchema Methods | Improve this Doc View Source Equals(ElseKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ElseKeyword other) Parameters Type Name Description ElseKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.EnumerableExtensions.html": {
    "href": "api/Json.Schema.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions",
    "keywords": "Class EnumerableExtensions More extensions on . Inheritance System.Object EnumerableExtensions Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public static class EnumerableExtensions : object Methods | Improve this Doc View Source ContentsEqual<T>(Nullable<IReadOnlyList<T>>, Nullable<IReadOnlyList<T>>) Determines contents-based equality: each element appears equally in each set. Declaration public static bool ContentsEqual<T>(this IReadOnlyList<T>? collection, IReadOnlyList<T>? other) Parameters Type Name Description System.Nullable < IReadOnlyList <T>> collection The first collection. System.Nullable < IReadOnlyList <T>> other The second collection. Returns Type Description System.Boolean true if the collections contain the same number of the same elements; false otherwise. Type Parameters Name Description T The element type. | Improve this Doc View Source ContentsEqual<T>(Nullable<IReadOnlyList<T>>, Nullable<IReadOnlyList<T>>, IEqualityComparer<T>) Determines contents-based equality: each element appears equally in each set. Declaration public static bool ContentsEqual<T>(this IReadOnlyList<T>? collection, IReadOnlyList<T>? other, IEqualityComparer<T> comparer) Parameters Type Name Description System.Nullable < IReadOnlyList <T>> collection The first collection. System.Nullable < IReadOnlyList <T>> other The second collection. IEqualityComparer <T> comparer A custom equality comparer. Returns Type Description System.Boolean true if the collections contain the same number of the same elements; false otherwise. Type Parameters Name Description T The element type. | Improve this Doc View Source GetStringDictionaryHashCode<T>(IDictionary<String, T>) Gets a string-dictionary-oriented hash code by combining the hash codes of its elements. Declaration public static int GetStringDictionaryHashCode<T>(this IDictionary<string, T> collection) Parameters Type Name Description IDictionary < System.String , T> collection The collection of elements. Returns Type Description System.Int32 A singular integer value that represents the collection. Type Parameters Name Description T The type of element. Remarks This can be used to correctly compare the contents of string dictionaries where key ordering is not important. | Improve this Doc View Source GetStringDictionaryHashCode<T>(IReadOnlyDictionary<String, T>) Gets a string-dictionary-oriented hash code by combining the hash codes of its elements. Declaration public static int GetStringDictionaryHashCode<T>(this IReadOnlyDictionary<string, T> collection) Parameters Type Name Description IReadOnlyDictionary < System.String , T> collection The collection of elements. Returns Type Description System.Int32 A singular integer value that represents the collection. Type Parameters Name Description T The type of element. Remarks This can be used to correctly compare the contents of string dictionaries where key ordering is not important. | Improve this Doc View Source GetUnorderedCollectionHashCode<T>(IEnumerable<T>) Gets a collection-oriented hash code by combining the hash codes of its elements. Declaration public static int GetUnorderedCollectionHashCode<T>(this IEnumerable<T> collection) Parameters Type Name Description IEnumerable <T> collection The collection of elements. Returns Type Description System.Int32 A singular integer value that represents the collection. Type Parameters Name Description T The type of element. Remarks This can be used to correctly compare the contents of collections."
  },
  "api/Json.Schema.EnumKeyword.html": {
    "href": "api/Json.Schema.EnumKeyword.html",
    "title": "Class EnumKeyword",
    "keywords": "Class EnumKeyword Handles enum . Inheritance System.Object EnumKeyword Implements IJsonSchemaKeyword IEquatable < EnumKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class EnumKeyword : object, IJsonSchemaKeyword, IEquatable<EnumKeyword> Constructors | Improve this Doc View Source EnumKeyword(IEnumerable<JsonElement>) Creates a new EnumKeyword . Declaration public EnumKeyword(IEnumerable<JsonElement> values) Parameters Type Name Description IEnumerable < JsonElement > values The collection of enum values. | Improve this Doc View Source EnumKeyword(JsonElement[]) Creates a new EnumKeyword . Declaration public EnumKeyword(params JsonElement[] values) Parameters Type Name Description JsonElement [] values The collection of enum values. Properties | Improve this Doc View Source Values The collection of enum values (they don't need to be strings). Declaration public IReadOnlyList<JsonElement> Values { get; } Property Value Type Description IReadOnlyList < JsonElement > Methods | Improve this Doc View Source Equals(EnumKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(EnumKeyword other) Parameters Type Name Description EnumKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ExamplesKeyword.html": {
    "href": "api/Json.Schema.ExamplesKeyword.html",
    "title": "Class ExamplesKeyword",
    "keywords": "Class ExamplesKeyword Handles examples . Inheritance System.Object ExamplesKeyword Implements IJsonSchemaKeyword IEquatable < ExamplesKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ExamplesKeyword : object, IJsonSchemaKeyword, IEquatable<ExamplesKeyword> Constructors | Improve this Doc View Source ExamplesKeyword(IEnumerable<JsonElement>) Creates a new ExamplesKeyword . Declaration public ExamplesKeyword(IEnumerable<JsonElement> values) Parameters Type Name Description IEnumerable < JsonElement > values The collection of example values. | Improve this Doc View Source ExamplesKeyword(JsonElement[]) Creates a new ExamplesKeyword . Declaration public ExamplesKeyword(params JsonElement[] values) Parameters Type Name Description JsonElement [] values The collection of example values. Properties | Improve this Doc View Source Values The collection of example values. Declaration public IReadOnlyList<JsonElement> Values { get; } Property Value Type Description IReadOnlyList < JsonElement > Methods | Improve this Doc View Source Equals(ExamplesKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ExamplesKeyword other) Parameters Type Name Description ExamplesKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ExclusiveMaximumKeyword.html": {
    "href": "api/Json.Schema.ExclusiveMaximumKeyword.html",
    "title": "Class ExclusiveMaximumKeyword",
    "keywords": "Class ExclusiveMaximumKeyword Handles exclusiveMaximum . Inheritance System.Object ExclusiveMaximumKeyword Implements IJsonSchemaKeyword IEquatable < ExclusiveMaximumKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ExclusiveMaximumKeyword : object, IJsonSchemaKeyword, IEquatable<ExclusiveMaximumKeyword> Constructors | Improve this Doc View Source ExclusiveMaximumKeyword(Decimal) Creates a new ExclusiveMaximumKeyword . Declaration public ExclusiveMaximumKeyword(decimal value) Parameters Type Name Description System.Decimal value The maximum value. Properties | Improve this Doc View Source Value The maximum value. Declaration public decimal Value { get; } Property Value Type Description System.Decimal Methods | Improve this Doc View Source Equals(ExclusiveMaximumKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ExclusiveMaximumKeyword other) Parameters Type Name Description ExclusiveMaximumKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ExclusiveMinimumKeyword.html": {
    "href": "api/Json.Schema.ExclusiveMinimumKeyword.html",
    "title": "Class ExclusiveMinimumKeyword",
    "keywords": "Class ExclusiveMinimumKeyword Handles exclusiveMinimum . Inheritance System.Object ExclusiveMinimumKeyword Implements IJsonSchemaKeyword IEquatable < ExclusiveMinimumKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ExclusiveMinimumKeyword : object, IJsonSchemaKeyword, IEquatable<ExclusiveMinimumKeyword> Constructors | Improve this Doc View Source ExclusiveMinimumKeyword(Decimal) Creates a new ExclusiveMinimumKeyword . Declaration public ExclusiveMinimumKeyword(decimal value) Parameters Type Name Description System.Decimal value The minimum value. Properties | Improve this Doc View Source Value The minimum value. Declaration public decimal Value { get; } Property Value Type Description System.Decimal Methods | Improve this Doc View Source Equals(ExclusiveMinimumKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ExclusiveMinimumKeyword other) Parameters Type Name Description ExclusiveMinimumKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Format.html": {
    "href": "api/Json.Schema.Format.html",
    "title": "Class Format",
    "keywords": "Class Format Represents a format. Inheritance System.Object Format PredicateFormat RegexFormat Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class Format : object Constructors | Improve this Doc View Source Format(String) Creates a new Format . Declaration public Format(string key) Parameters Type Name Description System.String key The format key. Properties | Improve this Doc View Source Key The format key. Declaration public string Key { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Validate(JsonElement) Validates an instance against a format. Declaration public virtual bool Validate(JsonElement element) Parameters Type Name Description JsonElement element The element to validate. Returns Type Description System.Boolean true . Override to return another value. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.FormatKeyword.html": {
    "href": "api/Json.Schema.FormatKeyword.html",
    "title": "Class FormatKeyword",
    "keywords": "Class FormatKeyword Handles format . Inheritance System.Object FormatKeyword Implements IJsonSchemaKeyword IEquatable < FormatKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class FormatKeyword : object, IJsonSchemaKeyword, IEquatable<FormatKeyword> Constructors | Improve this Doc View Source FormatKeyword(Format) Creates a new FormatKeyword . Declaration public FormatKeyword(Format value) Parameters Type Name Description Format value The format. Properties | Improve this Doc View Source Value The format. Declaration public Format Value { get; } Property Value Type Description Format Methods | Improve this Doc View Source Equals(FormatKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(FormatKeyword other) Parameters Type Name Description FormatKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Formats.html": {
    "href": "api/Json.Schema.Formats.html",
    "title": "Class Formats",
    "keywords": "Class Formats The formats supported by JSON Schema base specifications. Inheritance System.Object Formats Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public static class Formats : object Fields | Improve this Doc View Source Date Defines the date format. Declaration public static readonly Format Date Field Value Type Description Format | Improve this Doc View Source DateTime Defines the date-time format. Declaration public static readonly Format DateTime Field Value Type Description Format | Improve this Doc View Source Duration Defines the duration format. Declaration public static readonly Format Duration Field Value Type Description Format | Improve this Doc View Source Email Defines the email format. Declaration public static readonly Format Email Field Value Type Description Format | Improve this Doc View Source Hostname Defines the hostname format. Declaration public static readonly Format Hostname Field Value Type Description Format | Improve this Doc View Source IdnEmail Defines the idn-email format. Declaration public static readonly Format IdnEmail Field Value Type Description Format | Improve this Doc View Source IdnHostname Defines the idn-hostname format. Declaration public static readonly Format IdnHostname Field Value Type Description Format | Improve this Doc View Source Ipv4 Defines the ipv4 format. Declaration public static readonly Format Ipv4 Field Value Type Description Format | Improve this Doc View Source Ipv6 Defines the ipv6 format. Declaration public static readonly Format Ipv6 Field Value Type Description Format | Improve this Doc View Source Iri Defines the iri format. Declaration public static readonly Format Iri Field Value Type Description Format | Improve this Doc View Source IriReference Defines the iri-reference format. Declaration public static readonly Format IriReference Field Value Type Description Format | Improve this Doc View Source JsonPointer Defines the json-pointer format. Declaration public static readonly Format JsonPointer Field Value Type Description Format | Improve this Doc View Source Regex Defines the regex format. Declaration public static readonly Format Regex Field Value Type Description Format | Improve this Doc View Source RelativeJsonPointer Defines the relative-json-pointer format. Declaration public static readonly Format RelativeJsonPointer Field Value Type Description Format | Improve this Doc View Source Time Defines the time format. Declaration public static readonly Format Time Field Value Type Description Format | Improve this Doc View Source Unknown A placeholder for an unknown format. Declaration public static readonly Format Unknown Field Value Type Description Format | Improve this Doc View Source Uri Defines the uri format. Declaration public static readonly Format Uri Field Value Type Description Format | Improve this Doc View Source UriReference Defines the uri-reference format. Declaration public static readonly Format UriReference Field Value Type Description Format | Improve this Doc View Source UriTemplate Defines the uri-template format. Declaration public static readonly Format UriTemplate Field Value Type Description Format Remarks This is currently the same check as uri . The infrastructure to check URI templates does not yet exist in .Net Standard/Core . | Improve this Doc View Source Uuid Defines the uuid format. Declaration public static readonly Format Uuid Field Value Type Description Format Methods | Improve this Doc View Source Get(String) Gets a format by its key. Declaration public static Format Get(string key) Parameters Type Name Description System.String key The key. Returns Type Description Format The specified format, if known; otherwise null. | Improve this Doc View Source Register(Format) Registers a new format. Declaration public static void Register(Format format) Parameters Type Name Description Format format"
  },
  "api/Json.Schema.Generation.AttributeHandler.html": {
    "href": "api/Json.Schema.Generation.AttributeHandler.html",
    "title": "Class AttributeHandler",
    "keywords": "Class AttributeHandler Adds attribute-related schema elements. Inheritance System.Object AttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public static class AttributeHandler : object Methods | Improve this Doc View Source AddHandler(IAttributeHandler) Adds a handler for a custom attribute that cannot be made to implement IAttributeHandler . Declaration public static void AddHandler(IAttributeHandler handler) Parameters Type Name Description IAttributeHandler handler The handler. | Improve this Doc View Source AddHandler<T>() Adds a handler for a custom attribute that cannot be made to implement IAttributeHandler . Declaration public static void AddHandler<T>() where T : IAttributeHandler, new() Type Parameters Name Description T The handler type. | Improve this Doc View Source RemoveHandler<T>() Removes a handler type. Declaration public static void RemoveHandler<T>() where T : IAttributeHandler Type Parameters Name Description T The handler type."
  },
  "api/Json.Schema.Generation.ExclusiveMaximumAttribute.html": {
    "href": "api/Json.Schema.Generation.ExclusiveMaximumAttribute.html",
    "title": "Class ExclusiveMaximumAttribute",
    "keywords": "Class ExclusiveMaximumAttribute Applies an exclusiveMaximum keyword. Inheritance System.Object ExclusiveMaximumAttribute Implements IAttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class ExclusiveMaximumAttribute : Attribute, IAttributeHandler Constructors | Improve this Doc View Source ExclusiveMaximumAttribute(UInt32) Creates a new ExclusiveMaximumAttribute instance. Declaration public ExclusiveMaximumAttribute(uint value) Parameters Type Name Description System.UInt32 value The value. Properties | Improve this Doc View Source Value The exclusive maximum. Declaration public uint Value { get; } Property Value Type Description System.UInt32 Explicit Interface Implementations | Improve this Doc View Source IAttributeHandler.AddConstraints(SchemaGeneratorContext) Declaration void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context Implements IAttributeHandler Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.ExclusiveMinimumAttribute.html": {
    "href": "api/Json.Schema.Generation.ExclusiveMinimumAttribute.html",
    "title": "Class ExclusiveMinimumAttribute",
    "keywords": "Class ExclusiveMinimumAttribute Applies an exclusiveMinimum keyword. Inheritance System.Object ExclusiveMinimumAttribute Implements IAttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class ExclusiveMinimumAttribute : Attribute, IAttributeHandler Constructors | Improve this Doc View Source ExclusiveMinimumAttribute(UInt32) Creates a new ExclusiveMinimumAttribute instance. Declaration public ExclusiveMinimumAttribute(uint value) Parameters Type Name Description System.UInt32 value The value. Properties | Improve this Doc View Source Value The exclusive minimum. Declaration public uint Value { get; } Property Value Type Description System.UInt32 Explicit Interface Implementations | Improve this Doc View Source IAttributeHandler.AddConstraints(SchemaGeneratorContext) Declaration void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context Implements IAttributeHandler Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.GeneratorRegistry.html": {
    "href": "api/Json.Schema.Generation.GeneratorRegistry.html",
    "title": "Class GeneratorRegistry",
    "keywords": "Class GeneratorRegistry Tracks the available generators. Inheritance System.Object GeneratorRegistry Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public static class GeneratorRegistry : object Methods | Improve this Doc View Source Register(ISchemaGenerator) Registers a new generator. Declaration public static void Register(ISchemaGenerator generator) Parameters Type Name Description ISchemaGenerator generator The generator. Remarks Registration is order dependent: last one wins. If you have multiple generators which can handle a given type, the last one registered will be used."
  },
  "api/Json.Schema.Generation.Generators.html": {
    "href": "api/Json.Schema.Generation.Generators.html",
    "title": "Namespace Json.Schema.Generation.Generators",
    "keywords": "Namespace Json.Schema.Generation.Generators Interfaces ISchemaGenerator Defines a generator."
  },
  "api/Json.Schema.Generation.Generators.ISchemaGenerator.html": {
    "href": "api/Json.Schema.Generation.Generators.ISchemaGenerator.html",
    "title": "Interface ISchemaGenerator",
    "keywords": "Interface ISchemaGenerator Defines a generator. Namespace : Json.Schema.Generation.Generators Assembly : JsonSchema.Net.Generation.dll Syntax public interface ISchemaGenerator Remarks Generators are the first stage of schema generation. These will add keyword intents to the context, which then are translated into keywords after optimization. Implementations MUST also override Methods | Improve this Doc View Source AddConstraints(SchemaGeneratorContext) Processes the type and any attributes (present on the context), and adds intents to the context. Declaration void AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context The generation context. | Improve this Doc View Source Handles(Type) Determines whether the generator can be used to generate a schema for this type. Declaration bool Handles(Type type) Parameters Type Name Description Type type The type. Returns Type Description System.Boolean true if the generator can be used; false otherwise. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.html": {
    "href": "api/Json.Schema.Generation.html",
    "title": "Namespace Json.Schema.Generation",
    "keywords": "Namespace Json.Schema.Generation Classes AttributeHandler Adds attribute-related schema elements. ExclusiveMaximumAttribute Applies an exclusiveMaximum keyword. ExclusiveMinimumAttribute Applies an exclusiveMinimum keyword. GeneratorRegistry Tracks the available generators. JsonIncludeAttribute Indicates that the property or field should be included for serialization and deserialization. JsonNumberHandlingAttribute When placed on a type, property, or field, indicates what JsonNumberHandling settings should be used when serializing or deserializing numbers. JsonNumberHandlingAttributeHandler Handler for the JsonNumberHandlingAttribute . JsonSchemaBuilderExtensions Provides extension methods for schema generation. MaximumAttribute Applies a maximum keyword. MaxItemsAttribute Applies an maxItems keyword. MaxLengthAttribute Applies a maxLength keyword. MinimumAttribute Applies a minimum keyword. MinItemsAttribute Applies a minItems keyword. MinLengthAttribute Applies a minimum keyword. MultipleOfAttribute Applies a multipleOf keyword. NullableAttribute Overrides the Nullability option and either adds or removes null in the type keyword. PatternAttribute Applies a pattern keyword. PropertyNamingMethods Defines a set of predefined property naming methods. ReadOnlyAttribute Applies a readOnly keyword. RequiredAttribute Indicates a property is required and should be listed in the required keyword. SchemaGenerationContextCache Gets the contexts for the current run. SchemaGeneratorConfiguration Provides additional configuration for the generator. SchemaGeneratorContext Provides meta-data about the generation process. TypeExtensions Provides informative methods for types. UniqueItemsAttribute Applies a uniqueItems keyword. WriteOnlyAttribute Applies a writeOnly keyword. Interfaces IAttributeHandler Defines requirements to handle converting an attribute to a keyword intent. IContextContainer Indicates to the generation system that this object contains contexts. ISchemaKeywordIntent Describes the intent to create a keyword. ISchemaRefiner Describes a schema generation refiner. Enums JsonNumberHandling Determines how handles numbers when serializing and deserializing. Nullability Indicates whether to apply null to the type keyword. PropertyOrder Indicates the sequence in which properties will be listed in the schema. Delegates PropertyNamingMethod Declares a property naming method which is used to alter property names."
  },
  "api/Json.Schema.Generation.IAttributeHandler.html": {
    "href": "api/Json.Schema.Generation.IAttributeHandler.html",
    "title": "Interface IAttributeHandler",
    "keywords": "Interface IAttributeHandler Defines requirements to handle converting an attribute to a keyword intent. Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public interface IAttributeHandler Methods | Improve this Doc View Source AddConstraints(SchemaGeneratorContext) Processes the type and any attributes (present on the context), and adds intents to the context. Declaration void AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context The generation context. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.IContextContainer.html": {
    "href": "api/Json.Schema.Generation.IContextContainer.html",
    "title": "Interface IContextContainer",
    "keywords": "Interface IContextContainer Indicates to the generation system that this object contains contexts. Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public interface IContextContainer Remarks Implement this on your ISchemaKeywordIntent to indicate that it contains other contexts. Intents that need this are generally associated with applicator keywords, such as items and allOf . Methods | Improve this Doc View Source GetContexts() Gets the contexts. Declaration IEnumerable<SchemaGeneratorContext> GetContexts() Returns Type Description IEnumerable < SchemaGeneratorContext > The SchemaGeneratorContext s contained by this object. Remarks Only return the contexts contained directly by this object. Do not fetch the child contexts of those contexts. | Improve this Doc View Source Replace(Int32, SchemaGeneratorContext) Replaces one context with another. Declaration void Replace(int hashCode, SchemaGeneratorContext newContext) Parameters Type Name Description System.Int32 hashCode The hashcode of the context to replace. SchemaGeneratorContext newContext The new context. Remarks To implement this, call on the contained contexts. If any match, replace them with newContext . Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.AdditionalPropertiesIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.AdditionalPropertiesIntent.html",
    "title": "Class AdditionalPropertiesIntent",
    "keywords": "Class AdditionalPropertiesIntent Provides intent to create an additionalProperties keyword. Inheritance System.Object AdditionalPropertiesIntent Implements ISchemaKeywordIntent IContextContainer Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class AdditionalPropertiesIntent : object, ISchemaKeywordIntent, IContextContainer Constructors | Improve this Doc View Source AdditionalPropertiesIntent(SchemaGeneratorContext) Creates a new AdditionalPropertiesIntent instance. Declaration public AdditionalPropertiesIntent(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context The context. Properties | Improve this Doc View Source Context The context that represents the inner requirements. Declaration public SchemaGeneratorContext Context { get; } Property Value Type Description SchemaGeneratorContext Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetContexts() Gets the contexts. Declaration public IEnumerable<SchemaGeneratorContext> GetContexts() Returns Type Description IEnumerable < SchemaGeneratorContext > The SchemaGeneratorContext s contained by this object. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Replace(Int32, SchemaGeneratorContext) Replaces one context with another. Declaration public void Replace(int hashCode, SchemaGeneratorContext newContext) Parameters Type Name Description System.Int32 hashCode The hashcode of the context to replace. SchemaGeneratorContext newContext The new context. Implements ISchemaKeywordIntent IContextContainer Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.AnyOfIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.AnyOfIntent.html",
    "title": "Class AnyOfIntent",
    "keywords": "Class AnyOfIntent Provides intent to create a anyOf keyword. Inheritance System.Object AnyOfIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class AnyOfIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source AnyOfIntent(IEnumerable<IEnumerable<ISchemaKeywordIntent>>) Creates a new instance of the AnyOfIntent class. Declaration public AnyOfIntent(IEnumerable<IEnumerable<ISchemaKeywordIntent>> subschemas) Parameters Type Name Description IEnumerable < IEnumerable < ISchemaKeywordIntent >> subschemas The subschemas to include. | Improve this Doc View Source AnyOfIntent(IEnumerable<ISchemaKeywordIntent>[]) Creates a new instance of the AnyOfIntent class. Declaration public AnyOfIntent(params IEnumerable<ISchemaKeywordIntent>[] subschemas) Parameters Type Name Description IEnumerable < ISchemaKeywordIntent >[] subschemas The subschemas to include. Properties | Improve this Doc View Source Subschemas Gets the subschemas to include. Declaration public List<IEnumerable<ISchemaKeywordIntent>> Subschemas { get; } Property Value Type Description List < IEnumerable < ISchemaKeywordIntent >> Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.DefsIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.DefsIntent.html",
    "title": "Class DefsIntent",
    "keywords": "Class DefsIntent Provides intent to create a $defs keyword. Inheritance System.Object DefsIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class DefsIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source DefsIntent(Dictionary<String, SchemaGeneratorContext>) Creates a new DefsIntent instance. Declaration public DefsIntent(Dictionary<string, SchemaGeneratorContext> definitions) Parameters Type Name Description Dictionary < System.String , SchemaGeneratorContext > definitions The contexts. Properties | Improve this Doc View Source Definitions The contexts that represent the definitions. Declaration public Dictionary<string, SchemaGeneratorContext> Definitions { get; } Property Value Type Description Dictionary < System.String , SchemaGeneratorContext > Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.DeprecatedIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.DeprecatedIntent.html",
    "title": "Class DeprecatedIntent",
    "keywords": "Class DeprecatedIntent Provides intent to create a deprecated keyword. Inheritance System.Object DeprecatedIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class DeprecatedIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source DeprecatedIntent(Boolean) Creates a new DeprecatedIntent instance. Declaration public DeprecatedIntent(bool value) Parameters Type Name Description System.Boolean value The value. Properties | Improve this Doc View Source Value The value. Declaration public bool Value { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.EnumIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.EnumIntent.html",
    "title": "Class EnumIntent",
    "keywords": "Class EnumIntent Provides intent to create an enum keyword. Inheritance System.Object EnumIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class EnumIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source EnumIntent(IEnumerable<String>) Applies the keyword to the JsonSchemaBuilder . Declaration public EnumIntent(IEnumerable<string> names) Parameters Type Name Description IEnumerable < System.String > names The names defined by the enumeration. | Improve this Doc View Source EnumIntent(String[]) Applies the keyword to the JsonSchemaBuilder . Declaration public EnumIntent(params string[] names) Parameters Type Name Description System.String [] names The names defined by the enumeration. Properties | Improve this Doc View Source Names The names defined by the enumeration. Declaration public List<string> Names { get; set; } Property Value Type Description List < System.String > Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.ExclusiveMaximumIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.ExclusiveMaximumIntent.html",
    "title": "Class ExclusiveMaximumIntent",
    "keywords": "Class ExclusiveMaximumIntent Provides intent to create an exclusiveMaximum keyword. Inheritance System.Object ExclusiveMaximumIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class ExclusiveMaximumIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source ExclusiveMaximumIntent(Decimal) Creates a new ExclusiveMaximumIntent instance. Declaration public ExclusiveMaximumIntent(decimal value) Parameters Type Name Description System.Decimal value The value. Properties | Improve this Doc View Source Value The value. Declaration public decimal Value { get; set; } Property Value Type Description System.Decimal Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.ExclusiveMinimumIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.ExclusiveMinimumIntent.html",
    "title": "Class ExclusiveMinimumIntent",
    "keywords": "Class ExclusiveMinimumIntent Provides intent to create an exclusiveMinimum keyword. Inheritance System.Object ExclusiveMinimumIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class ExclusiveMinimumIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source ExclusiveMinimumIntent(Decimal) Creates a new ExclusiveMinimumIntent instance. Declaration public ExclusiveMinimumIntent(decimal value) Parameters Type Name Description System.Decimal value The value. Properties | Improve this Doc View Source Value The value. Declaration public decimal Value { get; set; } Property Value Type Description System.Decimal Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.FormatIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.FormatIntent.html",
    "title": "Class FormatIntent",
    "keywords": "Class FormatIntent Provides intent to create a format keyword. Inheritance System.Object FormatIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class FormatIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source FormatIntent(Format) Creates a new FormatIntent instance. Declaration public FormatIntent(Format format) Parameters Type Name Description Format format The format. Properties | Improve this Doc View Source Format The format. Declaration public Format Format { get; set; } Property Value Type Description Format Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.html": {
    "href": "api/Json.Schema.Generation.Intents.html",
    "title": "Namespace Json.Schema.Generation.Intents",
    "keywords": "Namespace Json.Schema.Generation.Intents Classes AdditionalPropertiesIntent Provides intent to create an additionalProperties keyword. AnyOfIntent Provides intent to create a anyOf keyword. DefsIntent Provides intent to create a $defs keyword. DeprecatedIntent Provides intent to create a deprecated keyword. EnumIntent Provides intent to create an enum keyword. ExclusiveMaximumIntent Provides intent to create an exclusiveMaximum keyword. ExclusiveMinimumIntent Provides intent to create an exclusiveMinimum keyword. FormatIntent Provides intent to create a format keyword. ItemsIntent Provides intent to create an items keyword. MaximumIntent Provides intent to create a maximum keyword. MaxItemsIntent Provides intent to create a maxItems keyword. MaxLengthIntent Provides intent to create a maxLength keyword. MinimumIntent Provides intent to create a minimum keyword. MinItemsIntent Provides intent to create a minItems keyword. MinLengthIntent Provides intent to create a minLength keyword. MultipleOfIntent Provides intent to create a multipleOf keyword. PatternIntent Provides intent to create a pattern keyword. PropertiesIntent Provides intent to create an additionalProperties keyword. PropertyNamesIntent Provides intent to create a propertyNames keyword. ReadOnlyIntent Provides intent to create a readOnly keyword. RefIntent Provides intent to create a $ref keyword. RequiredIntent Provides intent to create a required keyword. TypeIntent Provides intent to create a type keyword. UniqueItemsIntent Provides intent to create a uniqueItems keyword. WriteOnlyIntent Provides intent to create a writeOnly keyword."
  },
  "api/Json.Schema.Generation.Intents.ItemsIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.ItemsIntent.html",
    "title": "Class ItemsIntent",
    "keywords": "Class ItemsIntent Provides intent to create an items keyword. Inheritance System.Object ItemsIntent Implements ISchemaKeywordIntent IContextContainer Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class ItemsIntent : object, ISchemaKeywordIntent, IContextContainer Constructors | Improve this Doc View Source ItemsIntent(SchemaGeneratorContext) Creates a new ItemsIntent instance. Declaration public ItemsIntent(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context The context. Properties | Improve this Doc View Source Context The context that represents the inner requirements. Declaration public SchemaGeneratorContext Context { get; } Property Value Type Description SchemaGeneratorContext Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetContexts() Gets the contexts. Declaration public IEnumerable<SchemaGeneratorContext> GetContexts() Returns Type Description IEnumerable < SchemaGeneratorContext > The SchemaGeneratorContext s contained by this object. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Replace(Int32, SchemaGeneratorContext) Replaces one context with another. Declaration public void Replace(int hashCode, SchemaGeneratorContext newContext) Parameters Type Name Description System.Int32 hashCode The hashcode of the context to replace. SchemaGeneratorContext newContext The new context. Implements ISchemaKeywordIntent IContextContainer Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.MaximumIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.MaximumIntent.html",
    "title": "Class MaximumIntent",
    "keywords": "Class MaximumIntent Provides intent to create a maximum keyword. Inheritance System.Object MaximumIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class MaximumIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source MaximumIntent(Decimal) Creates a new MaximumIntent instance. Declaration public MaximumIntent(decimal value) Parameters Type Name Description System.Decimal value The value. Properties | Improve this Doc View Source Value The value. Declaration public decimal Value { get; set; } Property Value Type Description System.Decimal Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.MaxItemsIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.MaxItemsIntent.html",
    "title": "Class MaxItemsIntent",
    "keywords": "Class MaxItemsIntent Provides intent to create a maxItems keyword. Inheritance System.Object MaxItemsIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class MaxItemsIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source MaxItemsIntent(UInt32) Creates a new MaxItemsIntent instance. Declaration public MaxItemsIntent(uint value) Parameters Type Name Description System.UInt32 value The value. Properties | Improve this Doc View Source Value The value. Declaration public uint Value { get; set; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.MaxLengthIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.MaxLengthIntent.html",
    "title": "Class MaxLengthIntent",
    "keywords": "Class MaxLengthIntent Provides intent to create a maxLength keyword. Inheritance System.Object MaxLengthIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class MaxLengthIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source MaxLengthIntent(UInt32) Creates a new MaxLengthIntent instance. Declaration public MaxLengthIntent(uint value) Parameters Type Name Description System.UInt32 value The value. Properties | Improve this Doc View Source Value The value. Declaration public uint Value { get; set; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.MinimumIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.MinimumIntent.html",
    "title": "Class MinimumIntent",
    "keywords": "Class MinimumIntent Provides intent to create a minimum keyword. Inheritance System.Object MinimumIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class MinimumIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source MinimumIntent(Decimal) Creates a new MinimumIntent instance. Declaration public MinimumIntent(decimal value) Parameters Type Name Description System.Decimal value The value. Properties | Improve this Doc View Source Value The value. Declaration public decimal Value { get; set; } Property Value Type Description System.Decimal Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.MinItemsIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.MinItemsIntent.html",
    "title": "Class MinItemsIntent",
    "keywords": "Class MinItemsIntent Provides intent to create a minItems keyword. Inheritance System.Object MinItemsIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class MinItemsIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source MinItemsIntent(UInt32) Creates a new MinItemsIntent instance. Declaration public MinItemsIntent(uint value) Parameters Type Name Description System.UInt32 value The value. Properties | Improve this Doc View Source Value The value. Declaration public uint Value { get; set; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.MinLengthIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.MinLengthIntent.html",
    "title": "Class MinLengthIntent",
    "keywords": "Class MinLengthIntent Provides intent to create a minLength keyword. Inheritance System.Object MinLengthIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class MinLengthIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source MinLengthIntent(UInt32) Creates a new MinLengthIntent instance. Declaration public MinLengthIntent(uint value) Parameters Type Name Description System.UInt32 value The value. Properties | Improve this Doc View Source Value The value. Declaration public uint Value { get; set; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.MultipleOfIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.MultipleOfIntent.html",
    "title": "Class MultipleOfIntent",
    "keywords": "Class MultipleOfIntent Provides intent to create a multipleOf keyword. Inheritance System.Object MultipleOfIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class MultipleOfIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source MultipleOfIntent(Decimal) Creates a new MultipleOfIntent instance. Declaration public MultipleOfIntent(decimal value) Parameters Type Name Description System.Decimal value The value. Properties | Improve this Doc View Source Value The value. Declaration public decimal Value { get; set; } Property Value Type Description System.Decimal Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.PatternIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.PatternIntent.html",
    "title": "Class PatternIntent",
    "keywords": "Class PatternIntent Provides intent to create a pattern keyword. Inheritance System.Object PatternIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class PatternIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source PatternIntent(String) Creates a new PatternIntent instance. Declaration public PatternIntent(string value) Parameters Type Name Description System.String value The value. Properties | Improve this Doc View Source Value The value. Declaration public string Value { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.PropertiesIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.PropertiesIntent.html",
    "title": "Class PropertiesIntent",
    "keywords": "Class PropertiesIntent Provides intent to create an additionalProperties keyword. Inheritance System.Object PropertiesIntent Implements ISchemaKeywordIntent IContextContainer Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class PropertiesIntent : object, ISchemaKeywordIntent, IContextContainer Constructors | Improve this Doc View Source PropertiesIntent(Dictionary<String, SchemaGeneratorContext>) Creates a new PropertiesIntent instance. Declaration public PropertiesIntent(Dictionary<string, SchemaGeneratorContext> properties) Parameters Type Name Description Dictionary < System.String , SchemaGeneratorContext > properties The contexts. Properties | Improve this Doc View Source Properties The contexts that represent the properties. Declaration public Dictionary<string, SchemaGeneratorContext> Properties { get; } Property Value Type Description Dictionary < System.String , SchemaGeneratorContext > Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetContexts() Gets the contexts. Declaration public IEnumerable<SchemaGeneratorContext> GetContexts() Returns Type Description IEnumerable < SchemaGeneratorContext > The SchemaGeneratorContext s contained by this object. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Replace(Int32, SchemaGeneratorContext) Replaces one context with another. Declaration public void Replace(int hashCode, SchemaGeneratorContext newContext) Parameters Type Name Description System.Int32 hashCode The hashcode of the context to replace. SchemaGeneratorContext newContext The new context. Implements ISchemaKeywordIntent IContextContainer Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.PropertyNamesIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.PropertyNamesIntent.html",
    "title": "Class PropertyNamesIntent",
    "keywords": "Class PropertyNamesIntent Provides intent to create a propertyNames keyword. Inheritance System.Object PropertyNamesIntent Implements ISchemaKeywordIntent IContextContainer Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class PropertyNamesIntent : object, ISchemaKeywordIntent, IContextContainer Constructors | Improve this Doc View Source PropertyNamesIntent(SchemaGeneratorContext) Creates a new PropertyNamesIntent instance. Declaration public PropertyNamesIntent(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context The context. Properties | Improve this Doc View Source Context The context that represents the inner requirements. Declaration public SchemaGeneratorContext Context { get; } Property Value Type Description SchemaGeneratorContext Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetContexts() Gets the contexts. Declaration public IEnumerable<SchemaGeneratorContext> GetContexts() Returns Type Description IEnumerable < SchemaGeneratorContext > The SchemaGeneratorContext s contained by this object. Remarks Only return the contexts contained directly by this object. Do not fetch the child contexts of those contexts. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Replace(Int32, SchemaGeneratorContext) Replaces one context with another. Declaration public void Replace(int hashCode, SchemaGeneratorContext newContext) Parameters Type Name Description System.Int32 hashCode The hashcode of the context to replace. SchemaGeneratorContext newContext The new context. Remarks To implement this, call on the contained contexts. If any match, replace them with newContext . Implements ISchemaKeywordIntent IContextContainer Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.ReadOnlyIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.ReadOnlyIntent.html",
    "title": "Class ReadOnlyIntent",
    "keywords": "Class ReadOnlyIntent Provides intent to create a readOnly keyword. Inheritance System.Object ReadOnlyIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class ReadOnlyIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source ReadOnlyIntent(Boolean) Creates a new ReadOnlyIntent instance. Declaration public ReadOnlyIntent(bool value) Parameters Type Name Description System.Boolean value The value. Properties | Improve this Doc View Source Value The value. Declaration public bool Value { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.RefIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.RefIntent.html",
    "title": "Class RefIntent",
    "keywords": "Class RefIntent Provides intent to create a $ref keyword. Inheritance System.Object RefIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class RefIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source RefIntent(Uri) Creates a new RefIntent instance. Declaration public RefIntent(Uri reference) Parameters Type Name Description Uri reference The reference. Properties | Improve this Doc View Source Reference The reference. Declaration public Uri Reference { get; set; } Property Value Type Description Uri Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.RequiredIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.RequiredIntent.html",
    "title": "Class RequiredIntent",
    "keywords": "Class RequiredIntent Provides intent to create a required keyword. Inheritance System.Object RequiredIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class RequiredIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source RequiredIntent(List<String>) Creates a new RequiredIntent instance. Declaration public RequiredIntent(List<string> requiredProperties) Parameters Type Name Description List < System.String > requiredProperties The required property names. Properties | Improve this Doc View Source RequiredProperties The required property names. Declaration public List<string> RequiredProperties { get; } Property Value Type Description List < System.String > Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.TypeIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.TypeIntent.html",
    "title": "Class TypeIntent",
    "keywords": "Class TypeIntent Provides intent to create a type keyword. Inheritance System.Object TypeIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class TypeIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source TypeIntent(SchemaValueType) Creates a new TypeIntent instance. Declaration public TypeIntent(SchemaValueType type) Parameters Type Name Description SchemaValueType type The type. Properties | Improve this Doc View Source Type The type. Declaration public SchemaValueType Type { get; set; } Property Value Type Description SchemaValueType Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.UniqueItemsIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.UniqueItemsIntent.html",
    "title": "Class UniqueItemsIntent",
    "keywords": "Class UniqueItemsIntent Provides intent to create a uniqueItems keyword. Inheritance System.Object UniqueItemsIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class UniqueItemsIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source UniqueItemsIntent(Boolean) Creates a new UniqueItemsIntent instance. Declaration public UniqueItemsIntent(bool value) Parameters Type Name Description System.Boolean value The value. Properties | Improve this Doc View Source Value The value. Declaration public bool Value { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Intents.WriteOnlyIntent.html": {
    "href": "api/Json.Schema.Generation.Intents.WriteOnlyIntent.html",
    "title": "Class WriteOnlyIntent",
    "keywords": "Class WriteOnlyIntent Provides intent to create a writeOnly keyword. Inheritance System.Object WriteOnlyIntent Implements ISchemaKeywordIntent Namespace : Json.Schema.Generation.Intents Assembly : JsonSchema.Net.Generation.dll Syntax public class WriteOnlyIntent : object, ISchemaKeywordIntent Constructors | Improve this Doc View Source WriteOnlyIntent(Boolean) Creates a new WriteOnlyIntent instance. Declaration public WriteOnlyIntent(bool value) Parameters Type Name Description System.Boolean value The value. Properties | Improve this Doc View Source Value The value. Declaration public bool Value { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Implements ISchemaKeywordIntent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.ISchemaKeywordIntent.html": {
    "href": "api/Json.Schema.Generation.ISchemaKeywordIntent.html",
    "title": "Interface ISchemaKeywordIntent",
    "keywords": "Interface ISchemaKeywordIntent Describes the intent to create a keyword. Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public interface ISchemaKeywordIntent Remarks Because JsonSchema is immutable, the system cannot generate the schema directly as it needs to do some optimization first. Keyword intents allow this. They record all of the data needed by the keyword. Application involves translating the intent into an actual keyword on the JsonSchemaBuilder using one of the fluent extension methods provided by JsonSchemaBuilderExtensions . Custom intents will need to be applied from within custom ISchemaGenerator implementations. Implementations MUST also override Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration void Apply(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder The builder. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.ISchemaRefiner.html": {
    "href": "api/Json.Schema.Generation.ISchemaRefiner.html",
    "title": "Interface ISchemaRefiner",
    "keywords": "Interface ISchemaRefiner Describes a schema generation refiner. Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public interface ISchemaRefiner Remarks Refiners run after attributes have been processed, before the schema itself is created. This is used to add customization logic. Methods | Improve this Doc View Source Run(SchemaGeneratorContext) Runs the refiner. Declaration void Run(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context | Improve this Doc View Source ShouldRun(SchemaGeneratorContext) Determines if the refiner should run. Declaration bool ShouldRun(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context Returns Type Description System.Boolean Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.JsonIncludeAttribute.html": {
    "href": "api/Json.Schema.Generation.JsonIncludeAttribute.html",
    "title": "Class JsonIncludeAttribute",
    "keywords": "Class JsonIncludeAttribute Indicates that the property or field should be included for serialization and deserialization. Inheritance System.Object JsonIncludeAttribute Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public sealed class JsonIncludeAttribute : JsonAttribute Remarks When applied to a public property, indicates that non-public getters and setters should be used for serialization and deserialization. Non-public properties and fields are not allowed when serializing and deserializing. If the attribute is used on a non-public property or field, an is thrown during the first serialization or deserialization of the declaring type. Constructors | Improve this Doc View Source JsonIncludeAttribute() Initializes a new instance of JsonIncludeAttribute . Declaration public JsonIncludeAttribute() Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.JsonNumberHandling.html": {
    "href": "api/Json.Schema.Generation.JsonNumberHandling.html",
    "title": "Enum JsonNumberHandling",
    "keywords": "Enum JsonNumberHandling Determines how handles numbers when serializing and deserializing. Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public enum JsonNumberHandling : int Fields Name Description AllowNamedFloatingPointLiterals The \"NaN\", \"Infinity\", and \"-Infinity\" tokens can be read as floating-point constants, and the and values for these constants will be written as their corresponding JSON string representations. AllowReadingFromString Numbers can be read from tokens. Does not prevent numbers from being read from token. Strict Numbers will only be read from tokens and will only be written as JSON numbers (without quotes). WriteAsString Numbers will be written as JSON strings (with quotes), not as JSON numbers. Extension Methods JsonDocumentExtensions.ToJsonDocument<JsonNumberHandling>(Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.JsonNumberHandlingAttribute.html": {
    "href": "api/Json.Schema.Generation.JsonNumberHandlingAttribute.html",
    "title": "Class JsonNumberHandlingAttribute",
    "keywords": "Class JsonNumberHandlingAttribute When placed on a type, property, or field, indicates what JsonNumberHandling settings should be used when serializing or deserializing numbers. Inheritance System.Object JsonNumberHandlingAttribute Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public sealed class JsonNumberHandlingAttribute : JsonAttribute Constructors | Improve this Doc View Source JsonNumberHandlingAttribute(JsonNumberHandling) Initializes a new instance of JsonNumberHandlingAttribute . Declaration public JsonNumberHandlingAttribute(JsonNumberHandling handling) Parameters Type Name Description JsonNumberHandling handling Properties | Improve this Doc View Source Handling Indicates what settings should be used when serializing or deserializing numbers. Declaration public JsonNumberHandling Handling { get; } Property Value Type Description JsonNumberHandling Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.JsonNumberHandlingAttributeHandler.html": {
    "href": "api/Json.Schema.Generation.JsonNumberHandlingAttributeHandler.html",
    "title": "Class JsonNumberHandlingAttributeHandler",
    "keywords": "Class JsonNumberHandlingAttributeHandler Handler for the JsonNumberHandlingAttribute . Inheritance System.Object JsonNumberHandlingAttributeHandler Implements IAttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class JsonNumberHandlingAttributeHandler : object, IAttributeHandler Methods | Improve this Doc View Source AddConstraints(SchemaGeneratorContext) Processes the type and any attributes (present on the context), and adds intents to the context. Declaration public void AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context The generation context. Implements IAttributeHandler Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.JsonSchemaBuilderExtensions.html": {
    "href": "api/Json.Schema.Generation.JsonSchemaBuilderExtensions.html",
    "title": "Class JsonSchemaBuilderExtensions",
    "keywords": "Class JsonSchemaBuilderExtensions Provides extension methods for schema generation. Inheritance System.Object JsonSchemaBuilderExtensions Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public static class JsonSchemaBuilderExtensions : object Methods | Improve this Doc View Source FromType(JsonSchemaBuilder, Type, SchemaGeneratorConfiguration) Generates a schema from a CLR type. Declaration public static JsonSchemaBuilder FromType(this JsonSchemaBuilder builder, Type type, SchemaGeneratorConfiguration configuration = null) Parameters Type Name Description JsonSchemaBuilder builder The schema builder. Type type The type to generate. SchemaGeneratorConfiguration configuration The generator configuration. Returns Type Description JsonSchemaBuilder The schema builder (for fluent syntax support). | Improve this Doc View Source FromType<T>(JsonSchemaBuilder, SchemaGeneratorConfiguration) Generates a schema from a CLR type. Declaration public static JsonSchemaBuilder FromType<T>(this JsonSchemaBuilder builder, SchemaGeneratorConfiguration configuration = null) Parameters Type Name Description JsonSchemaBuilder builder The schema builder. SchemaGeneratorConfiguration configuration The generator configuration. Returns Type Description JsonSchemaBuilder The schema builder (for fluent syntax support). Type Parameters Name Description T The type to generate."
  },
  "api/Json.Schema.Generation.MaximumAttribute.html": {
    "href": "api/Json.Schema.Generation.MaximumAttribute.html",
    "title": "Class MaximumAttribute",
    "keywords": "Class MaximumAttribute Applies a maximum keyword. Inheritance System.Object MaximumAttribute Implements IAttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class MaximumAttribute : Attribute, IAttributeHandler Constructors | Improve this Doc View Source MaximumAttribute(UInt32) Creates a new MaximumAttribute instance. Declaration public MaximumAttribute(uint value) Parameters Type Name Description System.UInt32 value The value. Properties | Improve this Doc View Source Value The maximum. Declaration public uint Value { get; } Property Value Type Description System.UInt32 Explicit Interface Implementations | Improve this Doc View Source IAttributeHandler.AddConstraints(SchemaGeneratorContext) Declaration void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context Implements IAttributeHandler Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.MaxItemsAttribute.html": {
    "href": "api/Json.Schema.Generation.MaxItemsAttribute.html",
    "title": "Class MaxItemsAttribute",
    "keywords": "Class MaxItemsAttribute Applies an maxItems keyword. Inheritance System.Object MaxItemsAttribute Implements IAttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class MaxItemsAttribute : Attribute, IAttributeHandler Constructors | Improve this Doc View Source MaxItemsAttribute(UInt32) Creates a new MaxItemsAttribute instance. Declaration public MaxItemsAttribute(uint value) Parameters Type Name Description System.UInt32 value The value. Properties | Improve this Doc View Source Value The maximum number of items. Declaration public uint Value { get; } Property Value Type Description System.UInt32 Explicit Interface Implementations | Improve this Doc View Source IAttributeHandler.AddConstraints(SchemaGeneratorContext) Declaration void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context Implements IAttributeHandler Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.MaxLengthAttribute.html": {
    "href": "api/Json.Schema.Generation.MaxLengthAttribute.html",
    "title": "Class MaxLengthAttribute",
    "keywords": "Class MaxLengthAttribute Applies a maxLength keyword. Inheritance System.Object MaxLengthAttribute Implements IAttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class MaxLengthAttribute : Attribute, IAttributeHandler Constructors | Improve this Doc View Source MaxLengthAttribute(UInt32) Creates a new MaxLengthAttribute instance. Declaration public MaxLengthAttribute(uint length) Parameters Type Name Description System.UInt32 length The value. Properties | Improve this Doc View Source Length The maximum length. Declaration public uint Length { get; } Property Value Type Description System.UInt32 Explicit Interface Implementations | Improve this Doc View Source IAttributeHandler.AddConstraints(SchemaGeneratorContext) Declaration void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context Implements IAttributeHandler Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.MinimumAttribute.html": {
    "href": "api/Json.Schema.Generation.MinimumAttribute.html",
    "title": "Class MinimumAttribute",
    "keywords": "Class MinimumAttribute Applies a minimum keyword. Inheritance System.Object MinimumAttribute Implements IAttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class MinimumAttribute : Attribute, IAttributeHandler Constructors | Improve this Doc View Source MinimumAttribute(UInt32) Creates a new MinimumAttribute instance. Declaration public MinimumAttribute(uint value) Parameters Type Name Description System.UInt32 value The value. Properties | Improve this Doc View Source Value The minimum. Declaration public uint Value { get; } Property Value Type Description System.UInt32 Explicit Interface Implementations | Improve this Doc View Source IAttributeHandler.AddConstraints(SchemaGeneratorContext) Declaration void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context Implements IAttributeHandler Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.MinItemsAttribute.html": {
    "href": "api/Json.Schema.Generation.MinItemsAttribute.html",
    "title": "Class MinItemsAttribute",
    "keywords": "Class MinItemsAttribute Applies a minItems keyword. Inheritance System.Object MinItemsAttribute Implements IAttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class MinItemsAttribute : Attribute, IAttributeHandler Constructors | Improve this Doc View Source MinItemsAttribute(UInt32) Creates a new MinItemsAttribute instance. Declaration public MinItemsAttribute(uint value) Parameters Type Name Description System.UInt32 value The value. Properties | Improve this Doc View Source Value The minimum number of items. Declaration public uint Value { get; } Property Value Type Description System.UInt32 Explicit Interface Implementations | Improve this Doc View Source IAttributeHandler.AddConstraints(SchemaGeneratorContext) Declaration void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context Implements IAttributeHandler Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.MinLengthAttribute.html": {
    "href": "api/Json.Schema.Generation.MinLengthAttribute.html",
    "title": "Class MinLengthAttribute",
    "keywords": "Class MinLengthAttribute Applies a minimum keyword. Inheritance System.Object MinLengthAttribute Implements IAttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class MinLengthAttribute : Attribute, IAttributeHandler Constructors | Improve this Doc View Source MinLengthAttribute(UInt32) Creates a new MinLengthAttribute instance. Declaration public MinLengthAttribute(uint length) Parameters Type Name Description System.UInt32 length The value. Properties | Improve this Doc View Source Length The minimum length. Declaration public uint Length { get; } Property Value Type Description System.UInt32 Explicit Interface Implementations | Improve this Doc View Source IAttributeHandler.AddConstraints(SchemaGeneratorContext) Declaration void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context Implements IAttributeHandler Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.MultipleOfAttribute.html": {
    "href": "api/Json.Schema.Generation.MultipleOfAttribute.html",
    "title": "Class MultipleOfAttribute",
    "keywords": "Class MultipleOfAttribute Applies a multipleOf keyword. Inheritance System.Object MultipleOfAttribute Implements IAttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class MultipleOfAttribute : Attribute, IAttributeHandler Constructors | Improve this Doc View Source MultipleOfAttribute(Double) Creates a new MultipleOfAttribute instance. Declaration public MultipleOfAttribute(double value) Parameters Type Name Description System.Double value The value. Properties | Improve this Doc View Source Value The divisor. Declaration public decimal Value { get; } Property Value Type Description System.Decimal Explicit Interface Implementations | Improve this Doc View Source IAttributeHandler.AddConstraints(SchemaGeneratorContext) Declaration void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context Implements IAttributeHandler Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.Nullability.html": {
    "href": "api/Json.Schema.Generation.Nullability.html",
    "title": "Enum Nullability",
    "keywords": "Enum Nullability Indicates whether to apply null to the type keyword. Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public enum Nullability : int Fields Name Description AllowForAllTypes Indicates that null will be applied to both reference types and types. AllowForNullableValueTypes Indicates that null will be applied to types. AllowForReferenceTypes Indicates that null will be applied to reference types. Disabled Indicates that null will not be included. Extension Methods JsonDocumentExtensions.ToJsonDocument<Nullability>(Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.NullableAttribute.html": {
    "href": "api/Json.Schema.Generation.NullableAttribute.html",
    "title": "Class NullableAttribute",
    "keywords": "Class NullableAttribute Overrides the Nullability option and either adds or removes null in the type keyword. Inheritance System.Object NullableAttribute Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class NullableAttribute : Attribute Constructors | Improve this Doc View Source NullableAttribute(Boolean) Creates a new NullableAttribute instance. Declaration public NullableAttribute(bool isNullable) Parameters Type Name Description System.Boolean isNullable Whether null should be included in the type keyword. Properties | Improve this Doc View Source IsNullable Gets whether null should be included in the type keyword. Declaration public bool IsNullable { get; } Property Value Type Description System.Boolean Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.PatternAttribute.html": {
    "href": "api/Json.Schema.Generation.PatternAttribute.html",
    "title": "Class PatternAttribute",
    "keywords": "Class PatternAttribute Applies a pattern keyword. Inheritance System.Object PatternAttribute Implements IAttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class PatternAttribute : Attribute, IAttributeHandler Constructors | Improve this Doc View Source PatternAttribute(String) Creates a new PatternAttribute instance. Declaration public PatternAttribute(string value) Parameters Type Name Description System.String value The value. Properties | Improve this Doc View Source Value The regular expression pattern. Declaration public string Value { get; } Property Value Type Description System.String Explicit Interface Implementations | Improve this Doc View Source IAttributeHandler.AddConstraints(SchemaGeneratorContext) Declaration void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context Implements IAttributeHandler Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.PropertyNamingMethod.html": {
    "href": "api/Json.Schema.Generation.PropertyNamingMethod.html",
    "title": "Delegate PropertyNamingMethod",
    "keywords": "Delegate PropertyNamingMethod Declares a property naming method which is used to alter property names. Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public delegate string PropertyNamingMethod(string input); Parameters Type Name Description System.String input The property name. Returns Type Description System.String The altered property name. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.PropertyNamingMethods.html": {
    "href": "api/Json.Schema.Generation.PropertyNamingMethods.html",
    "title": "Class PropertyNamingMethods",
    "keywords": "Class PropertyNamingMethods Defines a set of predefined property naming methods. Inheritance System.Object PropertyNamingMethods Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public static class PropertyNamingMethods : object Fields | Improve this Doc View Source AsDeclared Makes no changes. Properties are generated as they are declared in code. Declaration public static readonly PropertyNamingMethod AsDeclared Field Value Type Description PropertyNamingMethod | Improve this Doc View Source CamelCase Updates property names to camel case (e.g. camelCase ). Declaration public static readonly PropertyNamingMethod CamelCase Field Value Type Description PropertyNamingMethod | Improve this Doc View Source KebabCase Updates property names to kebab case (e.g. Kebab-Case ). Declaration public static readonly PropertyNamingMethod KebabCase Field Value Type Description PropertyNamingMethod | Improve this Doc View Source LowerSnakeCase Updates property names to lower snake case (e.g. lower_snake_case ). Declaration public static readonly PropertyNamingMethod LowerSnakeCase Field Value Type Description PropertyNamingMethod | Improve this Doc View Source PascalCase Updates property names to pascal case (e.g. PascalCase ). Declaration public static readonly PropertyNamingMethod PascalCase Field Value Type Description PropertyNamingMethod | Improve this Doc View Source SnakeCase Updates property names to snake case (e.g. Snake_Case ). Declaration public static readonly PropertyNamingMethod SnakeCase Field Value Type Description PropertyNamingMethod | Improve this Doc View Source UpperKebabCase Updates property names to lower kebab case (e.g. UPPER-KEBAB-CASE ). Declaration public static readonly PropertyNamingMethod UpperKebabCase Field Value Type Description PropertyNamingMethod | Improve this Doc View Source UpperSnakeCase Updates property names to upper snake case (e.g. UPPER_SNAKE_CASE ). Declaration public static readonly PropertyNamingMethod UpperSnakeCase Field Value Type Description PropertyNamingMethod"
  },
  "api/Json.Schema.Generation.PropertyOrder.html": {
    "href": "api/Json.Schema.Generation.PropertyOrder.html",
    "title": "Enum PropertyOrder",
    "keywords": "Enum PropertyOrder Indicates the sequence in which properties will be listed in the schema. Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public enum PropertyOrder : int Fields Name Description AsDeclared Properties will be listed in the order they're declared in code. ByName Properties will be sorted by name, case-insensitive. Extension Methods JsonDocumentExtensions.ToJsonDocument<PropertyOrder>(Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.ReadOnlyAttribute.html": {
    "href": "api/Json.Schema.Generation.ReadOnlyAttribute.html",
    "title": "Class ReadOnlyAttribute",
    "keywords": "Class ReadOnlyAttribute Applies a readOnly keyword. Inheritance System.Object ReadOnlyAttribute Implements IAttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class ReadOnlyAttribute : Attribute, IAttributeHandler Constructors | Improve this Doc View Source ReadOnlyAttribute() Creates a new ReadOnlyAttribute instance with a value of true . Declaration public ReadOnlyAttribute() | Improve this Doc View Source ReadOnlyAttribute(Boolean) Creates a new ReadOnlyAttribute instance. Declaration public ReadOnlyAttribute(bool value) Parameters Type Name Description System.Boolean value The value. Properties | Improve this Doc View Source Value Whether the property should be read-only. Declaration public bool Value { get; } Property Value Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IAttributeHandler.AddConstraints(SchemaGeneratorContext) Declaration void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context Implements IAttributeHandler Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.RequiredAttribute.html": {
    "href": "api/Json.Schema.Generation.RequiredAttribute.html",
    "title": "Class RequiredAttribute",
    "keywords": "Class RequiredAttribute Indicates a property is required and should be listed in the required keyword. Inheritance System.Object RequiredAttribute Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class RequiredAttribute : Attribute Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.SchemaGenerationContextCache.html": {
    "href": "api/Json.Schema.Generation.SchemaGenerationContextCache.html",
    "title": "Class SchemaGenerationContextCache",
    "keywords": "Class SchemaGenerationContextCache Gets the contexts for the current run. Inheritance System.Object SchemaGenerationContextCache Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public static class SchemaGenerationContextCache : object Methods | Improve this Doc View Source Get(Type, Nullable<List<Attribute>>) (Obsolete) Gets or creates a SchemaGeneratorContext based on the given type and attribute set. Declaration public static SchemaGeneratorContext Get(Type type, List<Attribute>? attributes) Parameters Type Name Description Type type The type to generate. System.Nullable < List < Attribute >> attributes The attribute set on the property. Returns Type Description SchemaGeneratorContext A generation context, from the cache if one exists with the specified type and attribute set; otherwise a new one. New contexts are automatically cached. Remarks Use this in your generator if it needs to create keywords with subschemas. | Improve this Doc View Source Get(Type, Nullable<List<Attribute>>, SchemaGeneratorConfiguration) Gets or creates a SchemaGeneratorContext based on the given type and attribute set. Declaration public static SchemaGeneratorContext Get(Type type, List<Attribute>? attributes, SchemaGeneratorConfiguration configuration) Parameters Type Name Description Type type The type to generate. System.Nullable < List < Attribute >> attributes The attribute set on the property. SchemaGeneratorConfiguration configuration The generator configuration. Returns Type Description SchemaGeneratorContext A generation context, from the cache if one exists with the specified type and attribute set; otherwise a new one. New contexts are automatically cached. Remarks Use this in your generator if it needs to create keywords with subschemas."
  },
  "api/Json.Schema.Generation.SchemaGeneratorConfiguration.html": {
    "href": "api/Json.Schema.Generation.SchemaGeneratorConfiguration.html",
    "title": "Class SchemaGeneratorConfiguration",
    "keywords": "Class SchemaGeneratorConfiguration Provides additional configuration for the generator. Inheritance System.Object SchemaGeneratorConfiguration Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class SchemaGeneratorConfiguration : object Properties | Improve this Doc View Source Generators A collection of generators in addition to the global set. Declaration public List<ISchemaGenerator> Generators { get; set; } Property Value Type Description List < ISchemaGenerator > | Improve this Doc View Source Nullability Gets or sets whether to include null in the type keyword. Default is Disabled which means that it will not ever be included. Declaration public Nullability Nullability { get; set; } Property Value Type Description Nullability | Improve this Doc View Source PropertyNamingMethod Gets or sets the property naming method. Default is . Declaration public PropertyNamingMethod PropertyNamingMethod { get; set; } Property Value Type Description PropertyNamingMethod Remarks This can be replaced with any Func&lt;string, string> . | Improve this Doc View Source PropertyOrder Gets or sets the order in which properties will be listed in the schema. Declaration public PropertyOrder PropertyOrder { get; set; } Property Value Type Description PropertyOrder | Improve this Doc View Source Refiners A collection of refiners. Declaration public List<ISchemaRefiner> Refiners { get; set; } Property Value Type Description List < ISchemaRefiner > Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.SchemaGeneratorContext.html": {
    "href": "api/Json.Schema.Generation.SchemaGeneratorContext.html",
    "title": "Class SchemaGeneratorContext",
    "keywords": "Class SchemaGeneratorContext Provides meta-data about the generation process. Inheritance System.Object SchemaGeneratorContext Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class SchemaGeneratorContext : object Properties | Improve this Doc View Source Attributes The set of attributes. Will be populated when an attribute has a property. Declaration public List<Attribute> Attributes { get; } Property Value Type Description List < Attribute > | Improve this Doc View Source Configuration The generator configuration. Declaration public SchemaGeneratorConfiguration Configuration { get; } Property Value Type Description SchemaGeneratorConfiguration | Improve this Doc View Source Intents The current set of keyword intents. Declaration public List<ISchemaKeywordIntent> Intents { get; } Property Value Type Description List < ISchemaKeywordIntent > | Improve this Doc View Source Type The CLR type currently being processed. Declaration public Type Type { get; } Property Value Type Description Type Methods | Improve this Doc View Source Apply(JsonSchemaBuilder) Applies the keyword to the JsonSchemaBuilder . Declaration public JsonSchemaBuilder Apply(JsonSchemaBuilder builder = null) Parameters Type Name Description JsonSchemaBuilder builder The schema builder. Returns Type Description JsonSchemaBuilder The schema builder (for fluent syntax support). | Improve this Doc View Source Equals(Nullable<Object>) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description System.Nullable < System.Object > obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.TypeExtensions.html": {
    "href": "api/Json.Schema.Generation.TypeExtensions.html",
    "title": "Class TypeExtensions",
    "keywords": "Class TypeExtensions Provides informative methods for types. Inheritance System.Object TypeExtensions Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public static class TypeExtensions : object Methods | Improve this Doc View Source IsArray(Type) Determines whether the type is a simple, one-dimensional, non-keyed collection. Declaration public static bool IsArray(this Type type) Parameters Type Name Description Type type The type. Returns Type Description System.Boolean true if the type represents an array; false otherwise. | Improve this Doc View Source IsFloatingPoint(Type) Determines whether the type is a non-integer floating point number. Declaration public static bool IsFloatingPoint(this Type type) Parameters Type Name Description Type type The type. Returns Type Description System.Boolean true if it represents a floating-point number; false otherwise. | Improve this Doc View Source IsInteger(Type) Determines whether the type is considered an integer. Declaration public static bool IsInteger(this Type type) Parameters Type Name Description Type type The type. Returns Type Description System.Boolean true if it represents an integer; false otherwise. | Improve this Doc View Source IsNumber(Type) Determines whether the type is a number. Declaration public static bool IsNumber(this Type type) Parameters Type Name Description Type type The type. Returns Type Description System.Boolean true if it represents a number; false otherwise."
  },
  "api/Json.Schema.Generation.UniqueItemsAttribute.html": {
    "href": "api/Json.Schema.Generation.UniqueItemsAttribute.html",
    "title": "Class UniqueItemsAttribute",
    "keywords": "Class UniqueItemsAttribute Applies a uniqueItems keyword. Inheritance System.Object UniqueItemsAttribute Implements IAttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class UniqueItemsAttribute : Attribute, IAttributeHandler Constructors | Improve this Doc View Source UniqueItemsAttribute(Boolean) Creates a new UniqueItemsAttribute instance. Declaration public UniqueItemsAttribute(bool value) Parameters Type Name Description System.Boolean value The value. Properties | Improve this Doc View Source Value Whether the items should be unique. Declaration public bool Value { get; } Property Value Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IAttributeHandler.AddConstraints(SchemaGeneratorContext) Declaration void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context Implements IAttributeHandler Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Generation.WriteOnlyAttribute.html": {
    "href": "api/Json.Schema.Generation.WriteOnlyAttribute.html",
    "title": "Class WriteOnlyAttribute",
    "keywords": "Class WriteOnlyAttribute Applies a writeOnly keyword. Inheritance System.Object WriteOnlyAttribute Implements IAttributeHandler Namespace : Json.Schema.Generation Assembly : JsonSchema.Net.Generation.dll Syntax public class WriteOnlyAttribute : Attribute, IAttributeHandler Constructors | Improve this Doc View Source WriteOnlyAttribute() Creates a new WriteOnlyAttribute instance with a value of true . Declaration public WriteOnlyAttribute() | Improve this Doc View Source WriteOnlyAttribute(Boolean) Creates a new WriteOnlyAttribute instance. Declaration public WriteOnlyAttribute(bool value) Parameters Type Name Description System.Boolean value The value. Properties | Improve this Doc View Source Value Whether the property should be write-only. Declaration public bool Value { get; } Property Value Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IAttributeHandler.AddConstraints(SchemaGeneratorContext) Declaration void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) Parameters Type Name Description SchemaGeneratorContext context Implements IAttributeHandler Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.html": {
    "href": "api/Json.Schema.html",
    "title": "Namespace Json.Schema",
    "keywords": "Namespace Json.Schema Classes AdditionalItemsKeyword Handles additionalItems . AdditionalPropertiesKeyword Handles additionalProperties . AllOfKeyword Handles allOf . AnchorKeyword Handles $anchor . Annotation Holder for an annotation value. AnyOfKeyword Handles anyOf . ApplicatorAttribute Indicates that the keyword is classified as an applicator. CommentKeyword Handles $comment . ConstKeyword Handles const . ContainsKeyword Handles contains . ContentMediaEncodingKeyword Handles contentMediaEncoding . ContentMediaTypeKeyword Handles contentMediaType . ContentSchemaKeyword Handles contentSchema . DefaultKeyword Handles default . DefinitionsKeyword Handles definitions . DefsKeyword Handles $defs . DependenciesKeyword Handles dependencies . DependentRequiredKeyword Handles dependentRequired . DependentSchemasKeyword Handles dependentSchemas . DeprecatedKeyword Handles deprecated . DescriptionKeyword Handles description . DynamicAnchorKeyword Handles $dynamicAnchor . DynamicRefKeyword Handles $dynamicRef . ElseKeyword Handles else . EnumerableExtensions More extensions on . EnumKeyword Handles enum . ExamplesKeyword Handles examples . ExclusiveMaximumKeyword Handles exclusiveMaximum . ExclusiveMinimumKeyword Handles exclusiveMinimum . Format Represents a format. FormatKeyword Handles format . Formats The formats supported by JSON Schema base specifications. IdKeyword Handles $id . IfKeyword Handles if . ItemsKeyword Handles items . JsonSchema Represents a JSON Schema. JsonSchemaBuilder A fluent-style builder for JsonSchema . JsonSchemaBuilderExtensions Provides a fluent interface for JsonSchemaBuilder . KeywordExtensions Some extensions for IJsonSchemaKeyword . LogExtensions Provides common log messages. MaxContainsKeyword Handles maxContains . MaximumKeyword Handles maximum . MaxItemsKeyword Handles maxItems . MaxLengthKeyword Handles maxLength . MaxPropertiesKeyword Handles maxProperties . MetaSchemas Exposes the meta-schemas for the supported drafts. MinContainsKeyword Handles minContains . MinimumKeyword Handles minimum . MinItemsKeyword Handles minItems . MinLengthKeyword Handles minLength . MinPropertiesKeyword Handles minProperties . MultipleOfKeyword Handles multipleOf . NotKeyword Handles not . OneOfKeyword Handles oneOf . PatternKeyword Handles pattern . PatternPropertiesKeyword Handles patternProperties . PredicateFormat A Format that uses a predicate for evaluation. PrefixItemsKeyword Handles items . PropertiesKeyword Handles properties . PropertyNamesKeyword Handles propertyNames . ReadOnlyKeyword Handles readOnly . RecursiveAnchorKeyword Handles $recursiveAnchor . RecursiveRefKeyword Handles $recursiveRef . RefKeyword Handles $ref . RegexFormat A regular-expression-based format. RequiredKeyword Handles requires . SchemaDraftAttribute Indicates which JSON Schema draft versions are supported by a keyword. SchemaKeyword Handles $schema . SchemaKeywordAttribute Indicates the keyword as it appears in a schema. SchemaKeywordRegistry Manages which keywords are known by the system. SchemaOrPropertyList A holder for either a schema dependency or a requirements dependency. SchemaPriorityAttribute Indicates keyword priority. SchemaRegistry A registry for schemas. ThenKeyword Handles then . TitleKeyword Handles title . TypeKeyword Handles type . UnevaluatedItemsKeyword Handles unevaluatedItems . UnevaluatedPropertiesKeyword Handles unevaluatedProperties . UniqueItemsKeyword Handles uniqueItems . UriExtensions Provides extensions on the type. ValidationContext Provides a single source of data for validation operations. ValidationOptions Allows configuration of the validation process. ValidationResults The results object for validations. Vocabularies Declares the vocabularies of the supported drafts. Vocabulary Represents a Draft 2019-09 and later vocabulary. VocabularyAttribute Indicates the ID of the vocabulary a keyword belongs to. VocabularyKeyword Handles $vocabulary . VocabularyRegistry A registry for vocabularies. WriteOnlyKeyword Handles writeOnly . Structs Duration Represents an ISO 8601 ABNF duration value. Interfaces IJsonSchemaKeyword Defines basic functionality for schema keywords. IKeyedSchemaCollector Indicates that the keyword contains a named collection of schemas. ILog Used to log processing details. IRefResolvable Defines functionality required to resolve $ref and $recursiveRef keywords. ISchemaCollector Indicates that the keyword contains a collection of schemas. ISchemaContainer Indicates that the keyword contains a single schema. Enums Draft Enumerates the supported JSON Schema drafts. OutputFormat Enumerates the available output formats. SchemaValueType Enumerates the schema value types. Delegates ValidationContext.ContextConsolidator Consolidates properties from multiple child contexts onto a single parent context. Generally, a keyword will define how it handles its own consolidation. This action must be registered on startup."
  },
  "api/Json.Schema.IdKeyword.html": {
    "href": "api/Json.Schema.IdKeyword.html",
    "title": "Class IdKeyword",
    "keywords": "Class IdKeyword Handles $id . Inheritance System.Object IdKeyword Implements IJsonSchemaKeyword IEquatable < IdKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class IdKeyword : object, IJsonSchemaKeyword, IEquatable<IdKeyword> Constructors | Improve this Doc View Source IdKeyword(Uri) Creates a new IdKeyword . Declaration public IdKeyword(Uri id) Parameters Type Name Description Uri id The ID. Properties | Improve this Doc View Source Id The ID. Declaration public Uri Id { get; } Property Value Type Description Uri Methods | Improve this Doc View Source Equals(IdKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(IdKeyword other) Parameters Type Name Description IdKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.IfKeyword.html": {
    "href": "api/Json.Schema.IfKeyword.html",
    "title": "Class IfKeyword",
    "keywords": "Class IfKeyword Handles if . Inheritance System.Object IfKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable < IfKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class IfKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaContainer, IEquatable<IfKeyword> Constructors | Improve this Doc View Source IfKeyword(JsonSchema) Creates a new IfKeyword . Declaration public IfKeyword(JsonSchema value) Parameters Type Name Description JsonSchema value The schema to match. Properties | Improve this Doc View Source Schema The schema to match. Declaration public JsonSchema Schema { get; } Property Value Type Description JsonSchema Methods | Improve this Doc View Source Equals(IfKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(IfKeyword other) Parameters Type Name Description IfKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.IJsonSchemaKeyword.html": {
    "href": "api/Json.Schema.IJsonSchemaKeyword.html",
    "title": "Interface IJsonSchemaKeyword",
    "keywords": "Interface IJsonSchemaKeyword Defines basic functionality for schema keywords. Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public interface IJsonSchemaKeyword Methods | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>) KeywordExtensions.Keyword(IJsonSchemaKeyword) KeywordExtensions.Priority(IJsonSchemaKeyword) KeywordExtensions.IsApplicator(IJsonSchemaKeyword) KeywordExtensions.GetSubschemas(IJsonSchemaKeyword)"
  },
  "api/Json.Schema.IKeyedSchemaCollector.html": {
    "href": "api/Json.Schema.IKeyedSchemaCollector.html",
    "title": "Interface IKeyedSchemaCollector",
    "keywords": "Interface IKeyedSchemaCollector Indicates that the keyword contains a named collection of schemas. Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public interface IKeyedSchemaCollector Properties | Improve this Doc View Source Schemas The subschemas. Declaration IReadOnlyDictionary<string, JsonSchema> Schemas { get; } Property Value Type Description IReadOnlyDictionary < System.String , JsonSchema > Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ILog.html": {
    "href": "api/Json.Schema.ILog.html",
    "title": "Interface ILog",
    "keywords": "Interface ILog Used to log processing details. Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public interface ILog Methods | Improve this Doc View Source Write(Func<String>, Int32) Logs a message with a newline. Declaration void Write(Func<string> message, int indent = 0) Parameters Type Name Description Func < System.String > message The message. System.Int32 indent Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.IRefResolvable.html": {
    "href": "api/Json.Schema.IRefResolvable.html",
    "title": "Interface IRefResolvable",
    "keywords": "Interface IRefResolvable Defines functionality required to resolve $ref and $recursiveRef keywords. Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public interface IRefResolvable Remarks Should be implemented for any keyword that contains navigable data. Methods | Improve this Doc View Source RegisterSubschemas(SchemaRegistry, Uri) Passes registration of any subschemas back to RegisterSubschemas(SchemaRegistry, Uri) . Declaration void RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry The registry into which the subschema should be registered. Uri currentUri The current URI. Remarks Just call RegisterSubschemas(SchemaRegistry, Uri) on each schema contained within the keyword. | Improve this Doc View Source ResolvePointerSegment(Nullable<String>) Resolves a JSON Pointer segment to another IRefResolvable node. Usually, these are schemas stored within the keyword. Declaration IRefResolvable ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value A JSON Pointer segment. Returns Type Description IRefResolvable Another IRefResolvable or null. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ISchemaCollector.html": {
    "href": "api/Json.Schema.ISchemaCollector.html",
    "title": "Interface ISchemaCollector",
    "keywords": "Interface ISchemaCollector Indicates that the keyword contains a collection of schemas. Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public interface ISchemaCollector Properties | Improve this Doc View Source Schemas The subschemas. Declaration IReadOnlyList<JsonSchema> Schemas { get; } Property Value Type Description IReadOnlyList < JsonSchema > Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ISchemaContainer.html": {
    "href": "api/Json.Schema.ISchemaContainer.html",
    "title": "Interface ISchemaContainer",
    "keywords": "Interface ISchemaContainer Indicates that the keyword contains a single schema. Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public interface ISchemaContainer Properties | Improve this Doc View Source Schema A subschema. Declaration JsonSchema Schema { get; } Property Value Type Description JsonSchema Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ItemsKeyword.html": {
    "href": "api/Json.Schema.ItemsKeyword.html",
    "title": "Class ItemsKeyword",
    "keywords": "Class ItemsKeyword Handles items . Inheritance System.Object ItemsKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer ISchemaCollector IEquatable < ItemsKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ItemsKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaContainer, ISchemaCollector, IEquatable<ItemsKeyword> Constructors | Improve this Doc View Source ItemsKeyword(IEnumerable<JsonSchema>) Creates a new ItemsKeyword . Declaration public ItemsKeyword(IEnumerable<JsonSchema> values) Parameters Type Name Description IEnumerable < JsonSchema > values The collection of schemas for the \"schema array\" form. | Improve this Doc View Source ItemsKeyword(JsonSchema) Creates a new ItemsKeyword . Declaration public ItemsKeyword(JsonSchema value) Parameters Type Name Description JsonSchema value The schema for the \"single schema\" form. | Improve this Doc View Source ItemsKeyword(JsonSchema[]) Creates a new ItemsKeyword . Declaration public ItemsKeyword(params JsonSchema[] values) Parameters Type Name Description JsonSchema [] values The collection of schemas for the \"schema array\" form. Remarks Using the params constructor to build an array-form items keyword with a single schema will confuse the compiler. To achieve this, you'll need to explicitly specify the array. Properties | Improve this Doc View Source ArraySchemas The collection of schemas for the \"schema array\" form. Declaration public IReadOnlyList<JsonSchema>? ArraySchemas { get; } Property Value Type Description System.Nullable < IReadOnlyList < JsonSchema >> | Improve this Doc View Source SingleSchema The schema for the \"single schema\" form. Declaration public JsonSchema SingleSchema { get; } Property Value Type Description JsonSchema Methods | Improve this Doc View Source Equals(ItemsKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ItemsKeyword other) Parameters Type Name Description ItemsKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable | Improve this Doc View Source ISchemaCollector.Schemas Declaration IReadOnlyList<JsonSchema> ISchemaCollector.Schemas { get; } Returns Type Description IReadOnlyList < JsonSchema > | Improve this Doc View Source ISchemaContainer.Schema Declaration JsonSchema ISchemaContainer.Schema { get; } Returns Type Description JsonSchema Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer ISchemaCollector IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.JsonSchema.html": {
    "href": "api/Json.Schema.JsonSchema.html",
    "title": "Class JsonSchema",
    "keywords": "Class JsonSchema Represents a JSON Schema. Inheritance System.Object JsonSchema Implements IRefResolvable IEquatable < JsonSchema > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class JsonSchema : object, IRefResolvable, IEquatable<JsonSchema> Fields | Improve this Doc View Source Empty The empty schema {} . Functionally equivalent to True . Declaration public static readonly JsonSchema Empty Field Value Type Description JsonSchema | Improve this Doc View Source False The false schema. Fails all instances. Declaration public static readonly JsonSchema False Field Value Type Description JsonSchema | Improve this Doc View Source True The true schema. Passes all instances. Declaration public static readonly JsonSchema True Field Value Type Description JsonSchema Properties | Improve this Doc View Source Keywords Gets the keywords contained in the schema. Declaration public IReadOnlyCollection<IJsonSchemaKeyword>? Keywords { get; } Property Value Type Description System.Nullable < IReadOnlyCollection < IJsonSchemaKeyword >> | Improve this Doc View Source OtherData Gets other non-keyword (or unknown keyword) properties in the schema. Declaration public IReadOnlyDictionary<string, JsonElement>? OtherData { get; } Property Value Type Description System.Nullable < IReadOnlyDictionary < System.String , JsonElement >> Methods | Improve this Doc View Source Equals(JsonSchema) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(JsonSchema other) Parameters Type Name Description JsonSchema other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source FromFile(String) Loads text from a file and deserializes a JsonSchema . Declaration public static JsonSchema FromFile(string fileName) Parameters Type Name Description System.String fileName The filename to load, URL-decoded. Returns Type Description JsonSchema A new JsonSchema . Remarks The filename needs to not be URL-encoded as attempts to encode it. | Improve this Doc View Source FromStream(Stream) Deserializes a JsonSchema from a stream. Declaration public static ValueTask<JsonSchema> FromStream(Stream source) Parameters Type Name Description Stream source A stream. Returns Type Description ValueTask < JsonSchema > A new JsonSchema . | Improve this Doc View Source FromText(String) Deserializes a JsonSchema from text. Declaration public static JsonSchema FromText(string jsonText) Parameters Type Name Description System.String jsonText The text to parse. Returns Type Description JsonSchema A new JsonSchema . | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source RegisterSubschemas(SchemaRegistry, Uri) Registers a subschema. To be called from IRefResolvable keywords. Declaration public void RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry The registry into which the subschema should be registered. Uri currentUri The current URI. | Improve this Doc View Source Validate(JsonElement, ValidationOptions) Validates an instance against this schema. Declaration public ValidationResults Validate(JsonElement root, ValidationOptions options = null) Parameters Type Name Description JsonElement root The root instance. ValidationOptions options The options to use for this validation. Returns Type Description ValidationResults A ValidationResults that provides the outcome of the validation. | Improve this Doc View Source ValidateSubschema(ValidationContext) Validates as a subschema. To be called from within keywords. Declaration public void ValidateSubschema(ValidationContext context) Parameters Type Name Description ValidationContext context The validation context for this validation pass. Operators | Improve this Doc View Source Implicit(Boolean to JsonSchema) Implicitly converts a boolean value into one of the boolean schemas. Declaration public static implicit operator JsonSchema(bool value) Parameters Type Name Description System.Boolean value The boolean value. Returns Type Description JsonSchema Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IRefResolvable IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.JsonSchemaBuilder.html": {
    "href": "api/Json.Schema.JsonSchemaBuilder.html",
    "title": "Class JsonSchemaBuilder",
    "keywords": "Class JsonSchemaBuilder A fluent-style builder for JsonSchema . Inheritance System.Object JsonSchemaBuilder Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class JsonSchemaBuilder : object Methods | Improve this Doc View Source Add(IJsonSchemaKeyword) Adds a new keyword. Declaration public void Add(IJsonSchemaKeyword keyword) Parameters Type Name Description IJsonSchemaKeyword keyword The keyword to add. | Improve this Doc View Source Build() Builds the schema. Declaration public JsonSchema Build() Returns Type Description JsonSchema A JsonSchema . | Improve this Doc View Source Get<T>() Gets a keyword if one has been added. Declaration public T Get<T>() where T : IJsonSchemaKeyword Returns Type Description T The keyword, if it exists; null otherwise. Type Parameters Name Description T the keyword type. | Improve this Doc View Source RecursiveRefRoot() Creates a new JsonSchema . Declaration public static JsonSchema RecursiveRefRoot() Returns Type Description JsonSchema A JSON Schema that simply refers back to the recursive root schema. | Improve this Doc View Source RefRoot() Creates a new JsonSchema . Declaration public static JsonSchema RefRoot() Returns Type Description JsonSchema A JSON Schema that simply refers back to the root schema. Operators | Improve this Doc View Source Implicit(JsonSchemaBuilder to JsonSchema) For convenience, implicitly calls Build() . Declaration public static implicit operator JsonSchema(JsonSchemaBuilder builder) Parameters Type Name Description JsonSchemaBuilder builder Returns Type Description JsonSchema A JsonSchema . Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>) JsonSchemaBuilderExtensions.FromType<T>(JsonSchemaBuilder, SchemaGeneratorConfiguration) JsonSchemaBuilderExtensions.FromType(JsonSchemaBuilder, Type, SchemaGeneratorConfiguration) JsonSchemaBuilderExtensions.AdditionalItems(JsonSchemaBuilder, JsonSchema) JsonSchemaBuilderExtensions.AdditionalProperties(JsonSchemaBuilder, JsonSchema) JsonSchemaBuilderExtensions.AllOf(JsonSchemaBuilder, JsonSchema[]) JsonSchemaBuilderExtensions.AllOf(JsonSchemaBuilder, IEnumerable<JsonSchema>) JsonSchemaBuilderExtensions.Anchor(JsonSchemaBuilder, String) JsonSchemaBuilderExtensions.AnyOf(JsonSchemaBuilder, JsonSchema[]) JsonSchemaBuilderExtensions.AnyOf(JsonSchemaBuilder, IEnumerable<JsonSchema>) JsonSchemaBuilderExtensions.Comment(JsonSchemaBuilder, String) JsonSchemaBuilderExtensions.Const(JsonSchemaBuilder, JsonElement) JsonSchemaBuilderExtensions.Const(JsonSchemaBuilder, JsonElementProxy) JsonSchemaBuilderExtensions.Contains(JsonSchemaBuilder, JsonSchema) JsonSchemaBuilderExtensions.Default(JsonSchemaBuilder, JsonElement) JsonSchemaBuilderExtensions.Default(JsonSchemaBuilder, JsonElementProxy) JsonSchemaBuilderExtensions.Definitions(JsonSchemaBuilder, IReadOnlyDictionary<String, JsonSchema>) JsonSchemaBuilderExtensions.Definitions(JsonSchemaBuilder, (String name, JsonSchema schema)[]) JsonSchemaBuilderExtensions.Defs(JsonSchemaBuilder, IReadOnlyDictionary<String, JsonSchema>) JsonSchemaBuilderExtensions.Defs(JsonSchemaBuilder, (String name, JsonSchema schema)[]) JsonSchemaBuilderExtensions.Dependencies(JsonSchemaBuilder, IReadOnlyDictionary<String, SchemaOrPropertyList>) JsonSchemaBuilderExtensions.Dependencies(JsonSchemaBuilder, (String name, SchemaOrPropertyList dep)[]) JsonSchemaBuilderExtensions.DependentRequired(JsonSchemaBuilder, IReadOnlyDictionary<String, IReadOnlyList<String>>) JsonSchemaBuilderExtensions.DependentRequired(JsonSchemaBuilder, (String name, IEnumerable<String> properties)[]) JsonSchemaBuilderExtensions.DependentSchemas(JsonSchemaBuilder, IReadOnlyDictionary<String, JsonSchema>) JsonSchemaBuilderExtensions.DependentSchemas(JsonSchemaBuilder, (String name, JsonSchema schema)[]) JsonSchemaBuilderExtensions.Deprecated(JsonSchemaBuilder, Boolean) JsonSchemaBuilderExtensions.Description(JsonSchemaBuilder, String) JsonSchemaBuilderExtensions.DynamicAnchor(JsonSchemaBuilder, String) JsonSchemaBuilderExtensions.DynamicRef(JsonSchemaBuilder, Uri) JsonSchemaBuilderExtensions.DynamicRef(JsonSchemaBuilder, String) JsonSchemaBuilderExtensions.Else(JsonSchemaBuilder, JsonSchema) JsonSchemaBuilderExtensions.Enum(JsonSchemaBuilder, IEnumerable<JsonElement>) JsonSchemaBuilderExtensions.Enum(JsonSchemaBuilder, IEnumerable<JsonElementProxy>) JsonSchemaBuilderExtensions.Enum(JsonSchemaBuilder, JsonElement[]) JsonSchemaBuilderExtensions.Enum(JsonSchemaBuilder, JsonElementProxy[]) JsonSchemaBuilderExtensions.Examples(JsonSchemaBuilder, IEnumerable<JsonElement>) JsonSchemaBuilderExtensions.Examples(JsonSchemaBuilder, JsonElement[]) JsonSchemaBuilderExtensions.Examples(JsonSchemaBuilder, IEnumerable<JsonElementProxy>) JsonSchemaBuilderExtensions.Examples(JsonSchemaBuilder, JsonElementProxy[]) JsonSchemaBuilderExtensions.ExclusiveMaximum(JsonSchemaBuilder, Decimal) JsonSchemaBuilderExtensions.ExclusiveMinimum(JsonSchemaBuilder, Decimal) JsonSchemaBuilderExtensions.Format(JsonSchemaBuilder, Format) JsonSchemaBuilderExtensions.Id(JsonSchemaBuilder, Uri) JsonSchemaBuilderExtensions.Id(JsonSchemaBuilder, String) JsonSchemaBuilderExtensions.If(JsonSchemaBuilder, JsonSchema) JsonSchemaBuilderExtensions.Items(JsonSchemaBuilder, JsonSchema) JsonSchemaBuilderExtensions.Items(JsonSchemaBuilder, IEnumerable<JsonSchema>) JsonSchemaBuilderExtensions.MaxContains(JsonSchemaBuilder, UInt32) JsonSchemaBuilderExtensions.Maximum(JsonSchemaBuilder, Decimal) JsonSchemaBuilderExtensions.MaxItems(JsonSchemaBuilder, UInt32) JsonSchemaBuilderExtensions.MaxLength(JsonSchemaBuilder, UInt32) JsonSchemaBuilderExtensions.MaxProperties(JsonSchemaBuilder, UInt32) JsonSchemaBuilderExtensions.MinContains(JsonSchemaBuilder, UInt32) JsonSchemaBuilderExtensions.Minimum(JsonSchemaBuilder, Decimal) JsonSchemaBuilderExtensions.MinItems(JsonSchemaBuilder, UInt32) JsonSchemaBuilderExtensions.MinLength(JsonSchemaBuilder, UInt32) JsonSchemaBuilderExtensions.MinProperties(JsonSchemaBuilder, UInt32) JsonSchemaBuilderExtensions.MultipleOf(JsonSchemaBuilder, Decimal) JsonSchemaBuilderExtensions.Not(JsonSchemaBuilder, JsonSchema) JsonSchemaBuilderExtensions.OneOf(JsonSchemaBuilder, JsonSchema[]) JsonSchemaBuilderExtensions.OneOf(JsonSchemaBuilder, IEnumerable<JsonSchema>) JsonSchemaBuilderExtensions.Pattern(JsonSchemaBuilder, Regex) JsonSchemaBuilderExtensions.Pattern(JsonSchemaBuilder, String) JsonSchemaBuilderExtensions.PatternProperties(JsonSchemaBuilder, IReadOnlyDictionary<Regex, JsonSchema>) JsonSchemaBuilderExtensions.PatternProperties(JsonSchemaBuilder, (Regex pattern, JsonSchema schema)[]) JsonSchemaBuilderExtensions.PrefixItems(JsonSchemaBuilder, IEnumerable<JsonSchema>) JsonSchemaBuilderExtensions.Properties(JsonSchemaBuilder, IReadOnlyDictionary<String, JsonSchema>) JsonSchemaBuilderExtensions.Properties(JsonSchemaBuilder, (String name, JsonSchema schema)[]) JsonSchemaBuilderExtensions.PropertyNames(JsonSchemaBuilder, JsonSchema) JsonSchemaBuilderExtensions.ReadOnly(JsonSchemaBuilder, Boolean) JsonSchemaBuilderExtensions.RecursiveAnchor(JsonSchemaBuilder, Boolean) JsonSchemaBuilderExtensions.RecursiveRef(JsonSchemaBuilder, Uri) JsonSchemaBuilderExtensions.RecursiveRef(JsonSchemaBuilder, String) JsonSchemaBuilderExtensions.Ref(JsonSchemaBuilder, Uri) JsonSchemaBuilderExtensions.Ref(JsonSchemaBuilder, String) JsonSchemaBuilderExtensions.Required(JsonSchemaBuilder, IEnumerable<String>) JsonSchemaBuilderExtensions.Required(JsonSchemaBuilder, String[]) JsonSchemaBuilderExtensions.Schema(JsonSchemaBuilder, Uri) JsonSchemaBuilderExtensions.Schema(JsonSchemaBuilder, String) JsonSchemaBuilderExtensions.Then(JsonSchemaBuilder, JsonSchema) JsonSchemaBuilderExtensions.Title(JsonSchemaBuilder, String) JsonSchemaBuilderExtensions.Type(JsonSchemaBuilder, SchemaValueType) JsonSchemaBuilderExtensions.Type(JsonSchemaBuilder, SchemaValueType[]) JsonSchemaBuilderExtensions.Type(JsonSchemaBuilder, IEnumerable<SchemaValueType>) JsonSchemaBuilderExtensions.UnevaluatedItems(JsonSchemaBuilder, JsonSchema) JsonSchemaBuilderExtensions.UnevaluatedProperties(JsonSchemaBuilder, JsonSchema) JsonSchemaBuilderExtensions.UniqueItems(JsonSchemaBuilder, Boolean) JsonSchemaBuilderExtensions.Vocabulary(JsonSchemaBuilder, (Uri id, Boolean required)[]) JsonSchemaBuilderExtensions.Vocabulary(JsonSchemaBuilder, (String id, Boolean required)[]) JsonSchemaBuilderExtensions.Vocabulary(JsonSchemaBuilder, IReadOnlyDictionary<Uri, Boolean>) JsonSchemaBuilderExtensions.Vocabulary(JsonSchemaBuilder, IReadOnlyDictionary<String, Boolean>) JsonSchemaBuilderExtensions.WriteOnly(JsonSchemaBuilder, Boolean)"
  },
  "api/Json.Schema.JsonSchemaBuilderExtensions.html": {
    "href": "api/Json.Schema.JsonSchemaBuilderExtensions.html",
    "title": "Class JsonSchemaBuilderExtensions",
    "keywords": "Class JsonSchemaBuilderExtensions Provides a fluent interface for JsonSchemaBuilder . Inheritance System.Object JsonSchemaBuilderExtensions Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public static class JsonSchemaBuilderExtensions : object Methods | Improve this Doc View Source AdditionalItems(JsonSchemaBuilder, JsonSchema) Add an additionalItems keyword. Declaration public static JsonSchemaBuilder AdditionalItems(this JsonSchemaBuilder builder, JsonSchema schema) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonSchema schema The schema for additionalItems . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source AdditionalProperties(JsonSchemaBuilder, JsonSchema) Add an additionalProperties keyword. Declaration public static JsonSchemaBuilder AdditionalProperties(this JsonSchemaBuilder builder, JsonSchema schema) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonSchema schema The schema for additionalProperties . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source AllOf(JsonSchemaBuilder, IEnumerable<JsonSchema>) Add an allOf keyword. Declaration public static JsonSchemaBuilder AllOf(this JsonSchemaBuilder builder, IEnumerable<JsonSchema> schemas) Parameters Type Name Description JsonSchemaBuilder builder The builder. IEnumerable < JsonSchema > schemas The schemas for allOf . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source AllOf(JsonSchemaBuilder, JsonSchema[]) Add an allOf keyword. Declaration public static JsonSchemaBuilder AllOf(this JsonSchemaBuilder builder, params JsonSchema[] schemas) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonSchema [] schemas The schemas for allOf . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Anchor(JsonSchemaBuilder, String) Add an $anchor keyword. Declaration public static JsonSchemaBuilder Anchor(this JsonSchemaBuilder builder, string reference) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.String reference The anchor reference. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source AnyOf(JsonSchemaBuilder, IEnumerable<JsonSchema>) Add an anyOf keyword. Declaration public static JsonSchemaBuilder AnyOf(this JsonSchemaBuilder builder, IEnumerable<JsonSchema> schemas) Parameters Type Name Description JsonSchemaBuilder builder The builder. IEnumerable < JsonSchema > schemas The schemas for anyOf . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source AnyOf(JsonSchemaBuilder, JsonSchema[]) Add an anyOf keyword. Declaration public static JsonSchemaBuilder AnyOf(this JsonSchemaBuilder builder, params JsonSchema[] schemas) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonSchema [] schemas The schemas for anyOf . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Comment(JsonSchemaBuilder, String) Add a $comment keyword. Declaration public static JsonSchemaBuilder Comment(this JsonSchemaBuilder builder, string comment) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.String comment The comment. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Const(JsonSchemaBuilder, JsonElementProxy) Add a const keyword. Declaration public static JsonSchemaBuilder Const(this JsonSchemaBuilder builder, JsonElementProxy element) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonElementProxy element The constant value. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Const(JsonSchemaBuilder, JsonElement) Add a const keyword. Declaration public static JsonSchemaBuilder Const(this JsonSchemaBuilder builder, JsonElement element) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonElement element The constant value. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Contains(JsonSchemaBuilder, JsonSchema) Add an contains keyword. Declaration public static JsonSchemaBuilder Contains(this JsonSchemaBuilder builder, JsonSchema schema) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonSchema schema The schema for contains . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Default(JsonSchemaBuilder, JsonElementProxy) Add a default keyword. Declaration public static JsonSchemaBuilder Default(this JsonSchemaBuilder builder, JsonElementProxy element) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonElementProxy element The value. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Default(JsonSchemaBuilder, JsonElement) Add a default keyword. Declaration public static JsonSchemaBuilder Default(this JsonSchemaBuilder builder, JsonElement element) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonElement element The value. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Definitions(JsonSchemaBuilder, IReadOnlyDictionary<String, JsonSchema>) Add a definitions keyword. Declaration public static JsonSchemaBuilder Definitions(this JsonSchemaBuilder builder, IReadOnlyDictionary<string, JsonSchema> defs) Parameters Type Name Description JsonSchemaBuilder builder The builder. IReadOnlyDictionary < System.String , JsonSchema > defs The schema definition map. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Definitions(JsonSchemaBuilder, (String name, JsonSchema schema)[]) Add a definitions keyword. Declaration public static JsonSchemaBuilder Definitions(this JsonSchemaBuilder builder, params (string name, JsonSchema schema)[] defs) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.ValueTuple < System.String , JsonSchema >[] defs The schema definition map. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Defs(JsonSchemaBuilder, IReadOnlyDictionary<String, JsonSchema>) Add a $defs keyword. Declaration public static JsonSchemaBuilder Defs(this JsonSchemaBuilder builder, IReadOnlyDictionary<string, JsonSchema> defs) Parameters Type Name Description JsonSchemaBuilder builder The builder. IReadOnlyDictionary < System.String , JsonSchema > defs The schema definition map. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Defs(JsonSchemaBuilder, (String name, JsonSchema schema)[]) Add a $defs keyword. Declaration public static JsonSchemaBuilder Defs(this JsonSchemaBuilder builder, params (string name, JsonSchema schema)[] defs) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.ValueTuple < System.String , JsonSchema >[] defs The schema definition map. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Dependencies(JsonSchemaBuilder, IReadOnlyDictionary<String, SchemaOrPropertyList>) Add a dependencies keyword. Declaration public static JsonSchemaBuilder Dependencies(this JsonSchemaBuilder builder, IReadOnlyDictionary<string, SchemaOrPropertyList> deps) Parameters Type Name Description JsonSchemaBuilder builder The builder. IReadOnlyDictionary < System.String , SchemaOrPropertyList > deps The dependencies. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Dependencies(JsonSchemaBuilder, (String name, SchemaOrPropertyList dep)[]) Add a dependencies keyword. Declaration public static JsonSchemaBuilder Dependencies(this JsonSchemaBuilder builder, params (string name, SchemaOrPropertyList dep)[] deps) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.ValueTuple < System.String , SchemaOrPropertyList >[] deps The dependencies. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source DependentRequired(JsonSchemaBuilder, IReadOnlyDictionary<String, IReadOnlyList<String>>) Add a dependentRequired keyword. Declaration public static JsonSchemaBuilder DependentRequired(this JsonSchemaBuilder builder, IReadOnlyDictionary<string, IReadOnlyList<string>> deps) Parameters Type Name Description JsonSchemaBuilder builder The builder. IReadOnlyDictionary < System.String , IReadOnlyList < System.String >> deps The dependencies. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source DependentRequired(JsonSchemaBuilder, (String name, IEnumerable<String> properties)[]) Add a dependentRequired keyword. Declaration public static JsonSchemaBuilder DependentRequired(this JsonSchemaBuilder builder, params (string name, IEnumerable<string> properties)[] deps) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.ValueTuple < System.String , IEnumerable < System.String >>[] deps The dependencies. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source DependentSchemas(JsonSchemaBuilder, IReadOnlyDictionary<String, JsonSchema>) Add a dependentSchemas keyword. Declaration public static JsonSchemaBuilder DependentSchemas(this JsonSchemaBuilder builder, IReadOnlyDictionary<string, JsonSchema> deps) Parameters Type Name Description JsonSchemaBuilder builder The builder. IReadOnlyDictionary < System.String , JsonSchema > deps The dependencies. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source DependentSchemas(JsonSchemaBuilder, (String name, JsonSchema schema)[]) Add a dependentSchemas keyword. Declaration public static JsonSchemaBuilder DependentSchemas(this JsonSchemaBuilder builder, params (string name, JsonSchema schema)[] deps) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.ValueTuple < System.String , JsonSchema >[] deps The dependencies. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Deprecated(JsonSchemaBuilder, Boolean) Add a deprecated keyword. Declaration public static JsonSchemaBuilder Deprecated(this JsonSchemaBuilder builder, bool deprecated) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.Boolean deprecated Whether the schema is deprecated. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Description(JsonSchemaBuilder, String) Add a description keyword. Declaration public static JsonSchemaBuilder Description(this JsonSchemaBuilder builder, string description) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.String description The description. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source DynamicAnchor(JsonSchemaBuilder, String) Add an $dynamicAnchor keyword. Declaration public static JsonSchemaBuilder DynamicAnchor(this JsonSchemaBuilder builder, string reference) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.String reference The anchor reference. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source DynamicRef(JsonSchemaBuilder, String) Add a $dynamicRef keyword. Declaration public static JsonSchemaBuilder DynamicRef(this JsonSchemaBuilder builder, string reference) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.String reference The URI reference. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source DynamicRef(JsonSchemaBuilder, Uri) Add a $dynamicRef keyword. Declaration public static JsonSchemaBuilder DynamicRef(this JsonSchemaBuilder builder, Uri reference) Parameters Type Name Description JsonSchemaBuilder builder The builder. Uri reference The URI reference. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Else(JsonSchemaBuilder, JsonSchema) Add an else keyword. Declaration public static JsonSchemaBuilder Else(this JsonSchemaBuilder builder, JsonSchema schema) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonSchema schema The schema for else . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Enum(JsonSchemaBuilder, IEnumerable<JsonElementProxy>) Add an enum keyword. Declaration public static JsonSchemaBuilder Enum(this JsonSchemaBuilder builder, IEnumerable<JsonElementProxy> elements) Parameters Type Name Description JsonSchemaBuilder builder The builder. IEnumerable < JsonElementProxy > elements The values for the enum. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Enum(JsonSchemaBuilder, IEnumerable<JsonElement>) Add an enum keyword. Declaration public static JsonSchemaBuilder Enum(this JsonSchemaBuilder builder, IEnumerable<JsonElement> elements) Parameters Type Name Description JsonSchemaBuilder builder The builder. IEnumerable < JsonElement > elements The values for the enum. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Enum(JsonSchemaBuilder, JsonElementProxy[]) Add an enum keyword. Declaration public static JsonSchemaBuilder Enum(this JsonSchemaBuilder builder, params JsonElementProxy[] elements) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonElementProxy [] elements The values for the enum. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Enum(JsonSchemaBuilder, JsonElement[]) Add an enum keyword. Declaration public static JsonSchemaBuilder Enum(this JsonSchemaBuilder builder, params JsonElement[] elements) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonElement [] elements The values for the enum. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Examples(JsonSchemaBuilder, IEnumerable<JsonElementProxy>) Add an examples keyword. Declaration public static JsonSchemaBuilder Examples(this JsonSchemaBuilder builder, IEnumerable<JsonElementProxy> elements) Parameters Type Name Description JsonSchemaBuilder builder The builder. IEnumerable < JsonElementProxy > elements The example values. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Examples(JsonSchemaBuilder, IEnumerable<JsonElement>) Add an examples keyword. Declaration public static JsonSchemaBuilder Examples(this JsonSchemaBuilder builder, IEnumerable<JsonElement> elements) Parameters Type Name Description JsonSchemaBuilder builder The builder. IEnumerable < JsonElement > elements The example values. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Examples(JsonSchemaBuilder, JsonElementProxy[]) Add an examples keyword. Declaration public static JsonSchemaBuilder Examples(this JsonSchemaBuilder builder, params JsonElementProxy[] elements) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonElementProxy [] elements The example values. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Examples(JsonSchemaBuilder, JsonElement[]) Add an examples keyword. Declaration public static JsonSchemaBuilder Examples(this JsonSchemaBuilder builder, params JsonElement[] elements) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonElement [] elements The example values. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source ExclusiveMaximum(JsonSchemaBuilder, Decimal) Add an exclusiveMaximum keyword. Declaration public static JsonSchemaBuilder ExclusiveMaximum(this JsonSchemaBuilder builder, decimal max) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.Decimal max The max value. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source ExclusiveMinimum(JsonSchemaBuilder, Decimal) Add an exclusiveMinimum keyword. Declaration public static JsonSchemaBuilder ExclusiveMinimum(this JsonSchemaBuilder builder, decimal min) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.Decimal min The min value. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Format(JsonSchemaBuilder, Format) Add a format keyword. Declaration public static JsonSchemaBuilder Format(this JsonSchemaBuilder builder, Format format) Parameters Type Name Description JsonSchemaBuilder builder The builder. Format format The format. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Id(JsonSchemaBuilder, String) Add an $id keyword. Declaration public static JsonSchemaBuilder Id(this JsonSchemaBuilder builder, string id) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.String id The ID. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Id(JsonSchemaBuilder, Uri) Add an $id keyword. Declaration public static JsonSchemaBuilder Id(this JsonSchemaBuilder builder, Uri id) Parameters Type Name Description JsonSchemaBuilder builder The builder. Uri id The ID. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source If(JsonSchemaBuilder, JsonSchema) Add an if keyword. Declaration public static JsonSchemaBuilder If(this JsonSchemaBuilder builder, JsonSchema schema) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonSchema schema The schema for if . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Items(JsonSchemaBuilder, IEnumerable<JsonSchema>) Add a schema-array items keyword. Declaration public static JsonSchemaBuilder Items(this JsonSchemaBuilder builder, IEnumerable<JsonSchema> schemas) Parameters Type Name Description JsonSchemaBuilder builder The builder. IEnumerable < JsonSchema > schemas The schemas for items . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Items(JsonSchemaBuilder, JsonSchema) Add a single-schema items keyword. Declaration public static JsonSchemaBuilder Items(this JsonSchemaBuilder builder, JsonSchema schema) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonSchema schema The schema for items . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source MaxContains(JsonSchemaBuilder, UInt32) Add a maxContains keyword. Declaration public static JsonSchemaBuilder MaxContains(this JsonSchemaBuilder builder, uint value) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.UInt32 value The max number of expected matches. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Maximum(JsonSchemaBuilder, Decimal) Add a maximum keyword. Declaration public static JsonSchemaBuilder Maximum(this JsonSchemaBuilder builder, decimal value) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.Decimal value The max value. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source MaxItems(JsonSchemaBuilder, UInt32) Add a maxItems keyword. Declaration public static JsonSchemaBuilder MaxItems(this JsonSchemaBuilder builder, uint value) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.UInt32 value The max number of expected items. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source MaxLength(JsonSchemaBuilder, UInt32) Add a maxLength keyword. Declaration public static JsonSchemaBuilder MaxLength(this JsonSchemaBuilder builder, uint value) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.UInt32 value The max string length. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source MaxProperties(JsonSchemaBuilder, UInt32) Add a maxProperties keyword. Declaration public static JsonSchemaBuilder MaxProperties(this JsonSchemaBuilder builder, uint value) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.UInt32 value The max number of expected properties. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source MinContains(JsonSchemaBuilder, UInt32) Add a minContains keyword. Declaration public static JsonSchemaBuilder MinContains(this JsonSchemaBuilder builder, uint value) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.UInt32 value The min number of expected matches. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Minimum(JsonSchemaBuilder, Decimal) Add a minimum keyword. Declaration public static JsonSchemaBuilder Minimum(this JsonSchemaBuilder builder, decimal value) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.Decimal value The min value. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source MinItems(JsonSchemaBuilder, UInt32) Add a minItems keyword. Declaration public static JsonSchemaBuilder MinItems(this JsonSchemaBuilder builder, uint value) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.UInt32 value The min number of expected items. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source MinLength(JsonSchemaBuilder, UInt32) Add a minLength keyword. Declaration public static JsonSchemaBuilder MinLength(this JsonSchemaBuilder builder, uint value) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.UInt32 value The min string length. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source MinProperties(JsonSchemaBuilder, UInt32) Add a minProperties keyword. Declaration public static JsonSchemaBuilder MinProperties(this JsonSchemaBuilder builder, uint value) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.UInt32 value The min number of expected properties. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source MultipleOf(JsonSchemaBuilder, Decimal) Add a multipleOf keyword. Declaration public static JsonSchemaBuilder MultipleOf(this JsonSchemaBuilder builder, decimal value) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.Decimal value The divisor. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Not(JsonSchemaBuilder, JsonSchema) Add a not keyword. Declaration public static JsonSchemaBuilder Not(this JsonSchemaBuilder builder, JsonSchema schema) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonSchema schema The schema for not . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source OneOf(JsonSchemaBuilder, IEnumerable<JsonSchema>) Add a oneOf keyword. Declaration public static JsonSchemaBuilder OneOf(this JsonSchemaBuilder builder, IEnumerable<JsonSchema> schemas) Parameters Type Name Description JsonSchemaBuilder builder The builder. IEnumerable < JsonSchema > schemas The schemas for oneOf . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source OneOf(JsonSchemaBuilder, JsonSchema[]) Add a oneOf keyword. Declaration public static JsonSchemaBuilder OneOf(this JsonSchemaBuilder builder, params JsonSchema[] schemas) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonSchema [] schemas The schema for oneOf . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Pattern(JsonSchemaBuilder, Regex) Add a pattern keyword. Declaration public static JsonSchemaBuilder Pattern(this JsonSchemaBuilder builder, Regex pattern) Parameters Type Name Description JsonSchemaBuilder builder The builder. Regex pattern The pattern to match. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Pattern(JsonSchemaBuilder, String) Add a pattern keyword. Declaration public static JsonSchemaBuilder Pattern(this JsonSchemaBuilder builder, string pattern) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.String pattern The pattern to match. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source PatternProperties(JsonSchemaBuilder, IReadOnlyDictionary<Regex, JsonSchema>) Add a patternProperties keyword. Declaration public static JsonSchemaBuilder PatternProperties(this JsonSchemaBuilder builder, IReadOnlyDictionary<Regex, JsonSchema> props) Parameters Type Name Description JsonSchemaBuilder builder The builder. IReadOnlyDictionary < Regex , JsonSchema > props The property schemas. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source PatternProperties(JsonSchemaBuilder, (Regex pattern, JsonSchema schema)[]) Add a patternProperties keyword. Declaration public static JsonSchemaBuilder PatternProperties(this JsonSchemaBuilder builder, params (Regex pattern, JsonSchema schema)[] props) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.ValueTuple < Regex , JsonSchema >[] props The property schemas. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source PrefixItems(JsonSchemaBuilder, IEnumerable<JsonSchema>) Add a prefixItems keyword. Declaration public static JsonSchemaBuilder PrefixItems(this JsonSchemaBuilder builder, IEnumerable<JsonSchema> schemas) Parameters Type Name Description JsonSchemaBuilder builder The builder. IEnumerable < JsonSchema > schemas The schemas for prefixItems . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Properties(JsonSchemaBuilder, IReadOnlyDictionary<String, JsonSchema>) Add a properties keyword. Declaration public static JsonSchemaBuilder Properties(this JsonSchemaBuilder builder, IReadOnlyDictionary<string, JsonSchema> props) Parameters Type Name Description JsonSchemaBuilder builder The builder. IReadOnlyDictionary < System.String , JsonSchema > props The property schemas. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Properties(JsonSchemaBuilder, (String name, JsonSchema schema)[]) Add a properties keyword. Declaration public static JsonSchemaBuilder Properties(this JsonSchemaBuilder builder, params (string name, JsonSchema schema)[] props) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.ValueTuple < System.String , JsonSchema >[] props The property schemas. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source PropertyNames(JsonSchemaBuilder, JsonSchema) Add a propertyNames keyword. Declaration public static JsonSchemaBuilder PropertyNames(this JsonSchemaBuilder builder, JsonSchema schema) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonSchema schema The schema for propertyNames . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source ReadOnly(JsonSchemaBuilder, Boolean) Add a readOnly keyword. Declaration public static JsonSchemaBuilder ReadOnly(this JsonSchemaBuilder builder, bool value) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.Boolean value Whether the instance is read-only. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source RecursiveAnchor(JsonSchemaBuilder, Boolean) Add a $recursiveAnchor keyword. Declaration public static JsonSchemaBuilder RecursiveAnchor(this JsonSchemaBuilder builder, bool value = true) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.Boolean value The value. Returns Type Description JsonSchemaBuilder The builder. Remarks Per Draft 2019-09, the value must always be true . This is implied for this method. | Improve this Doc View Source RecursiveRef(JsonSchemaBuilder, String) Add a $recursiveRef keyword. Declaration public static JsonSchemaBuilder RecursiveRef(this JsonSchemaBuilder builder, string reference) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.String reference The URI reference. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source RecursiveRef(JsonSchemaBuilder, Uri) Add a $recursiveRef keyword. Declaration public static JsonSchemaBuilder RecursiveRef(this JsonSchemaBuilder builder, Uri reference) Parameters Type Name Description JsonSchemaBuilder builder The builder. Uri reference The URI reference. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Ref(JsonSchemaBuilder, String) Add a $ref keyword. Declaration public static JsonSchemaBuilder Ref(this JsonSchemaBuilder builder, string reference) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.String reference The URI reference. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Ref(JsonSchemaBuilder, Uri) Add a $ref keyword. Declaration public static JsonSchemaBuilder Ref(this JsonSchemaBuilder builder, Uri reference) Parameters Type Name Description JsonSchemaBuilder builder The builder. Uri reference The URI reference. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Required(JsonSchemaBuilder, IEnumerable<String>) Add a required keyword. Declaration public static JsonSchemaBuilder Required(this JsonSchemaBuilder builder, IEnumerable<string> properties) Parameters Type Name Description JsonSchemaBuilder builder The builder. IEnumerable < System.String > properties The required property collections. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Required(JsonSchemaBuilder, String[]) Add a required keyword. Declaration public static JsonSchemaBuilder Required(this JsonSchemaBuilder builder, params string[] properties) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.String [] properties The required property collections. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Schema(JsonSchemaBuilder, String) Add a $schema keyword. Declaration public static JsonSchemaBuilder Schema(this JsonSchemaBuilder builder, string uri) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.String uri The uri of the meta-schema. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Schema(JsonSchemaBuilder, Uri) Add a $schema keyword. Declaration public static JsonSchemaBuilder Schema(this JsonSchemaBuilder builder, Uri uri) Parameters Type Name Description JsonSchemaBuilder builder The builder. Uri uri The uri of the meta-schema. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Then(JsonSchemaBuilder, JsonSchema) Add a then keyword. Declaration public static JsonSchemaBuilder Then(this JsonSchemaBuilder builder, JsonSchema schema) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonSchema schema The schema for then . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Title(JsonSchemaBuilder, String) Add a title keyword. Declaration public static JsonSchemaBuilder Title(this JsonSchemaBuilder builder, string title) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.String title The title. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Type(JsonSchemaBuilder, IEnumerable<SchemaValueType>) Add a type keyword. Declaration public static JsonSchemaBuilder Type(this JsonSchemaBuilder builder, IEnumerable<SchemaValueType> types) Parameters Type Name Description JsonSchemaBuilder builder The builder. IEnumerable < SchemaValueType > types The types. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Type(JsonSchemaBuilder, SchemaValueType) Add a type keyword. Declaration public static JsonSchemaBuilder Type(this JsonSchemaBuilder builder, SchemaValueType type) Parameters Type Name Description JsonSchemaBuilder builder The builder. SchemaValueType type The type. Can be combined with the bit-wise OR operator | . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Type(JsonSchemaBuilder, SchemaValueType[]) Add a type keyword. Declaration public static JsonSchemaBuilder Type(this JsonSchemaBuilder builder, params SchemaValueType[] types) Parameters Type Name Description JsonSchemaBuilder builder The builder. SchemaValueType [] types The types. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source UnevaluatedItems(JsonSchemaBuilder, JsonSchema) Add an unevaluatedItems keyword. Declaration public static JsonSchemaBuilder UnevaluatedItems(this JsonSchemaBuilder builder, JsonSchema schema) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonSchema schema The schema for unevaluatedItems . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source UnevaluatedProperties(JsonSchemaBuilder, JsonSchema) Add an unevaluatedProperties keyword. Declaration public static JsonSchemaBuilder UnevaluatedProperties(this JsonSchemaBuilder builder, JsonSchema schema) Parameters Type Name Description JsonSchemaBuilder builder The builder. JsonSchema schema The schema for unevaluatedProperties . Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source UniqueItems(JsonSchemaBuilder, Boolean) Add a uniqueItems keyword. Declaration public static JsonSchemaBuilder UniqueItems(this JsonSchemaBuilder builder, bool value) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.Boolean value Whether to expect a unique item set. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Vocabulary(JsonSchemaBuilder, IReadOnlyDictionary<String, Boolean>) Add an $vocabulary keyword. Declaration public static JsonSchemaBuilder Vocabulary(this JsonSchemaBuilder builder, IReadOnlyDictionary<string, bool> vocabs) Parameters Type Name Description JsonSchemaBuilder builder The builder. IReadOnlyDictionary < System.String , System.Boolean > vocabs The vocabulary callouts. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Vocabulary(JsonSchemaBuilder, IReadOnlyDictionary<Uri, Boolean>) Add an $vocabulary keyword. Declaration public static JsonSchemaBuilder Vocabulary(this JsonSchemaBuilder builder, IReadOnlyDictionary<Uri, bool> vocabs) Parameters Type Name Description JsonSchemaBuilder builder The builder. IReadOnlyDictionary < Uri , System.Boolean > vocabs The vocabulary callouts. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Vocabulary(JsonSchemaBuilder, (String id, Boolean required)[]) Add an $vocabulary keyword. Declaration public static JsonSchemaBuilder Vocabulary(this JsonSchemaBuilder builder, params (string id, bool required)[] vocabs) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.ValueTuple < System.String , System.Boolean >[] vocabs The vocabulary callouts. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source Vocabulary(JsonSchemaBuilder, (Uri id, Boolean required)[]) Add an $vocabulary keyword. Declaration public static JsonSchemaBuilder Vocabulary(this JsonSchemaBuilder builder, params (Uri id, bool required)[] vocabs) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.ValueTuple < Uri , System.Boolean >[] vocabs The vocabulary callouts. Returns Type Description JsonSchemaBuilder The builder. | Improve this Doc View Source WriteOnly(JsonSchemaBuilder, Boolean) Add a writeOnly keyword. Declaration public static JsonSchemaBuilder WriteOnly(this JsonSchemaBuilder builder, bool value) Parameters Type Name Description JsonSchemaBuilder builder The builder. System.Boolean value Whether the instance is write-only. Returns Type Description JsonSchemaBuilder The builder."
  },
  "api/Json.Schema.KeywordExtensions.html": {
    "href": "api/Json.Schema.KeywordExtensions.html",
    "title": "Class KeywordExtensions",
    "keywords": "Class KeywordExtensions Some extensions for IJsonSchemaKeyword . Inheritance System.Object KeywordExtensions Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public static class KeywordExtensions : object Methods | Improve this Doc View Source GetSubschemas(IJsonSchemaKeyword) Gets all immediate subschemas for a keyword. Declaration public static IEnumerable<JsonSchema> GetSubschemas(this IJsonSchemaKeyword keyword) Parameters Type Name Description IJsonSchemaKeyword keyword The keyword. Returns Type Description IEnumerable < JsonSchema > An IEnumerable&lt;JsonSchema> . | Improve this Doc View Source IsApplicator(IJsonSchemaKeyword) Gets whether the keyword is an applicator (carries the ApplicatorAttribute attribute). Declaration public static bool IsApplicator(this IJsonSchemaKeyword keyword) Parameters Type Name Description IJsonSchemaKeyword keyword The keyword. Returns Type Description System.Boolean true if the keyword is an applicator; false otherwise. | Improve this Doc View Source Keyword(IJsonSchemaKeyword) Gets the keyword string. Declaration public static string Keyword(this IJsonSchemaKeyword keyword) Parameters Type Name Description IJsonSchemaKeyword keyword The keyword. Returns Type Description System.String The keyword string. | Improve this Doc View Source Priority(IJsonSchemaKeyword) Gets the keyword priority. Declaration public static long Priority(this IJsonSchemaKeyword keyword) Parameters Type Name Description IJsonSchemaKeyword keyword The keyword. Returns Type Description System.Int64 The priority."
  },
  "api/Json.Schema.LogExtensions.html": {
    "href": "api/Json.Schema.LogExtensions.html",
    "title": "Class LogExtensions",
    "keywords": "Class LogExtensions Provides common log messages. Inheritance System.Object LogExtensions Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public static class LogExtensions : object Methods | Improve this Doc View Source EnterKeyword(ValidationContext, String) Adds a message to indicate a keyword has begun processing. Increments indention. Declaration public static void EnterKeyword(this ValidationContext context, string keyword) Parameters Type Name Description ValidationContext context The validation context. System.String keyword The keyword name | Improve this Doc View Source ExitKeyword(ValidationContext, String) Adds a message to indicate a keyword has finished processing. Decrements indention. Declaration public static void ExitKeyword(this ValidationContext context, string keyword) Parameters Type Name Description ValidationContext context The validation context. System.String keyword The keyword name | Improve this Doc View Source ExitKeyword(ValidationContext, String, Boolean) Adds a message to indicate a keyword has finished processing. Decrements indention. Declaration public static void ExitKeyword(this ValidationContext context, string keyword, bool valid) Parameters Type Name Description ValidationContext context The validation context. System.String keyword The keyword name System.Boolean valid Whether the validation was successful | Improve this Doc View Source GetValidityString(Boolean) Gets the valid or invalid strings. Declaration public static string GetValidityString(this bool isValid) Parameters Type Name Description System.Boolean isValid The validity. Returns Type Description System.String \"valid\" for true ; \"invalid\" for false . | Improve this Doc View Source Log(ValidationContext, Func<String>) Logs a message. Declaration public static void Log(this ValidationContext context, Func<string> message) Parameters Type Name Description ValidationContext context The validation context. Func < System.String > message The message. | Improve this Doc View Source NotApplicable(ValidationContext, Func<String>) Adds a message to indicate that a keyword doesn't apply and why. Decrements indention. Declaration public static void NotApplicable(this ValidationContext context, Func<string> reason) Parameters Type Name Description ValidationContext context The validation context. Func < System.String > reason The reason | Improve this Doc View Source WrongValueKind(ValidationContext, JsonValueKind) Adds a message to indicate that a keyword doesn't apply and why. Decrements indention. Declaration public static void WrongValueKind(this ValidationContext context, JsonValueKind kind) Parameters Type Name Description ValidationContext context The validation context. JsonValueKind kind The value kind"
  },
  "api/Json.Schema.MaxContainsKeyword.html": {
    "href": "api/Json.Schema.MaxContainsKeyword.html",
    "title": "Class MaxContainsKeyword",
    "keywords": "Class MaxContainsKeyword Handles maxContains . Inheritance System.Object MaxContainsKeyword Implements IJsonSchemaKeyword IEquatable < MaxContainsKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class MaxContainsKeyword : object, IJsonSchemaKeyword, IEquatable<MaxContainsKeyword> Constructors | Improve this Doc View Source MaxContainsKeyword(UInt32) Creates a new MaxContainsKeyword . Declaration public MaxContainsKeyword(uint value) Parameters Type Name Description System.UInt32 value The maximum expected matching items. Properties | Improve this Doc View Source Value The maximum expected matching items. Declaration public uint Value { get; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Equals(MaxContainsKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MaxContainsKeyword other) Parameters Type Name Description MaxContainsKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.MaximumKeyword.html": {
    "href": "api/Json.Schema.MaximumKeyword.html",
    "title": "Class MaximumKeyword",
    "keywords": "Class MaximumKeyword Handles maximum . Inheritance System.Object MaximumKeyword Implements IJsonSchemaKeyword IEquatable < MaximumKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class MaximumKeyword : object, IJsonSchemaKeyword, IEquatable<MaximumKeyword> Constructors | Improve this Doc View Source MaximumKeyword(Decimal) Creates a new MaximumKeyword . Declaration public MaximumKeyword(decimal value) Parameters Type Name Description System.Decimal value The maximum expected value. Properties | Improve this Doc View Source Value The maximum expected value. Declaration public decimal Value { get; } Property Value Type Description System.Decimal Methods | Improve this Doc View Source Equals(MaximumKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MaximumKeyword other) Parameters Type Name Description MaximumKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.MaxItemsKeyword.html": {
    "href": "api/Json.Schema.MaxItemsKeyword.html",
    "title": "Class MaxItemsKeyword",
    "keywords": "Class MaxItemsKeyword Handles maxItems . Inheritance System.Object MaxItemsKeyword Implements IJsonSchemaKeyword IEquatable < MaxItemsKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class MaxItemsKeyword : object, IJsonSchemaKeyword, IEquatable<MaxItemsKeyword> Constructors | Improve this Doc View Source MaxItemsKeyword(UInt32) Creates a new MaxItemsKeyword . Declaration public MaxItemsKeyword(uint value) Parameters Type Name Description System.UInt32 value The expected maximum number of items. Properties | Improve this Doc View Source Value The expected maximum number of items. Declaration public uint Value { get; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Equals(MaxItemsKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MaxItemsKeyword other) Parameters Type Name Description MaxItemsKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.MaxLengthKeyword.html": {
    "href": "api/Json.Schema.MaxLengthKeyword.html",
    "title": "Class MaxLengthKeyword",
    "keywords": "Class MaxLengthKeyword Handles maxLength . Inheritance System.Object MaxLengthKeyword Implements IJsonSchemaKeyword IEquatable < MaxLengthKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class MaxLengthKeyword : object, IJsonSchemaKeyword, IEquatable<MaxLengthKeyword> Constructors | Improve this Doc View Source MaxLengthKeyword(UInt32) Creates a new MaxLengthKeyword . Declaration public MaxLengthKeyword(uint value) Parameters Type Name Description System.UInt32 value The maximum expected string length. Properties | Improve this Doc View Source Value The maximum expected string length. Declaration public uint Value { get; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Equals(MaxLengthKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MaxLengthKeyword other) Parameters Type Name Description MaxLengthKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.MaxPropertiesKeyword.html": {
    "href": "api/Json.Schema.MaxPropertiesKeyword.html",
    "title": "Class MaxPropertiesKeyword",
    "keywords": "Class MaxPropertiesKeyword Handles maxProperties . Inheritance System.Object MaxPropertiesKeyword Implements IJsonSchemaKeyword IEquatable < MaxPropertiesKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class MaxPropertiesKeyword : object, IJsonSchemaKeyword, IEquatable<MaxPropertiesKeyword> Constructors | Improve this Doc View Source MaxPropertiesKeyword(UInt32) Creates a new MaxPropertiesKeyword . Declaration public MaxPropertiesKeyword(uint value) Parameters Type Name Description System.UInt32 value The maximum expected number of properties. Properties | Improve this Doc View Source Value The maximum expected number of properties. Declaration public uint Value { get; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Equals(MaxPropertiesKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MaxPropertiesKeyword other) Parameters Type Name Description MaxPropertiesKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.MetaSchemas.html": {
    "href": "api/Json.Schema.MetaSchemas.html",
    "title": "Class MetaSchemas",
    "keywords": "Class MetaSchemas Exposes the meta-schemas for the supported drafts. Inheritance System.Object MetaSchemas Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public static class MetaSchemas : object Fields | Improve this Doc View Source Applicator201909 The Draft 2019-09 Applicator meta-schema. Declaration public static readonly JsonSchema Applicator201909 Field Value Type Description JsonSchema | Improve this Doc View Source Applicator201909Id The Draft 2019-09 Applicator meta-schema ID. Declaration public static readonly Uri Applicator201909Id Field Value Type Description Uri | Improve this Doc View Source Applicator202012 The Draft 2020-12 Applicator meta-schema. Declaration public static readonly JsonSchema Applicator202012 Field Value Type Description JsonSchema | Improve this Doc View Source Applicator202012Id The Draft 2020-12 Applicator meta-schema ID. Declaration public static readonly Uri Applicator202012Id Field Value Type Description Uri | Improve this Doc View Source Content201909 The Draft 2019-09 Content meta-schema. Declaration public static readonly JsonSchema Content201909 Field Value Type Description JsonSchema | Improve this Doc View Source Content201909Id The Draft 2019-09 Content meta-schema ID. Declaration public static readonly Uri Content201909Id Field Value Type Description Uri | Improve this Doc View Source Content202012 The Draft 2020-12 Content meta-schema. Declaration public static readonly JsonSchema Content202012 Field Value Type Description JsonSchema | Improve this Doc View Source Content202012Id The Draft 2020-12 Content meta-schema ID. Declaration public static readonly Uri Content202012Id Field Value Type Description Uri | Improve this Doc View Source Core201909 The Draft 2019-09 Core meta-schema. Declaration public static readonly JsonSchema Core201909 Field Value Type Description JsonSchema | Improve this Doc View Source Core201909Id The Draft 2019-09 Core meta-schema ID. Declaration public static readonly Uri Core201909Id Field Value Type Description Uri | Improve this Doc View Source Core202012 The Draft 2020-12 Core meta-schema. Declaration public static readonly JsonSchema Core202012 Field Value Type Description JsonSchema | Improve this Doc View Source Core202012Id The Draft 2020-12 Core meta-schema ID. Declaration public static readonly Uri Core202012Id Field Value Type Description Uri | Improve this Doc View Source Draft201909 The Draft 2019-09 meta-schema. Declaration public static readonly JsonSchema Draft201909 Field Value Type Description JsonSchema | Improve this Doc View Source Draft201909Id The Draft 2019-09 meta-schema ID. Declaration public static readonly Uri Draft201909Id Field Value Type Description Uri | Improve this Doc View Source Draft202012 The Draft 2020-12 meta-schema. Declaration public static readonly JsonSchema Draft202012 Field Value Type Description JsonSchema | Improve this Doc View Source Draft202012Id The Draft 2020-12 meta-schema ID. Declaration public static readonly Uri Draft202012Id Field Value Type Description Uri | Improve this Doc View Source Draft6 The Draft 6 Core meta-schema. Declaration public static readonly JsonSchema Draft6 Field Value Type Description JsonSchema | Improve this Doc View Source Draft6Id The Draft 6 Core meta-schema ID. Declaration public static readonly Uri Draft6Id Field Value Type Description Uri | Improve this Doc View Source Draft7 The Draft 7 Core meta-schema. Declaration public static readonly JsonSchema Draft7 Field Value Type Description JsonSchema | Improve this Doc View Source Draft7Id The Draft 7 Core meta-schema ID. Declaration public static readonly Uri Draft7Id Field Value Type Description Uri | Improve this Doc View Source Format201909 The Draft 2019-09 Format meta-schema. Declaration public static readonly JsonSchema Format201909 Field Value Type Description JsonSchema | Improve this Doc View Source Format201909Id The Draft 2019-09 Format meta-schema ID. Declaration public static readonly Uri Format201909Id Field Value Type Description Uri | Improve this Doc View Source FormatAnnotation202012 The Draft 2020-12 Format-Annotation meta-schema. Declaration public static readonly JsonSchema FormatAnnotation202012 Field Value Type Description JsonSchema | Improve this Doc View Source FormatAnnotation202012Id The Draft 2020-12 Format-Annotation meta-schema ID. Declaration public static readonly Uri FormatAnnotation202012Id Field Value Type Description Uri | Improve this Doc View Source FormatAssertion202012 The Draft 2020-12 Format-Assertion meta-schema. Declaration public static readonly JsonSchema FormatAssertion202012 Field Value Type Description JsonSchema | Improve this Doc View Source FormatAssertion202012Id The Draft 2020-12 Format-Assertion meta-schema ID. Declaration public static readonly Uri FormatAssertion202012Id Field Value Type Description Uri | Improve this Doc View Source Metadata201909 The Draft 2019-09 Metadata meta-schema. Declaration public static readonly JsonSchema Metadata201909 Field Value Type Description JsonSchema | Improve this Doc View Source Metadata201909Id The Draft 2019-09 Metadata meta-schema ID. Declaration public static readonly Uri Metadata201909Id Field Value Type Description Uri | Improve this Doc View Source Metadata202012 The Draft 2020-12 Metadata meta-schema. Declaration public static readonly JsonSchema Metadata202012 Field Value Type Description JsonSchema | Improve this Doc View Source Metadata202012Id The Draft 2020-12 Metadata meta-schema ID. Declaration public static readonly Uri Metadata202012Id Field Value Type Description Uri | Improve this Doc View Source Unevaluated202012 The Draft 2020-12 Unevaluated meta-schema. Declaration public static readonly JsonSchema Unevaluated202012 Field Value Type Description JsonSchema | Improve this Doc View Source Unevaluated202012Id The Draft 2020-12 Unevaluated meta-schema ID. Declaration public static readonly Uri Unevaluated202012Id Field Value Type Description Uri | Improve this Doc View Source Validation201909 The Draft 2019-09 Validation meta-schema. Declaration public static readonly JsonSchema Validation201909 Field Value Type Description JsonSchema | Improve this Doc View Source Validation201909Id The Draft 2019-09 Validation meta-schema ID. Declaration public static readonly Uri Validation201909Id Field Value Type Description Uri | Improve this Doc View Source Validation202012 The Draft 2020-12 Validation meta-schema. Declaration public static readonly JsonSchema Validation202012 Field Value Type Description JsonSchema | Improve this Doc View Source Validation202012Id The Draft 2020-12 Validation meta-schema ID. Declaration public static readonly Uri Validation202012Id Field Value Type Description Uri"
  },
  "api/Json.Schema.MinContainsKeyword.html": {
    "href": "api/Json.Schema.MinContainsKeyword.html",
    "title": "Class MinContainsKeyword",
    "keywords": "Class MinContainsKeyword Handles minContains . Inheritance System.Object MinContainsKeyword Implements IJsonSchemaKeyword IEquatable < MinContainsKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class MinContainsKeyword : object, IJsonSchemaKeyword, IEquatable<MinContainsKeyword> Constructors | Improve this Doc View Source MinContainsKeyword(UInt32) Creates a new MinContainsKeyword . Declaration public MinContainsKeyword(uint value) Parameters Type Name Description System.UInt32 value The minimum expected matching items. Properties | Improve this Doc View Source Value The minimum expected matching items. Declaration public uint Value { get; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Equals(MinContainsKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MinContainsKeyword other) Parameters Type Name Description MinContainsKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.MinimumKeyword.html": {
    "href": "api/Json.Schema.MinimumKeyword.html",
    "title": "Class MinimumKeyword",
    "keywords": "Class MinimumKeyword Handles minimum . Inheritance System.Object MinimumKeyword Implements IJsonSchemaKeyword IEquatable < MinimumKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class MinimumKeyword : object, IJsonSchemaKeyword, IEquatable<MinimumKeyword> Constructors | Improve this Doc View Source MinimumKeyword(Decimal) Creates a new MinimumKeyword . Declaration public MinimumKeyword(decimal value) Parameters Type Name Description System.Decimal value The minimum expected value. Properties | Improve this Doc View Source Value The minimum expected value. Declaration public decimal Value { get; } Property Value Type Description System.Decimal Methods | Improve this Doc View Source Equals(MinimumKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MinimumKeyword other) Parameters Type Name Description MinimumKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.MinItemsKeyword.html": {
    "href": "api/Json.Schema.MinItemsKeyword.html",
    "title": "Class MinItemsKeyword",
    "keywords": "Class MinItemsKeyword Handles minItems . Inheritance System.Object MinItemsKeyword Implements IJsonSchemaKeyword IEquatable < MinItemsKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class MinItemsKeyword : object, IJsonSchemaKeyword, IEquatable<MinItemsKeyword> Constructors | Improve this Doc View Source MinItemsKeyword(UInt32) Create a new MinItemsKeyword . Declaration public MinItemsKeyword(uint value) Parameters Type Name Description System.UInt32 value The expected minimum number of items. Properties | Improve this Doc View Source Value The expected minimum number of items. Declaration public uint Value { get; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Equals(MinItemsKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MinItemsKeyword other) Parameters Type Name Description MinItemsKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.MinLengthKeyword.html": {
    "href": "api/Json.Schema.MinLengthKeyword.html",
    "title": "Class MinLengthKeyword",
    "keywords": "Class MinLengthKeyword Handles minLength . Inheritance System.Object MinLengthKeyword Implements IJsonSchemaKeyword IEquatable < MinLengthKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class MinLengthKeyword : object, IJsonSchemaKeyword, IEquatable<MinLengthKeyword> Constructors | Improve this Doc View Source MinLengthKeyword(UInt32) Creates a new MinLengthKeyword . Declaration public MinLengthKeyword(uint value) Parameters Type Name Description System.UInt32 value The minimum expected string length. Properties | Improve this Doc View Source Value The minimum expected string length. Declaration public uint Value { get; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Equals(MinLengthKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MinLengthKeyword other) Parameters Type Name Description MinLengthKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.MinPropertiesKeyword.html": {
    "href": "api/Json.Schema.MinPropertiesKeyword.html",
    "title": "Class MinPropertiesKeyword",
    "keywords": "Class MinPropertiesKeyword Handles minProperties . Inheritance System.Object MinPropertiesKeyword Implements IJsonSchemaKeyword IEquatable < MinPropertiesKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class MinPropertiesKeyword : object, IJsonSchemaKeyword, IEquatable<MinPropertiesKeyword> Constructors | Improve this Doc View Source MinPropertiesKeyword(UInt32) Creates a new MinPropertiesKeyword . Declaration public MinPropertiesKeyword(uint value) Parameters Type Name Description System.UInt32 value The minimum expected number of properties. Properties | Improve this Doc View Source Value The minimum expected number of properties. Declaration public uint Value { get; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source Equals(MinPropertiesKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MinPropertiesKeyword other) Parameters Type Name Description MinPropertiesKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.MultipleOfKeyword.html": {
    "href": "api/Json.Schema.MultipleOfKeyword.html",
    "title": "Class MultipleOfKeyword",
    "keywords": "Class MultipleOfKeyword Handles multipleOf . Inheritance System.Object MultipleOfKeyword Implements IJsonSchemaKeyword IEquatable < MultipleOfKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class MultipleOfKeyword : object, IJsonSchemaKeyword, IEquatable<MultipleOfKeyword> Constructors | Improve this Doc View Source MultipleOfKeyword(Decimal) Creates a new MultipleOfKeyword . Declaration public MultipleOfKeyword(decimal value) Parameters Type Name Description System.Decimal value The expected divisor of a value. Properties | Improve this Doc View Source Value The expected divisor of a value. Declaration public decimal Value { get; } Property Value Type Description System.Decimal Methods | Improve this Doc View Source Equals(MultipleOfKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MultipleOfKeyword other) Parameters Type Name Description MultipleOfKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.NotKeyword.html": {
    "href": "api/Json.Schema.NotKeyword.html",
    "title": "Class NotKeyword",
    "keywords": "Class NotKeyword Handles not . Inheritance System.Object NotKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable < NotKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class NotKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaContainer, IEquatable<NotKeyword> Constructors | Improve this Doc View Source NotKeyword(JsonSchema) Creates a new NotKeyword . Declaration public NotKeyword(JsonSchema value) Parameters Type Name Description JsonSchema value The schema to not match. Properties | Improve this Doc View Source Schema The schema to not match. Declaration public JsonSchema Schema { get; } Property Value Type Description JsonSchema Methods | Improve this Doc View Source Equals(NotKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(NotKeyword other) Parameters Type Name Description NotKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.OneOfKeyword.html": {
    "href": "api/Json.Schema.OneOfKeyword.html",
    "title": "Class OneOfKeyword",
    "keywords": "Class OneOfKeyword Handles oneOf . Inheritance System.Object OneOfKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaCollector IEquatable < OneOfKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class OneOfKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaCollector, IEquatable<OneOfKeyword> Constructors | Improve this Doc View Source OneOfKeyword(IEnumerable<JsonSchema>) Creates a new OneOfKeyword . Declaration public OneOfKeyword(IEnumerable<JsonSchema> values) Parameters Type Name Description IEnumerable < JsonSchema > values The keywords schema collection. | Improve this Doc View Source OneOfKeyword(JsonSchema[]) Creates a new OneOfKeyword . Declaration public OneOfKeyword(params JsonSchema[] values) Parameters Type Name Description JsonSchema [] values The keywords schema collection. Properties | Improve this Doc View Source Schemas The keywords schema collection. Declaration public IReadOnlyList<JsonSchema> Schemas { get; } Property Value Type Description IReadOnlyList < JsonSchema > Methods | Improve this Doc View Source Equals(OneOfKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(OneOfKeyword other) Parameters Type Name Description OneOfKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable ISchemaCollector IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.OutputFormat.html": {
    "href": "api/Json.Schema.OutputFormat.html",
    "title": "Enum OutputFormat",
    "keywords": "Enum OutputFormat Enumerates the available output formats. Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public enum OutputFormat : int Fields Name Description Basic Indicates that all nodes will be listed as children of the top node. Detailed Indicates that nodes will be organized in a condensed structure that mimicks the schema. Flag Indicates that only a single pass/fail node will be returned. Verbose Indicates that nodes will match the structure of the schema. Extension Methods JsonDocumentExtensions.ToJsonDocument<OutputFormat>(Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.PatternKeyword.html": {
    "href": "api/Json.Schema.PatternKeyword.html",
    "title": "Class PatternKeyword",
    "keywords": "Class PatternKeyword Handles pattern . Inheritance System.Object PatternKeyword Implements IJsonSchemaKeyword IEquatable < PatternKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class PatternKeyword : object, IJsonSchemaKeyword, IEquatable<PatternKeyword> Constructors | Improve this Doc View Source PatternKeyword(Regex) Creates a new PatternKeyword . Declaration public PatternKeyword(Regex value) Parameters Type Name Description Regex value The regular expression. Properties | Improve this Doc View Source Value The regular expression. Declaration public Regex Value { get; } Property Value Type Description Regex Methods | Improve this Doc View Source Equals(PatternKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(PatternKeyword other) Parameters Type Name Description PatternKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.PatternPropertiesKeyword.html": {
    "href": "api/Json.Schema.PatternPropertiesKeyword.html",
    "title": "Class PatternPropertiesKeyword",
    "keywords": "Class PatternPropertiesKeyword Handles patternProperties . Inheritance System.Object PatternPropertiesKeyword Implements IJsonSchemaKeyword IRefResolvable IKeyedSchemaCollector IEquatable < PatternPropertiesKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class PatternPropertiesKeyword : object, IJsonSchemaKeyword, IRefResolvable, IKeyedSchemaCollector, IEquatable<PatternPropertiesKeyword> Constructors | Improve this Doc View Source PatternPropertiesKeyword(IReadOnlyDictionary<Regex, JsonSchema>) Creates a new PatternPropertiesKeyword . Declaration public PatternPropertiesKeyword(IReadOnlyDictionary<Regex, JsonSchema> values) Parameters Type Name Description IReadOnlyDictionary < Regex , JsonSchema > values The pattern-keyed schemas. Properties | Improve this Doc View Source Patterns The pattern-keyed schemas. Declaration public IReadOnlyDictionary<Regex, JsonSchema> Patterns { get; } Property Value Type Description IReadOnlyDictionary < Regex , JsonSchema > Methods | Improve this Doc View Source Equals(PatternPropertiesKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(PatternPropertiesKeyword other) Parameters Type Name Description PatternPropertiesKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IKeyedSchemaCollector.Schemas Declaration IReadOnlyDictionary<string, JsonSchema> IKeyedSchemaCollector.Schemas { get; } Returns Type Description IReadOnlyDictionary < System.String , JsonSchema > | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable IKeyedSchemaCollector IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.PredicateFormat.html": {
    "href": "api/Json.Schema.PredicateFormat.html",
    "title": "Class PredicateFormat",
    "keywords": "Class PredicateFormat A Format that uses a predicate for evaluation. Inheritance System.Object Format PredicateFormat Inherited Members Format.Key Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class PredicateFormat : Format Constructors | Improve this Doc View Source PredicateFormat(String, Func<JsonElement, Boolean>) Creates a new PredicateFormat . Declaration public PredicateFormat(string key, Func<JsonElement, bool> predicate) Parameters Type Name Description System.String key The format key. Func < JsonElement , System.Boolean > predicate The predicate. Methods | Improve this Doc View Source Validate(JsonElement) Validates an instance against a format. Declaration public override bool Validate(JsonElement element) Parameters Type Name Description JsonElement element The element to validate. Returns Type Description System.Boolean The result of the predicate. Overrides Format.Validate(JsonElement) Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.PrefixItemsKeyword.html": {
    "href": "api/Json.Schema.PrefixItemsKeyword.html",
    "title": "Class PrefixItemsKeyword",
    "keywords": "Class PrefixItemsKeyword Handles items . Inheritance System.Object PrefixItemsKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaCollector IEquatable < PrefixItemsKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class PrefixItemsKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaCollector, IEquatable<PrefixItemsKeyword> Constructors | Improve this Doc View Source PrefixItemsKeyword(IEnumerable<JsonSchema>) Creates a new PrefixItemsKeyword . Declaration public PrefixItemsKeyword(IEnumerable<JsonSchema> values) Parameters Type Name Description IEnumerable < JsonSchema > values The collection of schemas for the \"schema array\" form. | Improve this Doc View Source PrefixItemsKeyword(JsonSchema[]) Creates a new PrefixItemsKeyword . Declaration public PrefixItemsKeyword(params JsonSchema[] values) Parameters Type Name Description JsonSchema [] values The collection of schemas for the \"schema array\" form. Remarks Using the params constructor to build an array-form items keyword with a single schema will confuse the compiler. To achieve this, you'll need to explicitly specify the array. Properties | Improve this Doc View Source ArraySchemas The collection of schemas for the \"schema array\" form. Declaration public IReadOnlyList<JsonSchema> ArraySchemas { get; } Property Value Type Description IReadOnlyList < JsonSchema > Methods | Improve this Doc View Source Equals(PrefixItemsKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(PrefixItemsKeyword other) Parameters Type Name Description PrefixItemsKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable | Improve this Doc View Source ISchemaCollector.Schemas Declaration IReadOnlyList<JsonSchema> ISchemaCollector.Schemas { get; } Returns Type Description IReadOnlyList < JsonSchema > Implements IJsonSchemaKeyword IRefResolvable ISchemaCollector IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.PropertiesKeyword.html": {
    "href": "api/Json.Schema.PropertiesKeyword.html",
    "title": "Class PropertiesKeyword",
    "keywords": "Class PropertiesKeyword Handles properties . Inheritance System.Object PropertiesKeyword Implements IJsonSchemaKeyword IRefResolvable IKeyedSchemaCollector IEquatable < PropertiesKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class PropertiesKeyword : object, IJsonSchemaKeyword, IRefResolvable, IKeyedSchemaCollector, IEquatable<PropertiesKeyword> Constructors | Improve this Doc View Source PropertiesKeyword(IReadOnlyDictionary<String, JsonSchema>) Creates a new PropertiesKeyword . Declaration public PropertiesKeyword(IReadOnlyDictionary<string, JsonSchema> values) Parameters Type Name Description IReadOnlyDictionary < System.String , JsonSchema > values The property schemas. Properties | Improve this Doc View Source Properties The property schemas. Declaration public IReadOnlyDictionary<string, JsonSchema> Properties { get; } Property Value Type Description IReadOnlyDictionary < System.String , JsonSchema > Methods | Improve this Doc View Source Equals(PropertiesKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(PropertiesKeyword other) Parameters Type Name Description PropertiesKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IKeyedSchemaCollector.Schemas Declaration IReadOnlyDictionary<string, JsonSchema> IKeyedSchemaCollector.Schemas { get; } Returns Type Description IReadOnlyDictionary < System.String , JsonSchema > | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable IKeyedSchemaCollector IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.PropertyNamesKeyword.html": {
    "href": "api/Json.Schema.PropertyNamesKeyword.html",
    "title": "Class PropertyNamesKeyword",
    "keywords": "Class PropertyNamesKeyword Handles propertyNames . Inheritance System.Object PropertyNamesKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable < PropertyNamesKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class PropertyNamesKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaContainer, IEquatable<PropertyNamesKeyword> Constructors | Improve this Doc View Source PropertyNamesKeyword(JsonSchema) Creates a new PropertyNamesKeyword . Declaration public PropertyNamesKeyword(JsonSchema value) Parameters Type Name Description JsonSchema value The schema to match. Properties | Improve this Doc View Source Schema The schema to match. Declaration public JsonSchema Schema { get; } Property Value Type Description JsonSchema Methods | Improve this Doc View Source Equals(PropertyNamesKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(PropertyNamesKeyword other) Parameters Type Name Description PropertyNamesKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ReadOnlyKeyword.html": {
    "href": "api/Json.Schema.ReadOnlyKeyword.html",
    "title": "Class ReadOnlyKeyword",
    "keywords": "Class ReadOnlyKeyword Handles readOnly . Inheritance System.Object ReadOnlyKeyword Implements IJsonSchemaKeyword IEquatable < ReadOnlyKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ReadOnlyKeyword : object, IJsonSchemaKeyword, IEquatable<ReadOnlyKeyword> Constructors | Improve this Doc View Source ReadOnlyKeyword(Boolean) Creates a new ReadOnlyKeyword . Declaration public ReadOnlyKeyword(bool value) Parameters Type Name Description System.Boolean value Whether the instance is read-only. Properties | Improve this Doc View Source Value Whether the instance is read-only. Declaration public bool Value { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(ReadOnlyKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ReadOnlyKeyword other) Parameters Type Name Description ReadOnlyKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.RecursiveAnchorKeyword.html": {
    "href": "api/Json.Schema.RecursiveAnchorKeyword.html",
    "title": "Class RecursiveAnchorKeyword",
    "keywords": "Class RecursiveAnchorKeyword Handles $recursiveAnchor . Inheritance System.Object RecursiveAnchorKeyword Implements IJsonSchemaKeyword IEquatable < RecursiveAnchorKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class RecursiveAnchorKeyword : object, IJsonSchemaKeyword, IEquatable<RecursiveAnchorKeyword> Constructors | Improve this Doc View Source RecursiveAnchorKeyword() Creates a new RecursiveAnchorKeyword defaulting the value to true . Declaration public RecursiveAnchorKeyword() | Improve this Doc View Source RecursiveAnchorKeyword(Boolean) Creates a new RecursiveAnchorKeyword . Declaration public RecursiveAnchorKeyword(bool value) Parameters Type Name Description System.Boolean value The value. Properties | Improve this Doc View Source Value Gets the value. Declaration public bool Value { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(RecursiveAnchorKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(RecursiveAnchorKeyword other) Parameters Type Name Description RecursiveAnchorKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.RecursiveRefKeyword.html": {
    "href": "api/Json.Schema.RecursiveRefKeyword.html",
    "title": "Class RecursiveRefKeyword",
    "keywords": "Class RecursiveRefKeyword Handles $recursiveRef . Inheritance System.Object RecursiveRefKeyword Implements IJsonSchemaKeyword IEquatable < RecursiveRefKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class RecursiveRefKeyword : object, IJsonSchemaKeyword, IEquatable<RecursiveRefKeyword> Constructors | Improve this Doc View Source RecursiveRefKeyword(Uri) Creates a new RecursiveRefKeyword . Declaration public RecursiveRefKeyword(Uri value) Parameters Type Name Description Uri value The URI. Properties | Improve this Doc View Source Reference The URI reference. Declaration public Uri Reference { get; } Property Value Type Description Uri Methods | Improve this Doc View Source Equals(RecursiveRefKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(RecursiveRefKeyword other) Parameters Type Name Description RecursiveRefKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.RefKeyword.html": {
    "href": "api/Json.Schema.RefKeyword.html",
    "title": "Class RefKeyword",
    "keywords": "Class RefKeyword Handles $ref . Inheritance System.Object RefKeyword Implements IJsonSchemaKeyword IEquatable < RefKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class RefKeyword : object, IJsonSchemaKeyword, IEquatable<RefKeyword> Constructors | Improve this Doc View Source RefKeyword(Uri) Creates a new RefKeyword . Declaration public RefKeyword(Uri value) Parameters Type Name Description Uri value The URI reference. Properties | Improve this Doc View Source Reference The URI reference. Declaration public Uri Reference { get; } Property Value Type Description Uri Methods | Improve this Doc View Source Equals(RefKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(RefKeyword other) Parameters Type Name Description RefKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.RegexFormat.html": {
    "href": "api/Json.Schema.RegexFormat.html",
    "title": "Class RegexFormat",
    "keywords": "Class RegexFormat A regular-expression-based format. Inheritance System.Object Format RegexFormat Inherited Members Format.Key Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class RegexFormat : Format Constructors | Improve this Doc View Source RegexFormat(String, String) Creates a new RegexFormat . Declaration public RegexFormat(string key, string regex) Parameters Type Name Description System.String key The format key. System.String regex The regular expression. Methods | Improve this Doc View Source Validate(JsonElement) Validates an instance against a format. Declaration public override bool Validate(JsonElement element) Parameters Type Name Description JsonElement element The element to validate. Returns Type Description System.Boolean true . Override to return another value. Overrides Format.Validate(JsonElement) Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.RequiredKeyword.html": {
    "href": "api/Json.Schema.RequiredKeyword.html",
    "title": "Class RequiredKeyword",
    "keywords": "Class RequiredKeyword Handles requires . Inheritance System.Object RequiredKeyword Implements IJsonSchemaKeyword IEquatable < RequiredKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class RequiredKeyword : object, IJsonSchemaKeyword, IEquatable<RequiredKeyword> Constructors | Improve this Doc View Source RequiredKeyword(IEnumerable<String>) Creates a new RequiredKeyword . Declaration public RequiredKeyword(IEnumerable<string> values) Parameters Type Name Description IEnumerable < System.String > values The required properties. | Improve this Doc View Source RequiredKeyword(String[]) Creates a new RequiredKeyword . Declaration public RequiredKeyword(params string[] values) Parameters Type Name Description System.String [] values The required properties. Properties | Improve this Doc View Source Properties The required properties. Declaration public IReadOnlyList<string> Properties { get; } Property Value Type Description IReadOnlyList < System.String > Methods | Improve this Doc View Source Equals(RequiredKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(RequiredKeyword other) Parameters Type Name Description RequiredKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.SchemaDraftAttribute.html": {
    "href": "api/Json.Schema.SchemaDraftAttribute.html",
    "title": "Class SchemaDraftAttribute",
    "keywords": "Class SchemaDraftAttribute Indicates which JSON Schema draft versions are supported by a keyword. Inheritance System.Object SchemaDraftAttribute Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class SchemaDraftAttribute : Attribute Constructors | Improve this Doc View Source SchemaDraftAttribute(Draft) Creates a new SchemaDraftAttribute . Declaration public SchemaDraftAttribute(Draft draft) Parameters Type Name Description Draft draft The supported draft. Properties | Improve this Doc View Source Draft The supported draft. Declaration public Draft Draft { get; } Property Value Type Description Draft Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.SchemaKeyword.html": {
    "href": "api/Json.Schema.SchemaKeyword.html",
    "title": "Class SchemaKeyword",
    "keywords": "Class SchemaKeyword Handles $schema . Inheritance System.Object SchemaKeyword Implements IJsonSchemaKeyword IEquatable < SchemaKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class SchemaKeyword : object, IJsonSchemaKeyword, IEquatable<SchemaKeyword> Constructors | Improve this Doc View Source SchemaKeyword(Uri) Creates a new SchemaKeyword . Declaration public SchemaKeyword(Uri schema) Parameters Type Name Description Uri schema The meta-schema ID. Properties | Improve this Doc View Source Schema The meta-schema ID. Declaration public Uri Schema { get; } Property Value Type Description Uri Methods | Improve this Doc View Source Equals(SchemaKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(SchemaKeyword other) Parameters Type Name Description SchemaKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.SchemaKeywordAttribute.html": {
    "href": "api/Json.Schema.SchemaKeywordAttribute.html",
    "title": "Class SchemaKeywordAttribute",
    "keywords": "Class SchemaKeywordAttribute Indicates the keyword as it appears in a schema. Inheritance System.Object SchemaKeywordAttribute Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class SchemaKeywordAttribute : Attribute Constructors | Improve this Doc View Source SchemaKeywordAttribute(String) Creates a new SchemaKeywordAttribute . Declaration public SchemaKeywordAttribute(string name) Parameters Type Name Description System.String name Properties | Improve this Doc View Source Name The keyword name. Declaration public string Name { get; } Property Value Type Description System.String Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.SchemaKeywordRegistry.html": {
    "href": "api/Json.Schema.SchemaKeywordRegistry.html",
    "title": "Class SchemaKeywordRegistry",
    "keywords": "Class SchemaKeywordRegistry Manages which keywords are known by the system. Inheritance System.Object SchemaKeywordRegistry Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public static class SchemaKeywordRegistry : object Remarks Because the deserialization process relies on keywords being registered, this class cannot be an instance class like the other registries in this library. Therefore keywords are registered for all schemas. Methods | Improve this Doc View Source GetImplementationType(String) Gets the implementation for a given keyword name. Declaration public static Type? GetImplementationType(string keyword) Parameters Type Name Description System.String keyword The keyword name. Returns Type Description System.Nullable < Type > The keyword type, if registered; otherwise null. | Improve this Doc View Source Register<T>() Registers a new keyword type. Declaration public static void Register<T>() where T : IJsonSchemaKeyword, IEquatable<T> Type Parameters Name Description T The keyword type. | Improve this Doc View Source RegisterNullValue<T>(T) Registers a null-value for a keyword. Declaration public static void RegisterNullValue<T>(T nullKeyword) where T : IJsonSchemaKeyword Parameters Type Name Description T nullKeyword Type Parameters Name Description T Remarks This is important for keywords that accept null, like default and const . Without this step, the serializer will skip keywords that have nulls. | Improve this Doc View Source Unregister<T>() Unregisters a keyword type. Declaration public static void Unregister<T>() where T : IJsonSchemaKeyword Type Parameters Name Description T The keyword type."
  },
  "api/Json.Schema.SchemaOrPropertyList.html": {
    "href": "api/Json.Schema.SchemaOrPropertyList.html",
    "title": "Class SchemaOrPropertyList",
    "keywords": "Class SchemaOrPropertyList A holder for either a schema dependency or a requirements dependency. Inheritance System.Object SchemaOrPropertyList Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class SchemaOrPropertyList : IEquatable<SchemaOrPropertyList> Constructors | Improve this Doc View Source SchemaOrPropertyList(JsonSchema) Creates a schema dependency. Declaration public SchemaOrPropertyList(JsonSchema schema) Parameters Type Name Description JsonSchema schema The schema dependency. | Improve this Doc View Source SchemaOrPropertyList(List<String>) Creates a property dependency. Declaration public SchemaOrPropertyList(List<string> requirements) Parameters Type Name Description List < System.String > requirements The property dependency. Properties | Improve this Doc View Source Requirements The property dependency. Declaration public List<string>? Requirements { get; } Property Value Type Description System.Nullable < List < System.String >> | Improve this Doc View Source Schema The schema dependency. Declaration public JsonSchema Schema { get; } Property Value Type Description JsonSchema Methods | Improve this Doc View Source Equals(SchemaOrPropertyList) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(SchemaOrPropertyList other) Parameters Type Name Description SchemaOrPropertyList other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.SchemaPriorityAttribute.html": {
    "href": "api/Json.Schema.SchemaPriorityAttribute.html",
    "title": "Class SchemaPriorityAttribute",
    "keywords": "Class SchemaPriorityAttribute Indicates keyword priority. Inheritance System.Object SchemaPriorityAttribute Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class SchemaPriorityAttribute : Attribute Remarks Keywords are processed in priority order. This will help process multiple keywords in the proper sequence. Constructors | Improve this Doc View Source SchemaPriorityAttribute(Int32) Creates a new SchemaPriorityAttribute . Declaration public SchemaPriorityAttribute(int priority) Parameters Type Name Description System.Int32 priority The keyword priority. Properties | Improve this Doc View Source Priority The keyword priority. Declaration public int Priority { get; } Property Value Type Description System.Int32 Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.SchemaRegistry.html": {
    "href": "api/Json.Schema.SchemaRegistry.html",
    "title": "Class SchemaRegistry",
    "keywords": "Class SchemaRegistry A registry for schemas. Inheritance System.Object SchemaRegistry Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class SchemaRegistry : object Properties | Improve this Doc View Source Fetch Gets or sets a method to enable automatic download of schemas by $id URI. Declaration public Func<Uri, JsonSchema> Fetch { get; set; } Property Value Type Description Func < Uri , JsonSchema > | Improve this Doc View Source Global The global registry. Declaration public static SchemaRegistry Global { get; } Property Value Type Description SchemaRegistry Methods | Improve this Doc View Source Get(Nullable<Uri>, Nullable<String>) Gets a schema by URI ID and/or anchor. Declaration public JsonSchema Get(Uri? uri, string? anchor = null) Parameters Type Name Description System.Nullable < Uri > uri The URI ID. System.Nullable < System.String > anchor (optional) The anchor name. Returns Type Description JsonSchema The schema, if registered in either this or the global registry;4 otherwise null. | Improve this Doc View Source Register(Nullable<Uri>, JsonSchema) Registers a schema by URI. Declaration public void Register(Uri? uri, JsonSchema schema) Parameters Type Name Description System.Nullable < Uri > uri The URI ID of the schema.. JsonSchema schema The schema. | Improve this Doc View Source RegisterAnchor(Nullable<Uri>, String, JsonSchema) Registers a schema by a named anchor. Declaration public void RegisterAnchor(Uri? uri, string anchor, JsonSchema schema) Parameters Type Name Description System.Nullable < Uri > uri The URI ID of the schema. System.String anchor The anchor name. JsonSchema schema The schema. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.SchemaValueType.html": {
    "href": "api/Json.Schema.SchemaValueType.html",
    "title": "Enum SchemaValueType",
    "keywords": "Enum SchemaValueType Enumerates the schema value types. Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public enum SchemaValueType : int Remarks This is a flags-enabled enumeration, so values that support multiple types can be bit-wise OR'd | together. Fields Name Description Array Indicates the value should be an array. Boolean Indicates the value should be a boolean. Integer Indicates the value should be an integer. Null Indicates the value should be null. Number Indicates the value should be a number. Object Indicates the value should be an object. String Indicates the value should be a string. Extension Methods JsonDocumentExtensions.ToJsonDocument<SchemaValueType>(Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ThenKeyword.html": {
    "href": "api/Json.Schema.ThenKeyword.html",
    "title": "Class ThenKeyword",
    "keywords": "Class ThenKeyword Handles then . Inheritance System.Object ThenKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable < ThenKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ThenKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaContainer, IEquatable<ThenKeyword> Constructors | Improve this Doc View Source ThenKeyword(JsonSchema) Creates a new ThenKeyword . Declaration public ThenKeyword(JsonSchema value) Parameters Type Name Description JsonSchema value The schema to match. Properties | Improve this Doc View Source Schema The schema to match. Declaration public JsonSchema Schema { get; } Property Value Type Description JsonSchema Methods | Improve this Doc View Source Equals(ThenKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ThenKeyword other) Parameters Type Name Description ThenKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.TitleKeyword.html": {
    "href": "api/Json.Schema.TitleKeyword.html",
    "title": "Class TitleKeyword",
    "keywords": "Class TitleKeyword Handles title . Inheritance System.Object TitleKeyword Implements IJsonSchemaKeyword IEquatable < TitleKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class TitleKeyword : object, IJsonSchemaKeyword, IEquatable<TitleKeyword> Constructors | Improve this Doc View Source TitleKeyword(String) Creates a new TitleKeyword . Declaration public TitleKeyword(string value) Parameters Type Name Description System.String value The title. Properties | Improve this Doc View Source Value The title. Declaration public string Value { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(TitleKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(TitleKeyword other) Parameters Type Name Description TitleKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.TypeKeyword.html": {
    "href": "api/Json.Schema.TypeKeyword.html",
    "title": "Class TypeKeyword",
    "keywords": "Class TypeKeyword Handles type . Inheritance System.Object TypeKeyword Implements IJsonSchemaKeyword IEquatable < TypeKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class TypeKeyword : object, IJsonSchemaKeyword, IEquatable<TypeKeyword> Constructors | Improve this Doc View Source TypeKeyword(IEnumerable<SchemaValueType>) Creates a new TypeKeyword . Declaration public TypeKeyword(IEnumerable<SchemaValueType> types) Parameters Type Name Description IEnumerable < SchemaValueType > types The expected types. | Improve this Doc View Source TypeKeyword(SchemaValueType) Creates a new TypeKeyword . Declaration public TypeKeyword(SchemaValueType type) Parameters Type Name Description SchemaValueType type The expected type. | Improve this Doc View Source TypeKeyword(SchemaValueType[]) Creates a new TypeKeyword . Declaration public TypeKeyword(params SchemaValueType[] types) Parameters Type Name Description SchemaValueType [] types The expected types. Properties | Improve this Doc View Source Type The expected type. Declaration public SchemaValueType Type { get; } Property Value Type Description SchemaValueType Methods | Improve this Doc View Source Equals(TypeKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(TypeKeyword other) Parameters Type Name Description TypeKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.UnevaluatedItemsKeyword.html": {
    "href": "api/Json.Schema.UnevaluatedItemsKeyword.html",
    "title": "Class UnevaluatedItemsKeyword",
    "keywords": "Class UnevaluatedItemsKeyword Handles unevaluatedItems . Inheritance System.Object UnevaluatedItemsKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable < UnevaluatedItemsKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class UnevaluatedItemsKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaContainer, IEquatable<UnevaluatedItemsKeyword> Constructors | Improve this Doc View Source UnevaluatedItemsKeyword(JsonSchema) Creates a new UnevaluatedItemsKeyword . Declaration public UnevaluatedItemsKeyword(JsonSchema value) Parameters Type Name Description JsonSchema value The schema by which to validation unevaluated items. Properties | Improve this Doc View Source Schema The schema by which to validation unevaluated items. Declaration public JsonSchema Schema { get; } Property Value Type Description JsonSchema Methods | Improve this Doc View Source Equals(UnevaluatedItemsKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(UnevaluatedItemsKeyword other) Parameters Type Name Description UnevaluatedItemsKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.UnevaluatedPropertiesKeyword.html": {
    "href": "api/Json.Schema.UnevaluatedPropertiesKeyword.html",
    "title": "Class UnevaluatedPropertiesKeyword",
    "keywords": "Class UnevaluatedPropertiesKeyword Handles unevaluatedProperties . Inheritance System.Object UnevaluatedPropertiesKeyword Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable < UnevaluatedPropertiesKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class UnevaluatedPropertiesKeyword : object, IJsonSchemaKeyword, IRefResolvable, ISchemaContainer, IEquatable<UnevaluatedPropertiesKeyword> Constructors | Improve this Doc View Source UnevaluatedPropertiesKeyword(JsonSchema) Creates a new UnevaluatedPropertiesKeyword . Declaration public UnevaluatedPropertiesKeyword(JsonSchema value) Parameters Type Name Description JsonSchema value Properties | Improve this Doc View Source Schema The schema by which to validation additional properties. Declaration public JsonSchema Schema { get; } Property Value Type Description JsonSchema Methods | Improve this Doc View Source Equals(UnevaluatedPropertiesKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(UnevaluatedPropertiesKeyword other) Parameters Type Name Description UnevaluatedPropertiesKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Explicit Interface Implementations | Improve this Doc View Source IRefResolvable.RegisterSubschemas(SchemaRegistry, Uri) Declaration void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) Parameters Type Name Description SchemaRegistry registry Uri currentUri | Improve this Doc View Source IRefResolvable.ResolvePointerSegment(Nullable<String>) Declaration IRefResolvable IRefResolvable.ResolvePointerSegment(string? value) Parameters Type Name Description System.Nullable < System.String > value Returns Type Description IRefResolvable Implements IJsonSchemaKeyword IRefResolvable ISchemaContainer IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.UniqueItemsKeyword.html": {
    "href": "api/Json.Schema.UniqueItemsKeyword.html",
    "title": "Class UniqueItemsKeyword",
    "keywords": "Class UniqueItemsKeyword Handles uniqueItems . Inheritance System.Object UniqueItemsKeyword Implements IJsonSchemaKeyword IEquatable < UniqueItemsKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class UniqueItemsKeyword : object, IJsonSchemaKeyword, IEquatable<UniqueItemsKeyword> Constructors | Improve this Doc View Source UniqueItemsKeyword(Boolean) Creates a new UniqueItemsKeyword . Declaration public UniqueItemsKeyword(bool value) Parameters Type Name Description System.Boolean value Whether items should be unique. Properties | Improve this Doc View Source Value Whether items should be unique. Declaration public bool Value { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(UniqueItemsKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(UniqueItemsKeyword other) Parameters Type Name Description UniqueItemsKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.UriExtensions.html": {
    "href": "api/Json.Schema.UriExtensions.html",
    "title": "Class UriExtensions",
    "keywords": "Class UriExtensions Provides extensions on the type. Inheritance System.Object UriExtensions Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public static class UriExtensions : object Methods | Improve this Doc View Source GetParentUri(Uri) Gets the Uri to the parent object. Declaration public static Uri GetParentUri(this Uri uri) Parameters Type Name Description Uri uri The of a resource, for which the parent Uri should be retrieved. Returns Type Description Uri The parent ."
  },
  "api/Json.Schema.ValidationContext.ContextConsolidator.html": {
    "href": "api/Json.Schema.ValidationContext.ContextConsolidator.html",
    "title": "Delegate ValidationContext.ContextConsolidator",
    "keywords": "Delegate ValidationContext.ContextConsolidator Consolidates properties from multiple child contexts onto a single parent context. Generally, a keyword will define how it handles its own consolidation. This action must be registered on startup. Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public delegate void ContextConsolidator(IList<ValidationContext> sourceContexts, ValidationContext destContext); Parameters Type Name Description IList < ValidationContext > sourceContexts the source (child) contexts. ValidationContext destContext The destination (parent) context. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ValidationContext.html": {
    "href": "api/Json.Schema.ValidationContext.html",
    "title": "Class ValidationContext",
    "keywords": "Class ValidationContext Provides a single source of data for validation operations. Inheritance System.Object ValidationContext Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ValidationContext : object Properties | Improve this Doc View Source Annotations The collection of annotations collected during the validation pass. Declaration public IReadOnlyCollection<Annotation> Annotations { get; } Property Value Type Description IReadOnlyCollection < Annotation > | Improve this Doc View Source ApplyOptimizations Whether processing optimizations can be applied (output format = flag). Declaration public bool ApplyOptimizations { get; } Property Value Type Description System.Boolean | Improve this Doc View Source CurrentAnchor The current URI anchor. Declaration public JsonSchema CurrentAnchor { get; } Property Value Type Description JsonSchema | Improve this Doc View Source CurrentUri The current URI, based on $id and $anchor keywords present in the schema. Declaration public Uri? CurrentUri { get; } Property Value Type Description System.Nullable < Uri > | Improve this Doc View Source DynamicAnchors (Obsolete) Get the set of defined dynamic anchors. Declaration public Dictionary<string, JsonSchema> DynamicAnchors { get; } Property Value Type Description Dictionary < System.String , JsonSchema > | Improve this Doc View Source HasNestedContexts Whether the context has any nested contexts. Declaration public bool HasNestedContexts { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasSiblingContexts Whether the context has any sibling contexts. Declaration public bool HasSiblingContexts { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Ignore Indicates whether this context should be ignored in the validation output. (e.g. $defs ) Declaration public bool Ignore { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source InstanceLocation The current instance location relative to the instance root. Declaration public JsonPointer InstanceLocation { get; } Property Value Type Description JsonPointer | Improve this Doc View Source InstanceRoot The instance root. Declaration public JsonElement InstanceRoot { get; } Property Value Type Description JsonElement | Improve this Doc View Source IsValid Indicates whether the validation passed or failed. Declaration public bool IsValid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LocalInstance The current instance. Declaration public JsonElement LocalInstance { get; } Property Value Type Description JsonElement | Improve this Doc View Source LocalSchema The current subschema. Declaration public JsonSchema LocalSchema { get; } Property Value Type Description JsonSchema | Improve this Doc View Source Message Gets or sets error message. Declaration public string? Message { get; set; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source NestedContexts The collection of validation contexts from nested schemas. Declaration public List<ValidationContext> NestedContexts { get; } Property Value Type Description List < ValidationContext > Remarks This property is lazy and will create a value upon first access. To check whether there are any nested contexts, use HasNestedContexts . | Improve this Doc View Source Options The option set for the validation. Declaration public ValidationOptions Options { get; } Property Value Type Description ValidationOptions | Improve this Doc View Source SchemaLocation The current subschema location relative to the schema root. Declaration public JsonPointer SchemaLocation { get; } Property Value Type Description JsonPointer | Improve this Doc View Source SchemaRoot The root schema. Declaration public JsonSchema SchemaRoot { get; } Property Value Type Description JsonSchema | Improve this Doc View Source SiblingContexts The collection of validation contexts of sibling keywords that have already been processed. Declaration public List<ValidationContext> SiblingContexts { get; } Property Value Type Description List < ValidationContext > Remarks This property is lazy and will create a value upon first access. To check whether there are any nested contexts, use HasSiblingContexts . Methods | Improve this Doc View Source ConsolidateAnnotations() Invokes all consolidation actions. Should be called at the end of processing an applicator keyword. Declaration public void ConsolidateAnnotations() | Improve this Doc View Source From(ValidationContext, Nullable<JsonPointer>, Nullable<JsonElement>, Nullable<JsonPointer>, Nullable<Uri>) Creates a new context from an existing one. Use this for subschema validations. Declaration public static ValidationContext From(ValidationContext source, in JsonPointer? instanceLocation = null, in JsonElement? instance = null, in JsonPointer? subschemaLocation = null, Uri? newUri = null) Parameters Type Name Description ValidationContext source The source context. System.Nullable < JsonPointer > instanceLocation (optional) Updates the instance location. System.Nullable < JsonElement > instance (optional) Updates the instance location. System.Nullable < JsonPointer > subschemaLocation (optional) Updates the subschema location. System.Nullable < Uri > newUri (optional) Updates the current URI. Returns Type Description ValidationContext | Improve this Doc View Source RegisterConsolidationMethod(ValidationContext.ContextConsolidator) Registers a consolidation action. Declaration public static void RegisterConsolidationMethod(ValidationContext.ContextConsolidator consolidateAnnotations) Parameters Type Name Description ValidationContext.ContextConsolidator consolidateAnnotations The action. | Improve this Doc View Source SetAnnotation(String, Object) Sets an annotation. Declaration public void SetAnnotation(string owner, object value) Parameters Type Name Description System.String owner The annotation key. Typically the name of the keyword. System.Object value The annotation value. | Improve this Doc View Source TryGetAnnotation(String) Tries to get an annotation. Declaration public object? TryGetAnnotation(string key) Parameters Type Name Description System.String key The annotation key. Returns Type Description System.Nullable < System.Object > The annotation or null. Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>) LogExtensions.Log(ValidationContext, Func<String>) LogExtensions.EnterKeyword(ValidationContext, String) LogExtensions.ExitKeyword(ValidationContext, String) LogExtensions.ExitKeyword(ValidationContext, String, Boolean) LogExtensions.WrongValueKind(ValidationContext, JsonValueKind) LogExtensions.NotApplicable(ValidationContext, Func<String>)"
  },
  "api/Json.Schema.ValidationOptions.html": {
    "href": "api/Json.Schema.ValidationOptions.html",
    "title": "Class ValidationOptions",
    "keywords": "Class ValidationOptions Allows configuration of the validation process. Inheritance System.Object ValidationOptions Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ValidationOptions : object Constructors | Improve this Doc View Source ValidationOptions() Create a new instance of the ValidationOptions class. Declaration public ValidationOptions() Properties | Improve this Doc View Source Default The default settings. Declaration public static ValidationOptions Default { get; } Property Value Type Description ValidationOptions | Improve this Doc View Source DefaultBaseUri Specifies a default URI to be used when a schema is missing a Declaration public Uri DefaultBaseUri { get; set; } Property Value Type Description Uri | Improve this Doc View Source Log Gets or sets a log which will output processing information. Declaration public ILog Log { get; set; } Property Value Type Description ILog | Improve this Doc View Source LogIndentLevel Gets or sets the indent level for the log. Declaration public int LogIndentLevel { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source OutputFormat Specifies the output format. Declaration public OutputFormat OutputFormat { get; set; } Property Value Type Description OutputFormat | Improve this Doc View Source RequireFormatValidation Specifies whether the format keyword should ber required to provide validation results. Default is false, which just produces annotations for drafts 2019-09 and prior or follows the behavior set forth by the format-annotation vocabulary requirement in the $vocabulary keyword in a meta-schema declaring draft 2020-12. Declaration public bool RequireFormatValidation { get; set; } Property Value Type Description System.Boolean Remarks This property replaces the now obsolete ValidateFormat . | Improve this Doc View Source SchemaRegistry The local schema registry. If a schema is not found here, it will automatically check the global registry as well. Declaration public SchemaRegistry SchemaRegistry { get; } Property Value Type Description SchemaRegistry | Improve this Doc View Source ValidateAs Indicates which schema draft to process as. This will filter the keywords of a schema based on their support. Declaration public Draft ValidateAs { get; set; } Property Value Type Description Draft | Improve this Doc View Source ValidateFormat Obsolete. Use RequireFormatValidation instead with the same semantics. Declaration public bool ValidateFormat { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ValidateMetaSchema Indicates whether the schema should be validated against its $schema value. this is not typically necessary. Declaration public bool ValidateMetaSchema { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source VocabularyRegistry The local vocabulary registry. If a schema is not found here, it will automatically check the global registry as well. Declaration public VocabularyRegistry VocabularyRegistry { get; } Property Value Type Description VocabularyRegistry Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.ValidationResults.html": {
    "href": "api/Json.Schema.ValidationResults.html",
    "title": "Class ValidationResults",
    "keywords": "Class ValidationResults The results object for validations. Inheritance System.Object ValidationResults Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class ValidationResults : object Properties | Improve this Doc View Source AbsoluteSchemaLocation The absolute schema location. Only available if the schema had an absolute URI ID. Declaration public Uri? AbsoluteSchemaLocation { get; } Property Value Type Description System.Nullable < Uri > | Improve this Doc View Source Annotations The collection of annotations from this node. Declaration public IReadOnlyList<Annotation> Annotations { get; } Property Value Type Description IReadOnlyList < Annotation > | Improve this Doc View Source InstanceLocation The instance location that was processed. Declaration public JsonPointer InstanceLocation { get; } Property Value Type Description JsonPointer | Improve this Doc View Source IsValid Indicates whether the validation passed or failed. Declaration public bool IsValid { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Message The error message, if any. Declaration public string? Message { get; } Property Value Type Description System.Nullable < System.String > | Improve this Doc View Source NestedResults The collection of nested results. Declaration public IReadOnlyList<ValidationResults> NestedResults { get; } Property Value Type Description IReadOnlyList < ValidationResults > | Improve this Doc View Source SchemaLocation The schema location that generated this node. Declaration public JsonPointer SchemaLocation { get; } Property Value Type Description JsonPointer Methods | Improve this Doc View Source ToBasic() Transforms the results to the basic format. Declaration public void ToBasic() | Improve this Doc View Source ToDetailed() Transforms the results to the details format. Declaration public void ToDetailed() | Improve this Doc View Source ToFlag() Transforms the results to the flag format. Declaration public void ToFlag() Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.Vocabularies.html": {
    "href": "api/Json.Schema.Vocabularies.html",
    "title": "Class Vocabularies",
    "keywords": "Class Vocabularies Declares the vocabularies of the supported drafts. Inheritance System.Object Vocabularies Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public static class Vocabularies : object Fields | Improve this Doc View Source Applicator201909 The Draft 2019-09 Applicator vocabulary. Declaration public static readonly Vocabulary Applicator201909 Field Value Type Description Vocabulary | Improve this Doc View Source Applicator201909Id The Draft 2019-09 Applicator vocabulary ID. Declaration public const string Applicator201909Id = null Field Value Type Description System.String | Improve this Doc View Source Applicator202012 The Draft 2020-12 Applicator vocabulary. Declaration public static readonly Vocabulary Applicator202012 Field Value Type Description Vocabulary | Improve this Doc View Source Applicator202012Id The Draft 2020-12 Applicator vocabulary ID. Declaration public const string Applicator202012Id = null Field Value Type Description System.String | Improve this Doc View Source Content201909 The Draft 2019-09 Content vocabulary. Declaration public static readonly Vocabulary Content201909 Field Value Type Description Vocabulary | Improve this Doc View Source Content201909Id The Draft 2019-09 Content vocabulary ID. Declaration public const string Content201909Id = null Field Value Type Description System.String | Improve this Doc View Source Content202012 The Draft 2020-12 Content vocabulary. Declaration public static readonly Vocabulary Content202012 Field Value Type Description Vocabulary | Improve this Doc View Source Content202012Id The Draft 2020-12 Content vocabulary ID. Declaration public const string Content202012Id = null Field Value Type Description System.String | Improve this Doc View Source Core201909 The Draft 2019-09 Core vocabulary. Declaration public static readonly Vocabulary Core201909 Field Value Type Description Vocabulary | Improve this Doc View Source Core201909Id The Draft 2019-09 Core vocabulary ID. Declaration public const string Core201909Id = null Field Value Type Description System.String | Improve this Doc View Source Core202012 The Draft 2020-12 Core vocabulary. Declaration public static readonly Vocabulary Core202012 Field Value Type Description Vocabulary | Improve this Doc View Source Core202012Id The Draft 2020-12 Core vocabulary ID. Declaration public const string Core202012Id = null Field Value Type Description System.String | Improve this Doc View Source Format201909 The Draft 2019-09 Format vocabulary. Declaration public static readonly Vocabulary Format201909 Field Value Type Description Vocabulary | Improve this Doc View Source Format201909Id The Draft 2019-09 Format vocabulary ID. Declaration public const string Format201909Id = null Field Value Type Description System.String | Improve this Doc View Source FormatAnnotation202012 The Draft 2020-12 Format-Annotation vocabulary. Declaration public static readonly Vocabulary FormatAnnotation202012 Field Value Type Description Vocabulary | Improve this Doc View Source FormatAnnotation202012Id The Draft 2020-12 Format vocabulary ID. Declaration public const string FormatAnnotation202012Id = null Field Value Type Description System.String | Improve this Doc View Source FormatAssertion202012 The Draft 2020-12 Format-Assertion vocabulary. Declaration public static readonly Vocabulary FormatAssertion202012 Field Value Type Description Vocabulary | Improve this Doc View Source FormatAssertion202012Id The Draft 2020-12 Format vocabulary ID. Declaration public const string FormatAssertion202012Id = null Field Value Type Description System.String | Improve this Doc View Source Metadata201909 The Draft 2019-09 Metadata vocabulary. Declaration public static readonly Vocabulary Metadata201909 Field Value Type Description Vocabulary | Improve this Doc View Source Metadata201909Id The Draft 2019-09 Metadata vocabulary ID. Declaration public const string Metadata201909Id = null Field Value Type Description System.String | Improve this Doc View Source Metadata202012 The Draft 2020-12 Metadata vocabulary. Declaration public static readonly Vocabulary Metadata202012 Field Value Type Description Vocabulary | Improve this Doc View Source Metadata202012Id The Draft 2020-12 Metadata vocabulary ID. Declaration public const string Metadata202012Id = null Field Value Type Description System.String | Improve this Doc View Source Unevaluated202012 The Draft 2020-12 Unevaluated vocabulary. Declaration public static readonly Vocabulary Unevaluated202012 Field Value Type Description Vocabulary | Improve this Doc View Source Unevaluated202012Id The Draft 2020-12 Unevaluated vocabulary ID. Declaration public const string Unevaluated202012Id = null Field Value Type Description System.String | Improve this Doc View Source Validation201909 The Draft 2019-09 Validation vocabulary. Declaration public static readonly Vocabulary Validation201909 Field Value Type Description Vocabulary | Improve this Doc View Source Validation201909Id The Draft 2019-09 Validation vocabulary ID. Declaration public const string Validation201909Id = null Field Value Type Description System.String | Improve this Doc View Source Validation202012 The Draft 2020-12 Validation vocabulary. Declaration public static readonly Vocabulary Validation202012 Field Value Type Description Vocabulary | Improve this Doc View Source Validation202012Id The Draft 2020-12 Validation vocabulary ID. Declaration public const string Validation202012Id = null Field Value Type Description System.String"
  },
  "api/Json.Schema.Vocabulary.html": {
    "href": "api/Json.Schema.Vocabulary.html",
    "title": "Class Vocabulary",
    "keywords": "Class Vocabulary Represents a Draft 2019-09 and later vocabulary. Inheritance System.Object Vocabulary Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class Vocabulary : object Constructors | Improve this Doc View Source Vocabulary(String, IEnumerable<Type>) Creates a new Vocabulary . Declaration public Vocabulary(string id, IEnumerable<Type> keywords) Parameters Type Name Description System.String id The vocabulary ID. IEnumerable < Type > keywords The types of the keywords that are defined by the vocabulary. | Improve this Doc View Source Vocabulary(String, Type[]) Creates a new Vocabulary . Declaration public Vocabulary(string id, params Type[] keywords) Parameters Type Name Description System.String id The vocabulary ID. Type [] keywords The types of the keywords that are defined by the vocabulary. Properties | Improve this Doc View Source Id The vocabulary ID. Declaration public Uri Id { get; } Property Value Type Description Uri | Improve this Doc View Source Keywords The types of the keywords that are defined by the vocabulary. Declaration public IReadOnlyCollection<Type> Keywords { get; } Property Value Type Description IReadOnlyCollection < Type > Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.VocabularyAttribute.html": {
    "href": "api/Json.Schema.VocabularyAttribute.html",
    "title": "Class VocabularyAttribute",
    "keywords": "Class VocabularyAttribute Indicates the ID of the vocabulary a keyword belongs to. Inheritance System.Object VocabularyAttribute Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class VocabularyAttribute : Attribute Constructors | Improve this Doc View Source VocabularyAttribute(String) Creates a new VocabularyAttribute . Declaration public VocabularyAttribute(string id) Parameters Type Name Description System.String id The vocabulary ID. Properties | Improve this Doc View Source Id The vocabulary ID. Declaration public Uri Id { get; } Property Value Type Description Uri Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.VocabularyKeyword.html": {
    "href": "api/Json.Schema.VocabularyKeyword.html",
    "title": "Class VocabularyKeyword",
    "keywords": "Class VocabularyKeyword Handles $vocabulary . Inheritance System.Object VocabularyKeyword Implements IJsonSchemaKeyword IEquatable < VocabularyKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class VocabularyKeyword : object, IJsonSchemaKeyword, IEquatable<VocabularyKeyword> Constructors | Improve this Doc View Source VocabularyKeyword(IReadOnlyDictionary<Uri, Boolean>) Creates a new VocabularyKeyword . Declaration public VocabularyKeyword(IReadOnlyDictionary<Uri, bool> values) Parameters Type Name Description IReadOnlyDictionary < Uri , System.Boolean > values The collection of vocabulary requirements. Properties | Improve this Doc View Source Vocabulary The collection of vocabulary requirements. Declaration public IReadOnlyDictionary<Uri, bool> Vocabulary { get; } Property Value Type Description IReadOnlyDictionary < Uri , System.Boolean > Methods | Improve this Doc View Source Equals(VocabularyKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(VocabularyKeyword other) Parameters Type Name Description VocabularyKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.VocabularyRegistry.html": {
    "href": "api/Json.Schema.VocabularyRegistry.html",
    "title": "Class VocabularyRegistry",
    "keywords": "Class VocabularyRegistry A registry for vocabularies. Inheritance System.Object VocabularyRegistry Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class VocabularyRegistry : object Properties | Improve this Doc View Source Global The global registry. Declaration public static VocabularyRegistry Global { get; } Property Value Type Description VocabularyRegistry Methods | Improve this Doc View Source IsKnown(Uri) Indicates whether a vocabulary is known by URI ID and/or anchor. Declaration public bool IsKnown(Uri vocabularyId) Parameters Type Name Description Uri vocabularyId The URI ID. Returns Type Description System.Boolean true , if registered in either this or the global registry; false otherwise. | Improve this Doc View Source Register(Vocabulary) Registers a vocabulary. This does not register the vocabulary's keywords. This must be done separately. Declaration public void Register(Vocabulary vocabulary) Parameters Type Name Description Vocabulary vocabulary Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "api/Json.Schema.WriteOnlyKeyword.html": {
    "href": "api/Json.Schema.WriteOnlyKeyword.html",
    "title": "Class WriteOnlyKeyword",
    "keywords": "Class WriteOnlyKeyword Handles writeOnly . Inheritance System.Object WriteOnlyKeyword Implements IJsonSchemaKeyword IEquatable < WriteOnlyKeyword > Namespace : Json.Schema Assembly : JsonSchema.Net.dll Syntax public class WriteOnlyKeyword : object, IJsonSchemaKeyword, IEquatable<WriteOnlyKeyword> Constructors | Improve this Doc View Source WriteOnlyKeyword(Boolean) Creates a new WriteOnlyKeyword . Declaration public WriteOnlyKeyword(bool value) Parameters Type Name Description System.Boolean value Whether the instance is read-only. Properties | Improve this Doc View Source Value Whether the instance is read-only. Declaration public bool Value { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(WriteOnlyKeyword) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(WriteOnlyKeyword other) Parameters Type Name Description WriteOnlyKeyword other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. | Improve this Doc View Source Validate(ValidationContext) Provides validation for the keyword. Declaration public void Validate(ValidationContext context) Parameters Type Name Description ValidationContext context Contextual details for the validation process. Implements IJsonSchemaKeyword IEquatable<> Extension Methods JsonDocumentExtensions.ToJsonDocument<T>(T, Nullable<JsonSerializerOptions>)"
  },
  "examples/index.html": {
    "href": "examples/index.html",
    "title": "Examples",
    "keywords": "Examples This section gives in-depth examples on how to use the json-everything libraries. The main docs have a few basic examples. I will add examples as they are requested. Please feel free to contact me on Slack or open an issue."
  },
  "examples/more-enums.html": {
    "href": "examples/more-enums.html",
    "title": "Serializing Enumerations by Name",
    "keywords": "Serializing Enumerations by Name By default, the System.Text.Json serializer will convert enumeration members to their numeric values. But suppose we're interacting with an API that expects named values. To do this, we need to tell the serializer how to convert the enum values into strings. This is the purpose of the EnumStringConverter<T> class. Let's assume that the API we're trying to talk with has a MemberType enumeration with the values free-tier , pro , and enterprise . We can model this in our code with enum MemberType { Default, // we don't want to default to a valid value FreeTier, Pro, Enterprise } but as mentioned, this just renders as numbers in the JSON. Let's add the converter. [JsonConverter(typeof(EnumStringConverter<MemberType>))] enum MemberType { Default, // we don't want to default to a valid value FreeTier, Pro, Enterprise } This will now render the values as they appear in the C# code, in PascalCase . Still not quite what the API needs. So let's add some DescriptionAttribute s from the System.ComponentModel namespace. [JsonConverter(typeof(EnumStringConverter<MemberType>))] enum MemberType { Default, // we don't want to default to a valid value [Description(\"free-tier\")] FreeTier, [Description(\"pro\")] Pro, [Description(\"enterprise\")] Enterprise } Now the converter will use these strings for the corresponding vauues. Flag Enums When an enum has the [Flags] attribute, the converter will output the flag values as a comma-delimited list of string values instead of just a single value. This covers the case where multiple values are \"selected.\" [Flags] [JsonConverter(typeof(EnumStringConverter<SnowConeColors>))] enum SnowConeColors { [Description(\"none\")] None = 0, [Description(\"red\")] Red = 1, [Description(\"orange\")] Orange = 2, [Description(\"yellow\")] Yellow = 4, [Description(\"green\")] Green = 8, [Description(\"blue\")] Blue = 16, [Description(\"purple\")] Purple = 32 } In this case, when we want to serialize the enum value Orange | Green , we'll get \"green,orange\" in the serialization."
  },
  "examples/more-extensions.html": {
    "href": "examples/more-extensions.html",
    "title": "JsonElement (and JsonDocument) Extensions",
    "keywords": "JsonElement (and JsonDocument ) Extensions System.Text.Json is great for serialization needs, but the Document Object Model (DOM) needs a bit of work. To this end, Json.More supplies several extensions that make working with the JsonElement struct easier. NOTE Many of these extensions exist for JsonDocument as well by proxying to the .RootElement property. JSON-ifying One might expect JsonElement.ToString() to return valid JSON. I sure did. It doesn't. So we created the .ToJsonString() extension method. This method basically just serializes the element, but element.ToJsonString(); is a lot more readable than JsonSerializer.Serialize(element); Equality Equality isn't implemented for JsonElement at all ! So anytime you do element1 == element2 or even Equals(element1, element2) you just get the base object implementation, which just compares references. That's not really useful. To get JSON-equivalence, you need to use .IsEquivalentTo() . This will compare primitive values ( bool , number , string , and null ) directly and as expected. For objects and arrays, it follows the JSON specification for equality: objects - unordered key-matching with value comparison arrays - sequential value comparison There's even a .GetEquivalenceHashCode() method that follows the same rules! Credit for .GetEquivalenceHashCode() goes to StackOverflow user dbc for their wonderful answer . These extension methods have also been integrated into JsonElementEqualityComparer which implements IEqualityComparer<JsonElement> and can be used in, e.g., Linq queries. Conversions A staple of this library suite's predecessor was the ability to easily build JSON in C# code. Sadly, type conversion is a feature that was left out for JsonElement . Now you have .ToJsonElement() . This will convert the appropriate types into corresponding JsonElement representations. bool number types ( int , double , decimal , etc.) string (also supports null !) IEnumerable<JsonElement> for arrays IDictionary<string, JsonElement> for objects"
  },
  "examples/schema-gen-attribute.html": {
    "href": "examples/schema-gen-attribute.html",
    "title": "Using Attributes to Add Constraints",
    "keywords": "Using Attributes to Add Constraints In the previous example we created a keyword intent to represent a new maxDate keyword during generation. Now we need a way to add it into the generation. This keyword is a validation constraint that you might expect to see as an attribute, so we'll do that. For simplicity, the attribute itself will handle adding the keyword. The generation system actually looks for attributes that also implement IAttributeHandler , so this is a requirement. // The system currently only supports attributes on properties. [AttributeUsage(AttributeTargets.Property)] public class MaxDateAttribute : Attribute, IAttributeHandler { // Again, we need the keyword's value. public DateTime Value { get; } public MaxDateAttribute(uint value) { Value = value; } // It's not necessary to implement this explicitly, but I like to. void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) { var attribute = context.Attributes.OfType<MaxDateAttribute>() .FirstOrDefault(); // Protect against this being run when the attribute isn't applied. if (attribute == null) return; // Ensure the property is a date; otherwise this requirement // doesn't apply. if (!context.Type == typeof(DateTime)) return; // Add the intent. context.Intents.Add(new MaxDateIntent(attribute.Value)); } } Now we can apply this attribute to a property and a maxDate keyword will be added to the schema."
  },
  "examples/schema-gen-generator.html": {
    "href": "examples/schema-gen-generator.html",
    "title": "Generating a Schema for a Simple Type",
    "keywords": "Generating a Schema for a Simple Type This example shows how to extend schema generation to cover a specific type that isn't defined by the type's properties. This is useful for many of the scalar-like value types, such as bool , int , DateTime , or TimeSpan . A generator is the appropriate tool for this job. For this example, we will be implementing a custom generator that handles the TimeSpan type by creating a schema that expects a duration -formatted string. // Generators must implement ISchemaGenerator class TimeSpanSchemaGenerator : ISchemaGenerator { public bool Handles(Type type) { return type == typeof(TimeSpan); } public void AddConstraints(SchemaGeneratorContext context) { context.Intents.Add(new TypeIntent(SchemaValueType.String)); context.Intents.Add(new FormatIntent(Formats.Duration)); } } Once the generator is complete, we must register an instance: GeneratorRegistry.Register(new TimeSpanSchemaGenerator()); All done. Generation can now handle TimeSpan s."
  },
  "examples/schema-gen-intent.html": {
    "href": "examples/schema-gen-intent.html",
    "title": "Supporting a New Keyword During Generation",
    "keywords": "Supporting a New Keyword During Generation This example shows how to extend schema generation to output a new keyword. Suppose we've implemented the maxDate keyword . Now we need a way to generate schemas that contain it. For this we need to create a _ keyword intent_. public class MaxDateIntent : ISchemaKeywordIntent { // Define the data needed by the keyword. public DateTime Value { get; set; } public MaxDateIntent(decimal value) { Value = value; } // Implements ISchemaKeywordIntent // Given a builder, we're going to apply any keywords that we need to. public void Apply(JsonSchemaBuilder builder) { builder.Add(new MaxDateKeyword(Value)); } // Equality stuff. // This is VERY important. Implement as shown here. public override bool Equals(object obj) { return !ReferenceEquals(null, obj); } public override int GetHashCode() { unchecked { var hashCode = GetType().GetHashCode(); hashCode = (hashCode * 397) ^ Value.GetHashCode(); return hashCode; } } } In this case, our intent will be applied by an attribute , but it could also be applied within a generator."
  },
  "examples/schema-gen-refiner.html": {
    "href": "examples/schema-gen-refiner.html",
    "title": "Performing Custom Generation",
    "keywords": "Performing Custom Generation Sometimes, you may need to have custom logic that changes the generated schema in a way that can't be fulfilled with Generators, Intents, or Attributes. As an example, this library handles nullability outside of these mechanisms by making use of a refiner . This example shows how this kind of custom logic can be accomplished. It first looks at the generated schema to determine whether it can add a null to the type keyword. To do this, it needs to look at a configuration option as well as a special [Nullable(bool)] attribute that is used to override the option. internal class NullabilityRefiner : ISchemaRefiner { public bool ShouldRun(SchemaGeneratorContext context) { // we only want to run this if the generated schema has a `type` keyword return context.Intents.OfType<TypeIntent>().Any(); } public void Run(SchemaGeneratorContext context) { // find the type keyword var typeIntent = context.Intents.OfType<TypeIntent>().Firs(); // determine if the property has an override attribute var nullableAttribute = context.Attributes.OfType<NullableAttribute>().FirstOrDefault(); var nullabilityOverride = nullableAttribute?.IsNullable; // if there's an override, use it if (nullabilityOverride.HasValue) { if (nullabilityOverride.Value) typeIntent.Type |= SchemaValueType.Null; else typeIntent.Type &= ~SchemaValueType.Null; return; } // otherwise, look at the options to determine what to do if (context.Configuration.Nullability.HasFlag(Nullability.AllowForNullableValueTypes) && context.Type.IsGenericType && context.Type.GetGenericTypeDefinition() == typeof(Nullable<>)) typeIntent.Type |= SchemaValueType.Null; if (context.Configuration.Nullability.HasFlag(Nullability.AllowForReferenceTypes) && !context.Type.IsValueType) typeIntent.Type |= SchemaValueType.Null; } } Because this refiner is defined in the library, it's added automatically. But to include your refiner in the generation process, you'll need to add it to the Refiners collection in the configuration options. var configuration = new SchemaGeneratorConfiguration { Refiners = {new MyRefiner()} }; JsonSchema actual = new JsonSchemaBuilder().FromType<SomeType>(configuration);"
  },
  "examples/schema-vocabs.html": {
    "href": "examples/schema-vocabs.html",
    "title": "Extending JSON Schema Validation",
    "keywords": "Extending JSON Schema Validation These examples will show how to extend JSON Schema validation by creating a new keyword and incorporating it into a new vocabulary. NOTE These examples are actually defined in one of the library's unit tests. For a more detailed explanation about the concepts behind vocabularies, please see the Custom Keywords page . Defining a Keyword We want to define a new maxDate keyword that allows a schema to enforce a maximum date value to appear in an instance property. We'll start with the keyword. // The SchemaKeyword attribute is how the deserializer knows to use this // class for the \"maxDate\" keyword. [SchemaKeyword(Name)] // Naturally, we want to be able to deserialize it. [JsonConverter(typeof(MaxDateJsonConverter))] class MaxDateKeyword : IJsonSchemaKeyword, IEquatable<MaxDateKeyword> { // Define the keyword in one place. internal const string Name = \"maxDate\"; // Define whatever data the keyword needs. public DateTime Date { get; } public MaxDateKeyword(DateTime date) { Date = date; } // Implements IJsonSchemaKeyword public void Validate(ValidationContext context) { // The value will come from the instance as a string, var dateString = context.LocalInstance.GetString(); // but we want a date. var date = DateTime.Parse(dateString); // Check if the date is less than or equal to what we expect. context.IsValid = date <= Date; // If not, add an error message. if (!context.IsValid) context.Message = $\"{date:O} must be on or before {Date:O}\"; } // Equality stuff public bool Equals(MaxDateKeyword other) { if (ReferenceEquals(null, other)) return false; if (ReferenceEquals(this, other)) return true; return Date.Equals(other.Date); } public override bool Equals(object obj) { return Equals(obj as MaxDateKeyword); } public override int GetHashCode() { return Date.GetHashCode(); } } We need to define that serializer, too. class MaxDateJsonConverter : JsonConverter<MaxDateKeyword> { public override MaxDateKeyword Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) { // Check to see if it's a string first. if (reader.TokenType != JsonTokenType.String) throw new JsonException(\"Expected string\"); var dateString = reader.GetString(); // If the parse fails, then it's not in the right format, // and we should throw an exception anyway. var date = DateTime.Parse(dateString, CultureInfo.InvariantCulture, DateTimeStyles.AssumeUniversal); return new MaxDateKeyword(date); } public override void Write(Utf8JsonWriter writer, MaxDateKeyword value, JsonSerializerOptions options) { writer.WritePropertyName(MaxDateKeyword.Name); writer.WriteStringValue(value.Date.ToString(\"yyyy'-'MM'-'dd'T'HH':'mm':'ssK\")); } } Registering the Keyword Now that we have the keyword, we need to tell the system about it. SchemaKeywordRegistry.Register<MaxDateKeyword>(); NOTE If you're building a dynamic system where you don't always want the keyword supported, it can be removed using the SchemaKeywordRegistry.Unregister<T>() static method. Defining a Vocabulary Vocabularies are used within JSON Schema to ensure that the validator you're using supports your new keyword. Because we have already created the keyword and registered it, we know it is supported. However, we might not be implementing our vocabulary. This keyword is likely from a third party who has written a schema that declares a vocabulary that defines maxDate , and we're trying to support that . In accordance with the specification, JsonSchema .Net will refuse to process any schema whose meta-schema declares a vocabulary it doesn't know about. Because of this, it won't process the third-party schema unless we define the vocabulary on our end. static class ThirdPartyVocabularies { // Define the vocabulary and list the keyword types it defines. public static readonly Vocabulary DatesVocabulary = new Vocabulary(\"http://mydates.com/vocabulary\", typeof(MaxDateKeyword)); // Although not required a vocabulary may also define a meta-schema. // It's a good idea to implement that as well. public static readonly JsonSchema DatesMetaSchema = new JsonSchemaBuilder() .Id(\"http://mydates.com/schema\") .Schema(MetaSchemas.Draft201909Id) .Vocabulary( (Vocabularies.Core201909Id, true), (\"http://mydates.com/vocabulary\", true) ) .Properties( (MaxDateKeyword.Name, new JsonSchemaBuilder() .Type(SchemaValueType.String) .Format(Formats.DateTime) ) ); } Then they need to be registered. This is done on the schema validation options. options.SchemaRegistry.Register(new Uri(\"http://mydates.com/schema\"), DatesMetaSchema); options.VocabularyRegistry.Register(DatesVocabulary);"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome!",
    "keywords": "Welcome! json-everything is your one-stop shop for all things JSON, powered by .Net's very own JSON models and serializer in the System.Text.Json namespace. The libraries contained here are built for speed and designed for usability. The Libraries Currently there are seven libraries output by this project: Json.More .Net Json.More .Net provides some core functionality that one would expect to be in System.Text.Json but isn't. These include simple value conversion and equality comparisons involving their object model. JsonPointer .Net JsonPointer.Net provides an implementation of JSON Pointer ( RFC 6901 ) and a variant called Relative JSON Pointer , which is an important component in JSON HyperSchema. NOTE Relative JSON Pointer requires the ability to navigate up toward the root of the JSON structure, which is not supported yet . While this library can model and validate relative pointers, it cannot evaluate them until this functionality is available. JsonSchema .Net JsonSchema .Net provides JSON Schema support for drafts 6, 7, 2019-09, and 2020-12. It is 100% compliant and passes all required and most optional tests of the JSON Schema Test Suite . NOTE The remaining optional tests involve ECMA Regular Expressions, big-num support, and some string formats. JsonSchema.Net.Generation Builds on top of JsonSchema .Net to provide schema generation from .Net types. JsonSchema.Net.Data Provides an implementation of a vocabulary that defines a way to access instance and external data, a long-sought feature of JSON Schema. JsonSchema.Net.UniqueKeys Provides an implementation of a vocabulary that defines a new keyword to validate item uniqueness by idenitifying specific data points within the item. JsonPath .Net JsonPath .Net provides JSON querying using the JSON Path querying language inspired by XPath and conceptualized by Matt Goessner . An RFC is currently being developed for JSON Path. This library will update as the upcoming spec evolves. JsonPatch .Net JsonPatch .Net provides JSON Patch support which can be used to modify JSON documents. JsonLogic JsonLogic is a .Net implementation of the JsonLogic concept by Jeremy Wadhams ."
  },
  "README.html": {
    "href": "README.html",
    "title": "",
    "keywords": "This content is best viewed here ."
  },
  "release-notes/index.html": {
    "href": "release-notes/index.html",
    "title": "Release Notes",
    "keywords": "Release Notes Here you can find the release notes for each of the libraries."
  },
  "release-notes/json-logic.html": {
    "href": "release-notes/json-logic.html",
    "title": "1.3.1",
    "keywords": "1.3.1 #132 - Fixed some memory management issues around JsonDocument and JsonElement . Thanks to @ddunkin for finding and fixing these. 1.3.0 Exposed JsonElementExtensions so that it can be used in custom rules. Removed new() requirement from RuleRegistry.AddRule<T>() . 1.2.1 Added support for nullable reference types. 1.2.0 Added the ability to define and register custom rules. 1.1.0 Prematurely released library. It would parse and process fine, but the factory methods for building inline logic were incomplete. Also added XML comments for everything. 1.0.1 Signed the DLL for strong name compatibility. 1.0.0 Initial release."
  },
  "release-notes/json-more.html": {
    "href": "release-notes/json-more.html",
    "title": "1.4.3",
    "keywords": "1.4.3 #132 - Fixed some memory management issues around JsonDocument and JsonElement . Thanks to @ddunkin for finding and fixing these. 1.4.2 Fixes potential race condition in EnumStringConverter . Credit to @jaysvoboda for finding and fixing this. 1.4.1 JsonElementEqualityComparer now uses .GetEquivalenceHashCode() . 1.4.0 Added support for nullable reference types. Related to #76 , added .GetEquivalenceHashCode() extension for JsonElement . Credit to @amosonn for pointing me to a good hash code method in the wild. 1.3.0 Added JsonElementProxy . This class allows the client to define methods that expect a JsonElement to be called with native types by defining implicit casts from those types into the JsonElementProxy . Suppose you have this method: void SomeMethod(JsonElement element) { ... } The only way to call this is by passing a JsonElement directly. If you want to call it with a string or int , you have to resort to converting it with the .AsJsonElement() extension method: myObject.SomeMethod(1.AsJsonElement()); myObject.SomeMethod(\"string\".AsJsonElement()); This gets noisy pretty quickly. But now we can define an overload that takes a JsonElementProxy argument instead: void SomeMethod(JsonElementProxy element) { SomeMethod((JsonElement) element); } to allow callers to just use the raw value: myObject.SomeMethod(1); myObject.SomeMethod(\"string\"); 1.2.3 Signed the DLL for strong name compatibility. 1.2.2 Added debug symbols to package. No functional change. 1.2.1 .ToJsonString() now just calls the serializer. 1.2.0 Added .ToJsonString() extension for JsonElement as .ToString() does not output JSON content . 1.1.0 Not released; skipped for some reason. 1.0.0 Initial release."
  },
  "release-notes/json-patch.html": {
    "href": "release-notes/json-patch.html",
    "title": "1.0.6",
    "keywords": "1.0.6 #132 - Fixed some memory management issues around JsonDocument and JsonElement . Thanks to @ddunkin for finding and fixing these. 1.0.5 Added support for nullable reference types. 1.0.4 Signed the DLL for strong name compatibility. 1.0.3 Bump for publish. No functional change. 1.0.2 Added debug symbols to package. No functional change. 1.0.1 Implemented patch equality. 1.0.0 Initial release."
  },
  "release-notes/json-path.html": {
    "href": "release-notes/json-path.html",
    "title": "0.1.7",
    "keywords": "0.1.7 #132 - Fixed some memory management issues around JsonDocument and JsonElement . Thanks to @ddunkin for finding and fixing these. 0.1.6 Updated expression parsing to handle whitespace better. 0.1.5 Added support for nullable reference types. 0.1.4 Signed the DLL for strong name compatibility. 0.1.3 Fixed issue with parsing property path segments that end in z , Z , and 9 (e.g. $.baz ). 0.1.2 Added debug symbols to package. No functional change. 0.1.1 Better single-quote support. 0.1.0 Initial release."
  },
  "release-notes/json-pointer.html": {
    "href": "release-notes/json-pointer.html",
    "title": "1.3.3",
    "keywords": "1.3.3 #123 - Removed a copy/paste error that shows up while deserializing relative pointers. Thanks to @bastiaantenklooster for finding this and creating a PR to fix it. 1.3.2 Added support for nullable reference types. 1.3.1 Signed the DLL for strong name compatibility. 1.3.0 Added support pointer creation using lambda expressions, e.g. x => x.foo[5].bar to create /foo/5/bar . 1.2.0 Added support for array index manipulation in Relative JSON Pointer 2 (spec updated alongside JSON Schema Draft 2020-12). 1.1.2 Added debug symbols to package. No functional change. 1.1.1 Updated reference to Json.More .Net. 1.1.0 Added JsonPointerKind enumeration. Added JsonPointer.Kind property. Added optional parameters to JsonPointer.Parse() and JsonPointer.TryParse() . 1.0.0 Initial release."
  },
  "release-notes/json-schema.html": {
    "href": "release-notes/json-schema.html",
    "title": "1.10.6",
    "keywords": "1.10.6 #138 - @wazzamatazz found an initialization issue that resulted in a NullReferenceException . 1.10.5 Fixed an issue with reference resolution when $ref and $id are sibling keywords in drafts 6 and 7. 1.10.4 #132 - Fixed some memory management issues around JsonDocument and JsonElement . Thanks to @ddunkin for finding and fixing these. 1.10.3 Added overload for ExitKeyword logging extension to pull the validition result from the context rather than having to pass it in. 1.10.2 In 2020-12, unevaluatedItems should consider contains . 1.10.1 #97 - Added support for circular reference detection. 1.10.0 #90 - Added JsonSchemaBuilder.Get<T>() to support the discussion around incrementally adding properties while building schemas. Added optional logging around schema processing decisions. 1.9.4 Register the 2020-12 meta-schemas and vocabularies. Fixed several issues with reusing options objects between validations. Fixed $dynamic* keywords based on new tests in test suite. 1.9.3 #82 - Fixing issues managing ValidationContext.CurrentUri . Credit to @amosonn . 1.9.2 #79 - $ref was calling out to resolve a parent URI. 1.9.1 Fixes found by the release of the 2020-12 test suite. $dynamicAnchor and $dynamicRef behavior. make items and unevaluatedItems respect annotations from prefixItems . 1.9.0 Added support for nullable reference types. Fixed various evaluation bugs around the various keywords involved with references. Fixed content* keywords so that they only validate if the instance is a string. Fixed #76 - .GetHashCode() is inconsistent for schemas and keywords. Credit to @amosonn for pointing me to a good hash code method in the wild. RecursiveRef parameterless constructor marked obsolete in favor of new constructor which takes a boolean value. Schema builder extension also updated to include a parameter which defaults to true to maintain current behavior. 1.8.0 Exposed UriExtensions to help support new keywords that manipulate URIs. 1.7.1 Fixed #67 - enum keyword serializes as examples due to a copy-paste error. Credit to @dannyheard7 for finding and fixing. Also fixed several other related serialization issues. 1.7.0 Updated hard-coded 2020-12 meta-schemas to match the published documents. Added the following JsonSchemaBuilder extension method overloads: .DynamicRef(string) .Const(JsonElementProxy) .Default(JsonElementProxy) .Enum(IEnumerable<JsonElementProxy>) .Enum(params JsonElementProxy[]) .Examples(IEnumerable<JsonElement>) .Examples(IEnumerable<JsonElementProxy>) .Examples(params JsonElementProxy[]) (See Json.More.Net v1.3.0 for more information on JsonElementProxy .) 1.6.1 Signed the DLL for strong name compatibility. 1.6.0 Added support for Draft 2020-12. Meta-schema validation now always occurs superficially in that it validates that the meta-schema is known. The ValidationOptions.ValidateMetaSchema option now only controls whether a full meta-schema validation of the schema will occur. This should only affect clients validating schemas declaring custom meta-schemas with the $schema keyword. Custom meta-schemas will now need to be loaded into the system manually or SchemaRegistry.Fetch will need to be set to retrieve it automatically. Added all new vocabularies and meta-schemas. New keywords: $dynamicRef - replaces/augments $recursiveRef $dynamicAnchor - replaces/augments $recursivAnchor prefixItems - replaces array-form items Added JsonSchemaBuilder extension method for $anchor which should have been added for draft 2019-09 support. ValidationOptions.ValidateFormat has been obsoleted and replaced by ValidationOptions.RequireFormatValidation with the same semantics and default. FormatKeyword now responds to the presence of the format vocabularies in the meta-schema declared by the $schema keyword as well as the ValidationOptions.RequireFormatValidation option. (Includes a bug fix for draft 2019-09 schemas that use a meta-schema that declare the format vocabulary with a value of true .) 1.5.4 Added debug symbols to package. No functional change. 1.5.3 Fixed NullReferenceException when comparing two schemas. 1.5.2 Updated wording for enum error message. This must remain generic and cannot include the expected values because the list could be long and the values could be quite large. 1.5.1 #35 JsonSchema.FromFile() handles file paths as URIs incorrectly in non-Windows systems. 1.5.0 #33 Added ValidationOptions.ValidateFormat which allows configuration of whether to validate the format keyword. Also fixes a bug where the format keyword was validated by default for draft 2019-09 which specifies that it should only generate annotations by default. Because this library favors the latest draft, this is the default behavior for all drafts. As a further followup to #27 (below), basic output has been refined. 1.4.0 #27 (reopened) Better reduction of detailed output format which eliminates the notion that any nodes must be kept. #29 Relative $id keyword at root of schema was not supported. Added ValidationOptions.DefaultBaseUri to be used when no other absolute URI is defined by the $id keyword. Also now supports assuming the base URI from the file name. 1.3.1 #27 Nodes in the basic and detailed output formats that match the overall outcome should be removed. This also addresses several other bugs involving the output such as absoluteKeywordLocation . 1.3.0 #15 Easier navigation of the schema and its subschemas. Added ISchemaContainer , ISchemaCollector , and IKeyedSchemaCollector for the varying sets of subschemas that keywords can have. Added SchemaKeywordExtensions.GetSubschemas() extension method. #19 Keyword filtering doesn't consider declared draft or ValidationOptions.ValidateAs . 1.2.0 ( json-schema .org #358 ) Published draft 06 meta-schema doesn't match the copy in the spec repo. #16 JsonSchema equality checking. Along with this, added IEquatable<T> to SchemaKeywordRegistry.Register<T>() . #18 properties keyword is processed with same priority as additionalProperties making keyword order important, but it shouldn't be. Added EnumerableExtensions.ContentsEqual() . 1.1.0 Added SchemaRegistry.Fetch property to enable automatic downloading of referenced schemas. 1.0.3 #9 if / then / else are processed in serialized order instead of processing if first. #10 Bug fix around deserialization of readonly keyword. 1.0.2 Updated format json-pointer to require plain pointers. URI-encoded pointers are invalid. 1.0.1 Updated validation of formats hostname , iri , uri , regex , and time . Fixed issue resolving references ( $ref & $recursiveRef ) to miscellaneous (non-keyword) schema data. 1.0.0 Initial release."
  },
  "release-notes/json-schema-data.html": {
    "href": "release-notes/json-schema-data.html",
    "title": "1.0.2",
    "keywords": "1.0.2 Added some logging for entering and exiting the data keyword. 1.0.1 Added support for nullable reference types. 1.0.0 Initial release."
  },
  "release-notes/json-schema-generation.html": {
    "href": "release-notes/json-schema-generation.html",
    "title": "1.7.1",
    "keywords": "1.7.1 #136 - Better sorting for properties, taking into account inheritance hierarchy and putting inherited properties first. Thanks to @wazzamatazz for working this up. 1.7.0 #134 - Added custom property naming support. 1.6.0 #128 - Added support for nullability. Special thanks to @JMPSequeira who proposed the feature and worked through multiple designs ( #124 and #127 ) that lead to the final solution and for adding all the tests needed to ensure proper function. Added NullableAttribute . Added Nullability . Added SchemaGenerationConfiguration.Nullability . #125 - Bug fix: generation of object with no serializable properties still generates an empty properties keyword. Also updated intent classes to be mutable. Should have been this way to begin with, but was probably an oversight. 1.5.0 #114 - DateTime properties not generating properly. Also fixes Guid , JsonPointer , and Uri properties. Added PropertyNamesIntent . 1.4.0 #109 - Add properties in the order they're declared in code. Credit to @wazzamatazz #112 - Add properties in the order they're declared in code. 1.3.2 Fixes property name callout in required keyword. Credit to @jaysvoboda for finding and fixing this. 1.3.1 #100 - Don't optimize type-only subschemas. 1.3.0 #96 - Added ISchemaRefiner to the schema generation process to allow users to inject custom logic after intents are created. #97 - Fixed an issue with subsequent schema generations off of the same type. 1.2.3 #87 - Generation for the same property type under different property names causes StackOverflowException. 1.2.2 #85 - Generation for List<TSelf> producing StackOverflowException. 1.2.1 Added support for nullable reference types. 1.2.0 Added support for .Net 5 and remaining in-built JSON serialization attributes: JsonInclude & JsonNumberHandling . Exposed static class AttributeHandler and added methods to allow for handlers of predefined attributes. This mechanism should only be used for attributes that cannot also be made to implement IAttributeHandler . Attributes which also implement this interface are implicitly handled. 1.1.1 Signed the DLL for strong name compatibility. 1.1.0 Added support for in-built JSON serialization attributes (Standard 2.0 & Core 3.x): JsonPropertyName & JsonIgnore . 1.0.1 Added debug symbols to package. No functional change. 1.0.0 Initial release."
  },
  "release-notes/json-schema-unique-keys.html": {
    "href": "release-notes/json-schema-unique-keys.html",
    "title": "1.0.0",
    "keywords": "1.0.0 Initial release."
  },
  "support.html": {
    "href": "support.html",
    "title": "Support",
    "keywords": "Support If you find you need help with any of the json-everything libraries you have several options: Join the my Slack workspace . Post a question on StackOverflow *, or Email me at my GitHub username at yahoo. For feature requests, bug reports, or documentation errata reports, please feel free to create an issue. * If you post a question on StackOverflow, please let me know via one of the other methods. This library collection is still rather new and SO tags haven't been created yet."
  },
  "usage/custom-vocabs.html": {
    "href": "usage/custom-vocabs.html",
    "title": "JSON Schema Vocabularies",
    "keywords": "JSON Schema Vocabularies JSON Schema draft 2019-09 introduced the idea of vocabularies to enable some spec support for custom keywords. json-everything defines two such vocabularies: JsonSchema.Net.Data allows a schema to reference instance or external data to be used in existing keywords. This has been a highly requested feature since the early days of JSON Schema. JsonSchema.Net.UniqueKeys defines a new keyword that allows the schema author to define that items in an array must have unique child values, or even unique combinations of child values to be considered distinct."
  },
  "usage/index.html": {
    "href": "usage/index.html",
    "title": "Usage",
    "keywords": "Usage Here you can find the detailed information on how to use the libraries. Select a page from the side-nav to learn more!"
  },
  "usage/json-logic.html": {
    "href": "usage/json-logic.html",
    "title": "JsonLogic",
    "keywords": "JsonLogic (Not Json Something .Net, sadly. \"JsonLogic .Net\" was already registered on Nuget. It breaks the pattern, I know. C'est la vie .) JsonLogic is a mechanism that can be used to apply logical transformations to JSON values and that is also itself expressed in JSON. The syntax JsonLogic is expressed using single-keyed objects called rules . The key is the operator and the value is (usually) an array containing the parameters for the operation. Here are a few examples: Less than: {\"<\" : [1, 2]} Merging arrays: {\"merge\":[ [1,2], [3,4] ]} Value detection: {\"in\":[ \"Ringo\", [\"John\", \"Paul\", \"George\", \"Ringo\"] ]} NOTE For rules that only have one parameter, that parameter can be expressed directly instead of in an array. This shorthand is provided as a syntactic sugar. While explicitly listing rules is all well and good, the real power of this comes from the ability to reference input data using the var operator. This operator takes a dot-delimited path that is evaluated on the input object, and the var rule is replaced by the resolved value. So if we want to ensure a value in the input data is less than 2, we could use {\"<\": [{\"var\": \"foo.bar\"}, 2]} . This checks the input value for a foo then a bar property, returns that value, and compares it against 2. There are many operators that work on different data types, ranging from string and array manipulation to arithmetic to boolean logic. The full list is on their website , and their docs are pretty good, so I won't repeat the list here. In code The library defines an object model for rules, starting with the Rule base class. This type is fully serializeable, so if you have rules in a text format, just deserialize them to get a Rule instance. var rule = JsonSerializer.Deserialize<Rule>(\"{\\\"<\\\" : [1, 2]}\"); Once you have a rule instance, you can apply it using the .Apply() method, which takes a JsonElement for the data. Sometimes, you may not have a data instance; rather you just want the rule to run. In these cases you can call .Apply() passing a null or by using the .Apply() extension method which takes no parameters. var data = JsonDocument.Parse(\"{\\\"foo\\\": \\\"bar\\\"}\").RootElement; var result = rule.Apply(data); In addition to reading and deserializing rules, you can define them inline using the JsonLogic static class. This class defines methods for all of the built-in rules. Creating the \"less than\" rule with a variable lookup from above: var rule = JsonLogic.LessThan(JsonLogic.Variable(\"foo.bar\"), 2); The 2 here is actually implicitly cast to a LiteralRule which is a stand-in for discrete JSON elements. It can hold any JSON value, and there are implicit casts for numeric, string (null uses the string cast since it's the only nullable type), and boolean types, as well as JsonElement . For arrays and objects, it's best to express the value in a string and use either the JsonDocument.Parse mechanism shown above or one of the .AsJsonElement() overloads from Json.More . Gotchas for .Net developers In developing this library, I found that many of the operations don't align with similar operations in .Net. Instead they tend to mimic the behavior of Javascript. In this section, I'll try to list some of the more significant ones. == vs === === defines a \"strict\" equality. This is the equality we're all familiar with in .Net. == defines a \"loose\" equality that can appropriately convert values to like types before performing the comparison. For example, \"1\" == 1 returns true because \"1\" can be converted to a number, and that number strictly equals the number. More on type conversions later. The first check is whether they are they same type. If so, it just applies strict equality. For the other cases, the following table gives a view of what equals what. The different cases are evaluated in a top-down sequence. a b result null anything false anything null false object anything false anything object false number array convert the array to comma-delimited string and apply loose equality* array number convert the array to comma-delimited string and apply loose equality* number anything attempt to convert to number and apply strict equality anything number attempt to convert to number and apply strict equality array string convert the array to comma-delimited string and apply strict equality string array convert the array to comma-delimited string and apply strict equality That should cover everything, but in case something's missed, it'll just return false . * These cases effectively mean that the array must have a single element that is loosely equal to the number, though perhaps something like [1,234] might pass. Again, the equality is very loose. Type conversion Some operations operate on specific types: sometimes strings, sometimes numbers. To ensure maximum support, an attempt will be made to convert values to the type that the operation prefers. If the value cannot be converted, a JsonLogicException will be thrown. Arithmetic operations, like + and - , and some other operations, like min and max , will attempt to convert the values to a number. String operations will attempt to convert to... yeah, strings. Objects are never converted. Automatic array flattening Nested arrays are flattened before being operated upon. As an example of this, [[\"a\"]] is flattened to [\"a\"] and [\"a\",[\"b\"]] is flattened to [\"a\",\"b\"] . That's it. Not much to it; just be aware that it happens. Creating new operators JSON Logic also supports adding custom operations . In C#, your operators will need to derive from the Rule abstract class. There is only a single method to implement, Apply() , and you'll need to add an Operator attribute. The logic in the rule doesn't need to be complex, but there are a couple things to be aware of: Your rule must have a parameterless constructor. You're working with JsonElement s, so you'll need to detect compatible value types. There are a few extension methods that you can use, like .Numberify() , that try to \"fuzzy-cast\" to a numberish value. If you encounter invalid input, throw a JsonLogicException with an appropriate message. It's definitely recommended to go through the code for the built-in ruleset for examples. Once your rule is defined, it needs to be registered using the RuleRegistry.Register<T>() method. This will allow the rule to be automatically deserialized."
  },
  "usage/json-more.html": {
    "href": "usage/json-more.html",
    "title": "Json.More.Net",
    "keywords": "Json.More .Net Json.More .Net aims to fill gaps left by System.Text.Json . To this end, it supplies four additional functions. Equality comparison Sadly, it seems equality was considered unnecessary. To remedy that, the .IsEquivalentTo() extension method is supplied for JsonDocument and JsonElement . This extension method calculates the JSON-equality of the nodes. This means that objects are key-matched (unordered) and arrays are sequence-matched (ordered). From json.org: An object is an unordered set of name/value pairs. and An array is an ordered collection of values. Additionally, an IEqualityComparer<JsonElement> is supplied ( JsonElementEqualityComparer ) which has a convenient static Instance property. Enum serialization The EnumStringConverter<T> class enables string encoding of enum values. T is the enum. The default behavior is to simply encode the C# enum value name. This can be overridden with the System.ComponentModel.DescripitionAttribute . public enum MyEnum { Foo, // serializes as \"Foo\" [Description(\"bar\")] Bar // serializes as \"bar\" } It also supports [Flags] enums by encoding the base values into an array. It does not support composite values. [Flags] public enum MyFlagsEnum { Foo = 1, Bar = 2, Composite = 3 // serializes as [\"Foo\", \"Bar\"] } To use this converter, apply the [JsonConverter(typeof(EnumStringConverter<T>))] to either the enum or an enum-valued property. Data conversions .AsJsonElement() extension Sometimes you just want a JsonElement that represents a simple value, like a string, boolean, or number. This library exposes several overloads of the .AsJsonElement() extension that can do this for you. Supported types are: bool Numeric types (e.g. double , decimal , int , etc.) string IEnumerable<JsonElement> (for arrays) IDicationary<string, JsonElement> (for objects) For example, to create an empty array, you can use var emptyArray = new JsonElement[0].AsJsonElement(); To create an object with an 6 in the myInt property: var obj = new Dictionary<string, JsonElement>{ [\"myInt\"] = 6.AsJsonElement() } Making methods that require JsonElement easier to call The JsonElementProxy class allows the client to define methods that expect a JsonElement to be called with native types by defining implicit casts from those types into the JsonElementProxy and then also an implicit cast from the proxy into JsonElement . Suppose you have this method: void SomeMethod(JsonElement element) { ... DoSomething(element); ... } The only way to call this is by passing a JsonElement directly. If you want to call it with a string or int , you have to resort to converting it with the .AsJsonElement() extension method: myObject.SomeMethod(1.AsJsonElement()); myObject.SomeMethod(\"string\".AsJsonElement()); This gets noisy pretty quickly. But now we can define an overload that takes a JsonElementProxy argument instead: void SomeMethod(JsonElementProxy element) { ... DoSomething(element); // still only accepts JsonElement; doesn't need an overload ... } to allow callers to just use the raw value: myObject.SomeMethod(1); myObject.SomeMethod(\"string\"); To achieve this without JsonElementProxy , you could also create overloads for short , int , long , float , double , decimal , string , and bool . JSON model serialization The .Net team did a great job of supporting fast serialization, but for whatever reason they didn't implement serializing their data model. The Utf8JsonWriterExtensions class fills that gap. This provides an extension method that writes a JsonElement to the stream."
  },
  "usage/json-patch.html": {
    "href": "usage/json-patch.html",
    "title": "JsonPatch.Net",
    "keywords": "JsonPatch .Net JSON Patch is a language for modifying JSON documents. Like JSON Schema, it is also expressed in JSON. Syntax A patch consists of an array containing one or more operations. Each operation may also contain one or more arguments. An operation must be one of add remove replace copy move test The arguments vary among them, though all must contain at least an op and a path . (\"Path\" as used here is colloqiual. It's actually a JSON Pointer , not JSON Path .) op specifies the operation and must be one of the values above. path specifies the location within the JSON document which will receive changes. from specifies a source location within the JSON document from which to pull a value. value specifies an explicit value. Applying Patches In JsonPatch .Net, a JsonPatch object can be deserialized directly from the JSON document string. var patch = JsonSerializer.Deserialize<JsonPatch>(patchString); JsonPatch operates on JsonElement values. To apply the patch, parse the document and pass the root element into the .Apply() method. var doc = JsonDocument.Parse(docString); var result = patch.Apply(doc.RootElement); The result contains the altered document, either fully patched or up to the point an error occurred, and possibly an error message. Inline Patching The JsonPatch class can also be built in code using by creating a series of PatchOperation s through its static constructor methods. There's one for each operation. var patch = new JsonPatch(PatchOperation.Add(\"/foo/bar\", \"baz\".AsJsonElement()), PatchOperation.Test(\"/foo/biz\", false.AsJsonElement())); That's it."
  },
  "usage/json-path.html": {
    "href": "usage/json-path.html",
    "title": "JsonPath.Net",
    "keywords": "JsonPath .Net JSON Path is a query language for JSON documents inspired by what XPath provides for XML documents. It was originally proposed by Matt Goessner, and now a specification is in progress. Syntax A path consists of a series of selectors, chained one after another. Each selector takes in a collection of JSON nodes and produces a collection of JSON nodes based on their function. $ - This is the root selector. A path must always begin with it. It returns the root document. It can also be used in query expressions, which we'll come to later. . - This is a property-name selector. The property names that you can use with this must only contain alphanumeric or underscore _ characters. Otherwise you'll need to use the property-name indexer (see below). This selector also provides a recursive-descent function when immediately followed by another selector. (More on recursive descents below.) The property name can be replaced with an asterisk * to indicate that all properties should be returned. [] - This is an indexing selector. It can contain multiple indices, separated by commas. Indices come in several flavors: Simple integer - The basic integer index that we're all familiar with. Negative numbers will start counting from the end of an array. If the value is out of the range of the array, no nodes will be returned. Slice - This allows selection of a range of nodes from an array. Property name - This allows property selection of objects by matching the full name. This is required when a property key doesn't match the requirements of the . selector from above. Keys can be single- or double-quoted and special characters must be encoded as is required by JSON. * literal - This is a wildcard that simply returns all values from within the object or array. Container query - This is an expression that evaluates to a single integer index and operates on the node being passed to the selector. It is denoted by parentheses surrounding the expression (...) . Item query - This is an expression that evaluates to a boolean and operates on the child nodes of the node being passed to the selector. It is denoted by a question mark followed by parentheses surrounding the expresssion ?(...) . Query Expressions Both container queries and item queries take an expression. This expression uses a single variable, which is some JSON node as described above. The node is denoted by @ and any valid JSON Path can follow it. For example, an item query expression may be ?(@.price<10) . This expression will find all items in either an object or an array that contains a price property with a value less than 10. Additionally, the $ selector may be used to reference back to the root node, even inside an expression. This allows queries like ?(@.price<$.maxPrice) where we want to find all of the items of the current container that contain a price value that is less than the value in the root node's maxPrice property. Exressions support the following operations: Arithmetic + - * / % (modulus) Comparison == != < <= > >= Boolean logic && || * NOTE There is an open issue regarding expression support on the specification GitHub repository. Recursive Descents When the . selector is immediately followed by another selector ( . or [] ), the initial . indicates a recursive descent selector. This will return all nodes recursively. So for { \"a\": [ 1, 2, 3 ] } it will return all of the following: { \"a\": [ 1, 2, 3 ] } [ 1, 2, 3 ] 1 2 3 Special Considerations There is also support for a special-case .length property, which will return the number of items within an object or array. It is valid on both the base path as well as paths found in expressions. If you find that you need the value of a length property, you'll need to use the indexer syntax [\"length\"] . This allows expressions such as the container expression (@.length-1) which is equivalent to the integer index -1 and returns the last value in an array. In Code To obtain an instance of a JSON Path, you'll need to parse it from a string. var path = JsonPath.Parse(\"$.prop[0:6:2]\"); or var success = JsonPath.TryParse(\"$.prop[0:6:2]\", out JsonPath path); This will create a JsonPath instance that will select the prop property of an object, then items, 0, 2, and 4 of an array that resides there. Once your path is created, you can start evaluating instances. var instance = JsonDocument.Parse(\"{\\\"prop\\\":[0,1,2,3]}\"); var results = path.Evaluate(instance); This will return a results object that contains an array of matches or an error. The match object contains both the value that was found and the location in the instance where it was found. Adherence to the Proposed Specification As the specification is still under authorship, there are features present in traditional JSON Path that haven't been properly described yet. For these features, this library has been configured to mimic the consensus behaviors of other libraries as determined by the JSON Path Comparison project. This library will strive to prioritize the specification over the comparison consensus where any conflict exists."
  },
  "usage/json-pointer.html": {
    "href": "usage/json-pointer.html",
    "title": "JsonPointer.Net",
    "keywords": "JsonPointer .Net JSON Pointer is a mechanism that allows you to isolate a single element within a JSON document by navigating down a series of object properties and array indices. The syntax The syntax is really simple: /objects/and/3/arrays This pointer has four segments. Each segment specifies either an object property or, if the segment is a number, an array index. Interestingly, the 3 above could be either an object property or an array index. There's nothing about the pointer that specifies a distinction. It will resolve for both of these documents: { \"objects\": { \"and\": [ \"item zero\", null, 2, { \"arrays\": \"found me\" } ] } } { \"objects\": { \"and\": { \"3\": { \"arrays\": \"found me\" } } } } If a property contains a / , it must be escaped by replacing it with ~1 . Additionally, the escape character ~ must be escaped by replacing it with ~0 . It also supports a URL format, which is essentially the same thing, except that it starts with a # , then followed by the standard pointer. This format also will % -encode any URL-reserved characters, like = and ? . In code The JsonPointer struct is the model for JSON Pointer. The easiest way to create one is to parse it with either Parse() or TryParse() . This will give you an instance of the model that can be used to evaluate instances. Evaluating the above example might look something like this: var element = JsonDocument.Parse(\"{\\\"objects\\\":{\\\"and\\\":[\\\"item zero\\\",null,2,{\\\"arrays\\\":\\\"found me\\\"}]}}\"); var pointer = JsonPointer.Parse(\"/objects/and/3/arrays\"); var result = pointer.Evaluate(element); // contains a JsonElement with a \"found me\" value. You can also create pointers from objects using lambda expressions: var pointer = JsonPointer.Create(x => x.objects.and[3].arrays); This yields the same pointe as the example above. Relative JSON Pointers JSON Hyperschema relies on a variation of JSON Pointers called Relative JSON Pointers that also includes the number of parent navigations. This allows the system to start at an internal node in the JSON document and navigate to another node potentially on another subtree. Relative JSON Pointers are implemented with the RelativeJsonPointer struct. Interactions with this struct are very similar to JsonPointer . Unfortunately, since evaluation of these pointers require parent navigation, a feature which is currently unsupported by System.Text.Json , only the model is functional at this time."
  },
  "usage/schema-building.html": {
    "href": "usage/schema-building.html",
    "title": "Building a schema",
    "keywords": "Building a schema There are two options when building a schema: defining it inline using the fluent builder and defining it externally and deserializing. Which method you use depends on your specific requirements. Deserialization JsonSchema .Net schemas are fully serializable. var mySchema = JsonSchema.FromText(content); which just does var mySchema = JsonSerializer.Deserialize<JsonSchema>(content); Done. Inline There are many reasons why you would want to hard-code your schemas. This library actually hard-codes all of the meta-schemas. Whatever your reason, the JsonSchemaBuilder class is going to be your friend. The builder class itself is pretty simple. It just has an .Add() method which takes an instance of IJsonSchemaKeyword . The real power comes from the multitudes of extension methods. There's at least one for every keyword, and they all take the appropriate types for the data that the keyword expects. Once you've added all of your properties, just call the .Build() method to get your schema object. var builder = new JsonSchemaBuilder() // builder methods ; var schema = builder.Build(); Let's take a look at some of the builder extension methods. Easy Mode Some of the more straightforward builder methods are for like the title and $comment keywords, which just take a string: builder.Comment(\"a comment\") .Title(\"A title for my schema\"); Notice that these methods implement a fluent interface so that you can chain them together. A Little Spice Other extension methods can take multiple values. These have been overloaded to accept both IEnumerable<T> and params arrays just to keep things flexible. var required = new List<string>{\"prop1\", \"prop2\"}; builder.Required(required); or just builder.Required(\"prop1\", \"prop2\"); Now You're Cooking With Fire Lastly, we have the extension methods which take advantage of C# 7 tuples. These include keywords like $defs and properties which take objects in their JSON form. builder.Properties( (\"prop1\", new JsonSchemaBuilder() .Type(SchemaValueType.String) .MinLength(8) ), (\"prop2\", new JsonSchemaBuilder() .Type(SchemaValueType.Number) .MultipleOf(42) ) ); Did you notice how the JsonSchemaBuilder is just included directly without the .Build() method? These methods actually require JsonSchema objects. This leads us into the next part. Conversions JsonSchemaBuilder defines an implicit cast to JsonSchema which calls the .Build() method. To help things further, JsonSchema also defines implicit conversions from bool . This allows you to simply use true and false to create their respective schemas. builder.Properties( (\"prop1\", new JsonSchemaBuilder() .Type(SchemaValueType.String) .MinLength(8) ), (\"prop2\", new JsonSchemaBuilder() .Type(SchemaValueType.Number) .MultipleOf(42) ), (\"prop3\", true) ); This cast can be used anywhere a JsonSchema is needed, such as in the additionalProperties or items keywords. builder.Properties( (\"prop1\", new JsonSchemaBuilder() .Type(SchemaValueType.String) .MinLength(8) ), (\"prop2\", new JsonSchemaBuilder() .Type(SchemaValueType.Number) .MultipleOf(42) ), (\"prop3\", true), (\"prop4\", new JsonSchemaBuilder() .Type(SchemaValueType.Array) .Items(true) ) ) .AdditionalProperties(false);"
  },
  "usage/schema-generation.html": {
    "href": "usage/schema-generation.html",
    "title": "Generating JSON Schema from .Net Types",
    "keywords": "Generating JSON Schema from .Net Types JsonSchema.Net.Generation is an extension package to JsonSchema.Net that provides JSON Schema generation from .Net types. Using it is quite simple. First you need a JsonSchemaBulider . Then... var schema = schemaBuilder.FromType<MyType>().Build(); Done. NOTE Ideally, this functionality should be used to create a starting point in authoring a schema. The schemas output by this library should be reviewed by actual people prior to being put into a production system. Making better schemas The above will give you a basic schema that will include the type keyword, and maybe a listing of the properties. But many times you have more detailed requirements of the data you're receiving. For example, some properties may be required string properties may have length requirements numeric properties may have value range requirements All of these and more are supplied via a set of attributes that can be applied to properties. The following attributes are included in this package: Numeric values Minimum ExclusiveMinimum Maximum ExclusiveMaximum MultipleOf Strings MinLength MaxLength Pattern Arrays MinItems MaxItems UniqueItems All Required Obsolete (translates to deprecated ) Simply add the attributes directly to the properties and the corresponding keywords will be added to the schema. For properties typed with generic collections, like List<T> , the schema will automatically generate an items keyword and an generate a schema for the indicated T . If your T is a numeric value or a string, then you can also apply the relevant attributes and they'll be applied in the items subschema. For example, this object: class MyClass { [UniqueItems(true)] [Minimum(10)] public List<int> MyList{ get; set; } } will be translated to this schema: { \"type\": \"object\", \"properties\": { \"MyList\": { \"type\": \"array\", \"items\": { \"type\": \"integer\", \"minimum\": 10 }, \"uniqueItems\": true } } } The minimum is applied to the items because that keyword is not relevant for an array. NOTE This means that the generator will have trouble determining where to apply keywords to properties like List<List<T>> because the attributes could be relevant for both the outer and inner lists. The generator also supports these .Net-defined attributes: JsonPropertyName - supports custom property naming (more on naming below) JsonNumberHandling - supports allowing numeric values in strings or only as numbers as well as allowing the NaN , Infinity , and -Infinity values. The generator will handle most common types: numeric types ( int , decimal , etc.) bool string enumerations (mapped to strings) Uri JsonPointer (from JsonPointer.Net ) Guid DateTime collections ( IEnumerable<T> ) string-keyed dictionaries enumeration-keyed dictionaries (keys are mapped to strings) POCOs For POCOs, currently only read/write properties are converted. Future versions of this library may also support read-only or write-only by adding the readOnly and writeOnly keywords, respectively. Lastly, property names will either be listed as declared in code (default) or sorted by name. This is controlled via the SchemaGenerationConfiguration.PropertyOrder property. Nullability There is a discrepancy between how .Net does validation and how JSON Schema does validation that centers primarily around nullable types and the [Required] attribute. Those familiar with .Net validation will recognize that having [Required] on your models will also protect against null values when deserializing. However, JSON Schema separates these two concepts, and this library strives to align with JSON Schema in order to give the most flexibility. To this end, the [Required] attribute will only be represented in generated schemas in the required keyword. However, for nullable types, it may or may not be appropriate to include null in the type keyword. JsonSchema.Net.Generation controls this behavior via the SchemaGenerationConfiguration.Nullability option with individual properties being overrideable via the [Nullable(bool)] attribute. There are four options: Disabled - This is the default. The resulting schemas will not have null in the type keyword unless [Nullable(true)] is used. AllowForNullableValueTypes - This will add null to the type keyword for nullable value types (i.e. Nullable<T> ) unless [Nullable(false)] is used. AllowForReferenceTypes - This will add null to the type keyword for reference types unless [Nullable(false)] is used. AllowForAllTypes - This is a combination of the previous two and will add null to the type keyword for any type unless [Nullable(false)] is used. NOTE This library cannot detect whether the consuming code has nullable reference types enabled. Therefore all reference types are considered nullable. BONUS NOTE The library makes a distinction between nullable value types and reference types because value types must be explicitly nullable. This differs from reference types which are implicitly nullable, and there's not a way (via the type itself) to make a reference type non-nullable. Property naming In addition to the [JsonPropertyName] attribute, the configuration exposes a PropertyNamingMethod that allows you to define a custom method for altering property names from your code into the schema. The PropertyNamingMethods static class defines a few commonly-used conventions: camelCase PascalCase kebab-case UPPER-KEBAB-CASE snake_case UPPER_SNAKE_CASE Just set this property and the system will adjust property names accordingly. Note that the [JsonPropertyName] attribute takes precedence, so you can still use this to get custom naming when you've configured a method. Additional built-in support There are a couple advanced features that bear mentioning. The system does have some loop detection logic in order to support self-referencing or loop-referencing types. The system will collect common subschemas into a $defs keyword at the root. Identification of a subschema is by its type and the collection of attributes it is processed with. The locations with these common subschemas will be replaced by a $ref that points to the appropriate entry in $defs . Extending support The above will work most of the time, but occasionally you may find that you need some additional support. Happily, the library is configured for you to provide that support yourself. There are four areas that can be utilized in order to get the results you're after. Generators Intents Attributes Refiners These do not all need to be implemented. Generators These are the first phase of generation. When encountering a type, the system will find the first registered generator that can handle that type. The generator then creates keyword intents (see Intents below). The supported types list above is merely a list of the built-in generators. To create a new generator, you'll need to implement the ISchemaGenerator interface and register it using the GeneratorRegistry.Register() static method. This will insert your generator at the top of the list so that it has priority. IMPORTANT This means that the order your generators are registered is important: last one wins. So if you want one generator to have priority over another, register the higher priority one last. This class doesn't need to be complex. Here's the implementation for the BooleanSchemaGenerator : internal class BooleanSchemaGenerator : ISchemaGenerator { public bool Handles(Type type) { return type == typeof(bool); } public void AddConstraints(SchemaGeneratorContext context) { context.Intents.Add(new TypeIntent(SchemaValueType.Boolean)); } } Very simple. It says that it handles booleans and then it does. To explain how it does, we need to discuss intents. Intents The JsonSchema type and its keywords are immutable. So even if we could get to the keyword list inside the JsonSchemaBuilder , we wouldn't be able to edit the keywords to perform optimizations. Happily, this has led to a new type that mimics keywords to hold their data until the keywords are ready to be built. That new type is the keyword intent, manifested in this library by the ISchemaKeywordIntent interface. The intent is keyword-specific and holds the data needed to actually build the keyword. Once the system has analyzed the type and collected all of the intents, it extracts any common subschemas into a $defs intent, then applies them to the builder that was provided at the beginning of the process. This application of the intents generates the keywords. Most intents are pretty simple to implement. Here's the TypeIntent from above: public class TypeIntent : ISchemaKeywordIntent { public SchemaValueType Type { get; set; } public TypeIntent(SchemaValueType type) { Type = type; } public void Apply(JsonSchemaBuilder builder) => builder.Type(Type); public override bool Equals(object obj) => !ReferenceEquals(null, obj); public override int GetHashCode() { unchecked { var hashCode = GetType().GetHashCode(); hashCode = (hashCode * 397) ^ Type.GetHashCode(); return hashCode; } } } See? The Apply() method just takes the builder, and adds a keyword with the data that it already collected. Pretty easy. Note that the equality methods are overridden. This is extremely important as it's a pivotal part of how the optimization works. You must override these methods, and it is strongly advised that you do it just like this. This will work for most intents, but some keywords contain subschemas. For these, we don't want to hold a subschema because, as mentioned before, they can't be edited. Instead, we'll hold a context object that represents the subschema: its type, attribute set, and the intents required to build it. For these intents, we also want to implement IContextContainer . Here's the ItemsIntent : public class ItemsIntent : ISchemaKeywordIntent, IContextContainer { public SchemaGeneratorContext Context { get; private set; } public ItemsIntent(SchemaGeneratorContext context) { Context = context; } public IEnumerable<SchemaGeneratorContext> GetContexts() => new[] {Context}; public void Replace(int hashCode, SchemaGeneratorContext newContext) { var hc = Context.GetHashCode(); if (hc == hashCode) Context = newContext; } public void Apply(JsonSchemaBuilder builder) => builder.Items(Context.Apply()); public override bool Equals(object obj) => !ReferenceEquals(null, obj); public override int GetHashCode() { unchecked { var hashCode = GetType().GetHashCode(); hashCode = (hashCode * 397) ^ Context.GetHashCode(); return hashCode; } } } There are two methods required by IContextContainer : GetContexts() and Replace() . GetContexts() gets the context objects directly held by this intent. IMPORTANT Don't dive into the context's Intents collection and get the contexts that those hold also. The system will handle that. Replace() replaces a context with a given hash code with a new context. This is the system creating $ref intents that point to the new $defs intent it's building and distributing them throughout the context tree. Once all the $ref s are distributed, the system will add the $defs intent to the root context to be applied at the last step. Generally intents for applicator keywords, which are keywords that have subschemas ( anyOf , allOf , etc.), will need to implement this second interface. In most cases, you can just copy this code. Attributes The other source for intents are attributes. These are handled once the generator has completed adding the intents it needs to. When processing an object, the properties are analyzed for the presence of any of the above attributes. Each of the attributes can then add its intents to the context. To create your own attribute and have it processed by the system, it'll need to implement IAttributeHandler as well. The attribute itself is pretty simple. It's just a class that inherits from Attribute , implements IAttributeHandler , and carries some data. Here's MaximumAttribute : [AttributeUsage(AttributeTargets.Property)] public class MaximumAttribute : Attribute, IAttributeHandler { public uint Value { get; } public MaximumAttribute(uint value) { Value = value; } void IAttributeHandler.AddConstraints(SchemaGeneratorContext context) { var attribute = context.Attributes.OfType<MaximumAttribute>().FirstOrDefault(); if (attribute == null) return; if (!context.Type.IsNumber()) return; context.Intents.Add(new MaximumIntent(attribute.Value)); } } The AddConstraints() method works exactly the same as in the generator class. A key difference here is that you will need to guard against unrelated types. For instance, with MaximumAttribute above, it doesn't make sense to have maximum on a non-numeric type, so we check it before adding the intent. NOTE .IsNumber() is an extension method on Type that determines if it's a numeric type. There are a few more of these helper extensions as well. The occasion may arise where you want to handle an attribute that's defined in some other assembly, and you can't make it implement IAttributeHandler . For these cases, just implement the handler class, and then add it using one of the AttributeHandler.AddHandler() static methods. A handler can be removed using the AttributeHandler.RemoveHandler<T>() static method. Refiners Sometimes you may need to make minor adjustments to the generated schemas dynamically. For this you'll need to create an implementation of ISchemaRefiner . Refiners are called after all intents have been generated for each type, recursively, throughout the process. To implement a refiner, two methods will be needed: bool ShouldRun(SchemaGenerationContext) which determines whether the refiner needs to run for the current generation iteration. void Run(SchemaGenerationContext) which makes whatever modifications are needed. Remember that a this point, you're stil working with intents. You can add new ones as well as modify or remove existing ones. You really have complete freedom within a refiner. That's it That should get you generating schemas for all of your types. If you come up with ideas or implement your own extensions and think they'd be handy if they were built in, feel free to open up an issue or a pull request."
  },
  "usage/schema-keywords.html": {
    "href": "usage/schema-keywords.html",
    "title": "Defining Custom Keywords",
    "keywords": "Defining Custom Keywords JsonSchema has been designed to allow you to create your own keywords. There are several steps that need to be performed to do this. Implement IJsonSchemaKeyword . Optionally implement IRefResolvable if your keyword contains a schema as a value. Apply some attributes. Register the keyword. Create a JSON converter. And your new keyword is ready to use. Lastly, remember that the best resource building keywords is the code . 1. Implement IJsonSchemaKeyword This defines the Validate() method. Implement your validation logic. The ValidationContext The validation context contains all of the data that you need to perform the validation: root schema current keyword's location relative to the schema root local schema instance root current instance location relative to the instance root local instance current schema's URI current schema's anchor label (e.g. #label ) context objects from sibling keywords that have already validated annotations from sibling keywords that have already been validated Once you have validated the instance, you'll need to record the results. IsValid - Indicates whether the validation succeeded. This property must be set. NestedContexts - This contains any context objects you created and used in order to validate the instance. This is typically used when your keyword contains a schema (e.g. allOf or contains ). Ignore - Set this to exclude these results from the output. This used for keywords such as $id or $defs . You probably won't need to set this. Message - Set this to return an error message. If your keyword contains a schema, you'll need to create a context to validate it. To do this, use the .From() method. This will copy a context while allowing you to update some of the properties. instance location instance subschema location Not all of these need to be updated, however. Most keywords focus on the instance that is passed to them, however some, like properties need to build contexts for each property. To do this, it updates all of these properties . If the instance passed validation, set any annotations by using .SetAnnotation() . This is stored as a key-value pair. The convention is to use the keyword name as the key. Annotation consolidation With the introduction of keywords like unevaluatedItems and unevaluatedProperties from draft 2019-09, it's now necessary for applicator keywords (e.g. anyOf ) to aggregate annotations. To do this, some keywords define a consolidation method. To have this consolidation method called, it needs to be registered. This can be done via the .RegisterConsolidationMethod() method. If you're implementing an applicator keyword, you'll need to invoke this consolidation before returning. To this this call .ConsolidateAnnotations() on the context. 2. Implement IRefResolvable If your keyword contains a schema, you'll want to implement this. It allows JsonSchema to search within the keyword when resolving $ref and $recursiveRef . For .ResolvePointerSegment() , if the pointer segment matches a path where a schema might be found, return it. Otherwise return null. For .RegisterSubschemas() , just use this: void IRefResolvable.RegisterSubschemas(SchemaRegistry registry, Uri currentUri) { Schema.RegisterSubschemas(registry, currentUri); } 3. Apply some attributes JsonSchema .Net contains several attributes that you should use to specify some metadata about your keyword. SchemaKeyword - Defines the keyword as it appears in the schema. SchemaPriority - Defines a priority that will be used to order keyword validation properly. Keywords with the same priority are validated in the order they appear in the schema. SchemaDraft - Declares a draft that supports the keyword. This can be used multiple times to declare additional drafts. Vocabulary - Declares the ID of the vocabulary which defines the the keyword. Applicator - Identifies the keyword as an applicator. This signals JsonSchema that this node must be kept when building the output structure. 4. Register your keyword To make JsonSchema .Net aware of your keyword, you must register it with SchemaKeywordRegistry.Register<T>() . This will enable deserialization. Now make it nice to use To enable the fluent construction interface for your keyword, simply create an extension method on JsonSchemaBuilder that adds the keyword and returns the builder. For example, adding a description keyword is implemented by this method: public static JsonSchemaBuilder Description(this JsonSchemaBuilder builder, string description) { builder.Add(new DescriptionKeyword(description)); return builder; } 5. Create a JSON converter To enable serialization and deserialization, you'll need to provide the converter for it. Implement a JsonConverter<T> and apply a JsonConverter attribute to the keyword."
  },
  "usage/schema-overview.html": {
    "href": "usage/schema-overview.html",
    "title": "JsonSchema.Net Overview",
    "keywords": "JsonSchema .Net Overview The occasion may arise when you wish to validate that a JSON object is in the correct form (has the appropriate keys and the right types of values). Enter JSON Schema. Much like XML Schema with XML, JSON Schema defines a pattern for JSON data. A JSON Schema validator can verify that a given JSON object meets the requirements as defined by the JSON Schema. This validation can come in handy as a precursor step before deserializing. More information about JSON Schema can be found at json-schema.org . To support JSON Schema, JsonSchema .Net exposes the JsonSchema type. This type is implemented as a list of keywords, each of which correspond to one of the keywords defined in the JSON Schema specifications. Drafts There are currently six active drafts of the JSON Schema specification: Draft 3 Draft 4 Draft 6 Draft 7 Draft 2019-09 Draft 2020-12 JsonSchema .Net supports draft 6 and later. Meta-schemas Each draft defines a meta-schema. This is a special JSON Schema that describes all of the keywords available for that draft. They are intended to be used to validate other schemas. Usually, a schema will declare the draft it should adhere to using the $schema keyword. JsonSchema .Net declares the meta-schemas for the supported drafts as members of the MetaSchemas static class. Draft 2019-09 introduced vocabularies. As part of this new feature, the meta-schemas for this draft and those which follow it have been split into vocabulary-specific meta-schemas. Additionally, the specification recognizes that the meta-schemas aren't perfect and may need to be updated occasionally. To this end, the meta-schemas are versioned with the year and month they are published. The schemas within this library are named accordingly. Keywords JSON Schema is expressed as a collection of keywords, each of which provides a specific constraint on a JSON instance. For example, the type keyword specifies what type of data an instance may be, whereas the minimum keyword specifies a minimum numeric value for numeric data . These keywords can be combined to express the expected shape of any JSON instance. Once defined, the schema validates the instance, providing feedback on errors that occurred, including what and where the error occurred."
  },
  "usage/schema-references.html": {
    "href": "usage/schema-references.html",
    "title": "Managing references ($ref)",
    "keywords": "Managing references ( $ref ) JsonSchema .Net handles all references as defined in the draft 2020-12 version of the JSON Schema specification. What this means for draft 2019-09 and later schemas is that $ref can now exist alongside other keywords; for earlier drafts, keywords as siblings to $ref will be ignored. Schema registration In order to resolve references more quickly, JsonSchema .Net maintains two schema registries for all schemas and subschemas that it has encountered. The first is a global registry, and the second is a local registry that is passed around on the validation context. If a schema is not found in the local registry, it will automatically fall back to the global registry. A JsonSchema instance will automatically register itself upon calling Validate() . However, there are some cases where this may be insufficient. For example, in cases where schemas are separated across multiple files, it is necessary to register the schema instances prior to validation. For example, given these two schemas { \"$id\": \"http://localhost/my-schema\", \"$type\": \"object\", \"properties\": { \"refProp\": { \"$ref\": \"http://localhost/random-string\" } } } { \"$id\": \"http://localhost/random-string\", \"type\": \"string\" } Here's the schema build inline: var schema = new JsonSchemaBuilder() .Id(\"http://localhost/my-schema\") .Type(SchemaValueType.Object) .Properties((\"refProp\", new JsonSchemaBuilder().Ref(\"http://localhost/random-string\"))) .Build(); You must register random-string before you attempt to validate with my-schema . var randomString = JsonSchema.FromFile(\"random-string.json\"); SchemaRegistry.Global.Register(\"http://localhost/random-string\", randomString); Now JsonSchema .Net will be able to resolve the reference. Automatic resolution In order to support scenarios where schemas cannot be registered ahead of time, the SchemaRegistry class exposes the Fetch property which is defined as Func<Uri, JsonSchema> . This property can be set to a method which downloads the content from the supplied URI and deserializes it into a JsonSchema object. The URI that is passed may need to be transformed, based on the schemas you're dealing with. For instance if you're loading schemas from a local filesystem, and the schema $ref s use relative paths, you may need to prepend the working folder to the URI in order to locate it."
  },
  "usage/schema-validation.html": {
    "href": "usage/schema-validation.html",
    "title": "Validation & annotations",
    "keywords": "Validation & annotations Validating instances JsonSchema exposes a Validate() method which is used to validate JSON instances. Let's begin with the following schema and a few JSON objects: { \"properties\":{ \"myProperty\":{ \"type\":\"string\", \"minLength\":10 } }, \"required\":[\"myProperty\"] } {} {\"myProperty\":false} {\"myProperty\":\"some string\"} {\"otherProperty\":35.4} \"nonObject\" To validate these, all we have to do is pass these into our schema's Validate(JsonElement) method. JsonSchema schema = new JsonSchemaBuilder() .Properties( ( \"myProperty\", new JsonSchemaBuilder() .Type(SchemaValueType.String) .MinLength(10) ) ) .Required(\"myProperty\"); var emptyJson = JsonDocument.Parse(\"{}\").RootElement; var booleanJson = JsonDocument.Parse(\"{\\\"myProperty\\\":false}\").RootElement; var stringJson = JsonDocument.Parse(\"{\\\"myProperty\\\":\\\"some string\\\"}\").RootElement; var shortJson = JsonDocument.Parse(\"{\\\"myProperty\\\":\\\"short\\\"}\").RootElement; var numberJson = JsonDocument.Parse(\"{\\\"otherProperty\\\":35.4}\").RootElement; var nonObject = JsonDocument.Parse(\"\\\"not an object\\\"\").RootElement; var emptyResults = schema.Validate(emptyJson); var booleanResults = schema.Validate(booleanJson); var stringResults = schema.Validate(stringJson); var shortResults = schema.Validate(shortJson); var numberResults = schema.Validate(numberJson); var nonObjectResults = schema.Validate(nonObject); The various results objects are of type ValidationResults . More information about the results object can be found in the next section. In the above example, the following would result: emptyJson and numberJson failed because \"myProperty\" was not found. booleanJson failed because the value of \"myProperty\" is of the wrong type. stringJson passed validation. shortJson failed because the value of \"myProperty\" was too short. nonObject also passed validation because properties and required ignore non-object JSON. No errors would actually be reported here because the output format defaults to a \"flag\" format, which is a basic pass/fail. To get specific errors, the output format will need to be configured. Validation results JSON Schema draft 2019-09 standardized the format for validation output in order to support cross-platform and cross-implementation compatibility. The format is described in the JSON Schema spec, section 10 . This includes support for both errors and annotation collection. In summary, there are four levels of verbosity for output: Flag, Basic, Detailed, and Verbose. The flag format will simply return a boolean value indicating a pass/fail result. All other formats include JSON Pointers and URIs to indicate the source of the errors or annotations that were produced. A basic format reduces all of the errors to a flat list. The detailed and verbose output formats follows the hierarchical structure of the schema. The verbose one copies this structure exactly, whereas the standard hierarchy will condense the results where possible. The default output format is Flag, but this can be configured via the ValidationOptions.OutputFormat static property. NOTE It's only possible to translate from a more detailed to a less detailed format. Examples of output Verbose Hierarchy { \"valid\" : false, \"keywordLocation\" : \"#\", \"instanceLocation\" : \"#\", \"errors\" : [ { \"valid\" : false, \"keywordLocation\" : \"#/allOf\", \"instanceLocation\" : \"#\", \"keyword\" : \"allOf\", \"errors\" : [ { \"valid\" : false, \"keywordLocation\" : \"#/allOf/0\", \"instanceLocation\" : \"#\", \"errors\" : [ { \"valid\" : false, \"keywordLocation\" : \"#/allOf/0/type\", \"instanceLocation\" : \"#\", \"keyword\" : \"type\", \"additionalInfo\" : { \"expected\" : \"array\", \"actual\" : \"object\" } } ] }, { \"valid\" : false, \"keywordLocation\" : \"#/allOf/1\", \"instanceLocation\" : \"#\", \"errors\" : [ { \"valid\" : false, \"keywordLocation\" : \"#/allOf/1/type\", \"instanceLocation\" : \"#\", \"keyword\" : \"type\", \"additionalInfo\" : { \"expected\" : \"number\", \"actual\" : \"object\" } } ] } ] } ] } Condensed Hierarchy { \"valid\" : false, \"keywordLocation\" : \"#/allOf\", \"instanceLocation\" : \"#\", \"keyword\" : \"allOf\", \"errors\" : [ { \"valid\" : false, \"keywordLocation\" : \"#/allOf/0/type\", \"instanceLocation\" : \"#\", \"keyword\" : \"type\", \"additionalInfo\" : { \"expected\" : \"array\", \"actual\" : \"object\" } }, { \"valid\" : false, \"keywordLocation\" : \"#/allOf/1/type\", \"instanceLocation\" : \"#\", \"keyword\" : \"type\", \"additionalInfo\" : { \"expected\" : \"number\", \"actual\" : \"object\" } } ] } Flat List { \"valid\" : false, \"errors\" : [ { \"valid\" : false, \"keywordLocation\" : \"#/allOf\", \"instanceLocation\" : \"#\", \"keyword\" : \"allOf\" }, { \"valid\" : false, \"keywordLocation\" : \"#/allOf/0/type\", \"instanceLocation\" : \"#\", \"keyword\" : \"type\", \"additionalInfo\" : { \"expected\" : \"array\", \"actual\" : \"object\" } }, { \"valid\" : false, \"keywordLocation\" : \"#/allOf/1/type\", \"instanceLocation\" : \"#\", \"keyword\" : \"type\", \"additionalInfo\" : { \"expected\" : \"number\", \"actual\" : \"object\" } } ] } Value format validation The format keyword has been around a while. It's available in all of the drafts supported by JsonSchema .Net. Although this keyword is techincally classified as an annotation, the specification does allow (the word used is \"SHOULD\") that implementation provide some level of validation on it so long as that validation may be configured on and off. JsonSchema .Net makes a valiant attempt at validating a few of them. These are hardcoded as static fields on the Formats class. Out of the box, these are available: date date-time duration email hostname ipv4 ipv6 iri iri-reference json-pointer regex relative-json-pointer uri uri-reference uri-template I'm not going to claim that the validation on any of these is perfect, but it will likely suffice for most applications. In the (rare) event that it doesn't support your needs, they are completely overridable. Additionally, if you find a method that works better than what's in the library, feel free to contribute a PR and make the library better for everyone. New formats can be registered via the Formats.Register() static method. This method will overwrite any existing registration for that format, so this can be used to override the default behavior for known formats. This also makes the format available for deserialization. * IMPORTANT Format implementations MUST not contain state as the same instance will be shared by all of the schema instances that use it. Options The ValidationOptions class gives you a few configuration points for customizing how the validation process behaves. It is an instance class and can be passed into the JsonSchema.Validate() method. If no options are explicitly passed, a copy of JsonSchemaOptions.Default will be used. ValidateAs - Indicates which schema draft to process as. This will filter the keywords of a schema based on their support. This means that if any keyword is not supported by this draft, it will be ignored. ValidateMetaSchema - Indicates whether the schema should be validated against its $schema value (its meta-schema). This is not typically necessary. OutputFormat - You already read about output formats above. This is the property that controls it all. By default, a single \"flag\" node is returned. This also yields the fastest validation times it enables certain optimizations."
  },
  "usage/schema-vocabs.html": {
    "href": "usage/schema-vocabs.html",
    "title": "Extending schemas",
    "keywords": "Extending schemas Vocabularies JSON Schema draft 2019-09 introduced the idea of vocabularies to enable some spec support for custom keywords. A vocabulary is just a collection of keywords. It will be identified by a URI and should have an associated specification that describes the function of each of the keywords. There may also be an associated meta-schema. Creating a vocabulary in JsonSchema .Net isn't strictly required in order to add custom keywords, but if you're using it to create a meta-schema that will consume and validate other draft 2019-09 or later schemas, it is strongly suggested. How vocabularies work This is best explained with an example. Suppose we have a meta-schema M , a schema S that uses M as its $schema , and a couple instances I1 and I2 to be validated by S . // meta-schema M { \"$schema\": \"https://myserver.net/meta-schema\", // 1 \"$id\": \"https://myserver.net/meta-schema\", \"$vocabulary\": { \"https://json-schema.org/draft/2020-12/vocab/core\": true, // 2 \"https://json-schema.org/draft/2020-12/vocab/applicator\": true, \"https://json-schema.org/draft/2020-12/vocab/validation\": true, \"https://json-schema.org/draft/2020-12/vocab/meta-data\": true, \"https://json-schema.org/draft/2020-12/vocab/format-annotation\": true, \"https://json-schema.org/draft/2020-12/vocab/content\": true, \"https://json-schema.org/draft/2020-12/vocab/unevaluated\": true, \"https://myserver.net/my-vocab\": true }, \"allOf\": [ // 3 { \"$ref\": \"https://json-schema.org/draft/2020-12/schema\" } ], \"properties\": { \"minDate\": { // 4 \"type\": \"string\", \"format\": \"date\" } } } // schema S { \"$schema\": \"https://myserver.net/meta-schema\", // 5 \"$id\": \"https://myserver.net/schema\", \"properties\": { \"publishedOnDate\": { \"minDate\": \"2019-01-01\" // 6 } } } // instance I1 { \"publishedOnDate\": \"2019-06-22\" // 7 } // instance I2 { \"publishedOnDate\": \"1998-06-22\" // 8 } We declare a meta-schema. The meta-schema should validate itself, so we declare $schema to be the same as $id . We list the vocabularies that the JsonSchema .Net should know about in order to process schemas that declare this meta-schema as their $schema (see #5). This includes all of the vocabularies from 2020-12 (because we want all of the 2020-12 capabilities) as well as the vocab for this meta-schema. We'll explain a bit more about this later. We also need all of the syntactic validation from 2020-12, so we include it in an allOf . We define a new keyword, minDate , that takes a date-formatted string value. We create a schema that uses our new meta-schema (because we want to use the new keyword). We use the new keyword to define a property to be found in the instance. The first instance defines a date after the minimum required date. The second date defines a date before the minimum required date. The kicker here is that we can read \"minDate\" and know that its value represents the minimum acceptable date... because we're human, and we understand things like that. However, a validator isn't going to be able to infer that. It can only validate that a date-formatted string was given for minDate in the schema ( S ). That's where the vocabulary comes in. The vocabulary is a human-readable document that gives semantic meaning to minDate . It is documentation of business logic that allows a programmer to code an extension that provides additional validation. For example, this is the documentation for minLength in the Schema Validation specification: 6.3.2. minLength The value of this keyword MUST be a non-negative integer. A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword. The length of a string instance is defined as the number of its characters as defined by RFC 8259. Omitting this keyword has the same behavior as a value of 0. It gives meaning to the keyword beyond how the meta-schema describes it: a non-negative integer. Any validator can validate that minDate is a date-formatted string, but only a validator that understands https://myserver.net/my-vocab as a vocabulary will understand that minDate should validate that a date in the instance should be later than that in the schema. Now, if you look at the $vocabulary entry for https://myserver.net/my-vocab , the vocabulary has its ID as the key with a boolean value. In this case, that value is true . That means that if JsonSchema .Net doesn't know about the vocabulary, it must refuse to process any schema that declares M as its $schema (as S does). If this value were false , then JsonSchema .Net would be allowed to continue, which means that only syntactic analysis (i.e. \"Is minDate a date-formatted string?\") would be performed. So, back to the example, because we declare the vocabulary to be required (by giving it a value of true ) and because JsonSchema .Net knows about it, I1 is reported as valid and I2 is not. If the vocabulary had not been required and JsonSchema .Net didn't know about the vocabulary, both I1 and I2 would be reported as valid because the minDate keyword would not have been enforced. Registering a vocabulary To tell JsonSchema .Net about a vocabulary, you need to create a Vocabulary instance and register it using VocabularyRegistry.Add<T>() . The Vocabulary class is quite simple. It defines the vocabulary's ID and lists the keywords which it supports. The keywords must be registered separately . It's not always necessary to have a meta-schema for your vocabulary. However, if you want to enable ValidationOptions.ValidateMetaschema , you will need to register it."
  },
  "usage/vocabs-data.html": {
    "href": "usage/vocabs-data.html",
    "title": "A Vocabulary for Accessing Data Stored in JSON",
    "keywords": "A Vocabulary for Accessing Data Stored in JSON 1. Purpose This document describes a vocabulary defining keywords that can be used to reference values stored in the instance data external JSON data the schema data and use the dereferenced values as input for other keywords. The intent for this keyword is to cover the use cases discussed across several issues in the JSON Schema specification GitHub repositories. (A quick search for \"$data\" can readily summon these issues.) 2. Declarations The ID for this vocabulary is https://gregsdennis.github.io/json-everything/vocabs-data (the URI to this document). A draft 2020-12 meta-schema which includes this vocabulary has been defined for convenience. The ID for the meta-schema is https://gregsdennis.github.io/json-everything/meta/data , and it can also be found at this address. 3. The data Keyword 3.1 Syntax and Semantics The value of data must be an object. The keys of the object correspond to valid JSON Schema keywords, and the values MUST be valid URI references. The keys MUST be interpreted and evaluated as if they were keywords specified in the schema or subschema containing data and using the values dereferenced by the URI specified for that key. The set of keywords in the schema or subschema containing data SHOULD be distinct from the set of keys defined within data . Behavior in the event of an overlap is not defined. 3.3 Contextual Behavior data MUST be processed contextually in accordance with the draft of the schema in which it is used. For example, if data is used in a schema that declares draft 2019-09, then the keys SHOULD be recognized by draft 2019-09 or defined in other referenced vocabularies, and the URI references MUST be resolved following the same rules as $ref as defined by draft 2019-09. If a key is not a recognized keyword in the schema's draft (e.g. $dynamicAnchor in a draft 2019-09 schema), then this key is ignored just as it would be ignored if it were in the schema or subschema containing data . 3.4 URI Resolution The instance being validated serves as the initial document for URI resolution. This case is recognized by a fragment-only URI. The fragment MUST be a valid JSON Pointer as defined by RFC 6901 . External documents can be referenced using an absolute URI base identifier along with a JSON Pointer fragment. This has a side effect of being able to reference values within the schema by supplying the schema's $id value as the base identifier. Implementations SHOULD be able to download external JSON documents, but MAY provide means to pre-load and cache such documents against the identifiers by which they will be referenced. If a URI reference cannot be resolved, validation MUST fail; otherwise the full value at the specified location is returned. Unlike $ref , which requires that the dereferenced value must be a valid schema, the value dereferenced by data may be any JSON value. If the resolved value is not valid for the associated keyword, validation MUST fail. 3.5 Errors The output formatting specified by the JSON Schema Core specification can only indicate that something failed at the data node, but there is no provision for providing further detail. In summary, the data keyword can generate two validation failure states as specified by this document: a URI reference cannot be resolved, and a URI reference can be resolved but the returned value is invalid for the associated keyword. To make debugging data simpler, implementations SHOULD provide an error message indicating what the failure was and for which key it occurred. If both of these succeed, the validation output of the resulting subschema is reported into the overall schema output as if the subschema were actually a child of the data keyword. 4. A Short Example The following defines a schema to validate an object instance with a foo property that must contain an integer value less than or equal to the value in the instance's minValue property. { \"$schema\": \"https://gregsdennis.github.io/json-everything/meta/data\", \"type\": \"object\", \"properties\": { \"foo\": { \"type\": \"integer\", \"data\": { \"minimum\": \"#/minValue\" } }, \"minValue\": { \"type\": \"integer\" } }, \"dependentRequired\": { \"foo\": [ \"minValue\" ] } } The data property declares that its parent subschema should validate a minimum keyword whose value is the value in the minValue property of the instance. Note also the use of dependentRequired to ensure that when foo is present in the instance, minValue is also present. While this not explicitly required of schema authors, this type of insurance mechanism is recommended. The following shows how a change in the minValue property can affect the validation result of the foo property and thus the entire instance. // passing { \"minValue\": 5, \"foo\": 10 } // failing { \"minValue\": 15, \"foo\": 10 }"
  },
  "usage/vocabs-unique-keys.html": {
    "href": "usage/vocabs-unique-keys.html",
    "title": "A Vocabulary for Identifying Uniqueness of Array Items",
    "keywords": "A Vocabulary for Identifying Uniqueness of Array Items 1. Purpose This document describes a vocabulary defining keywords that can be used to validate that arrary instances contain unique values as determined by one or more given paths within each item. The intent for these keywords is to cover the use cases discussed in the JSON Schema vocabularies GitHub issue #22 . 2. Declarations The ID for this vocabulary is https://gregsdennis.github.io/json-everything/vocabs-unique-keys (the URI to this document). A draft 2020-12 meta-schema which includes this vocabulary has been defined for convenience. The ID for the meta-schema is https://gregsdennis.github.io/json-everything/meta/unique-keys , and it can also be found at this address. 3. The uniqueKeys Keyword The value of uniqueKeys must be an array of JSON Pointers as defined by RFC 6901 . At least one JSON Pointer MUST be specified. These JSON Pointers, when resolved against each item, define a set of values for that item. If an item does not contain the location specified by a JSON Pointer, the implementation MUST keep an internal placeholder to indicate a missing value. (The placeholder cannot be a JSON null as there needs to be a distinction between the location existing and holding a null value and the location not existing at all.) Validation for this keyword passes if the value sets for all of the items are distinct, that is, no two sets contain the same ordered collection. 4. Examples 4.1. Single Key The following defines a schema to validate an array with items that have unique values at /foo . { \"$schema\": \"https://gregsdennis.github.io/json-everything/meta/unique-path\", \"type\": \"array\", \"items\": { \"type\": \"object\", \"properties\": { \"foo\": { \"type\": \"integer\" } } }, \"uniqueKeys\": [ \"/foo\" ] } This value passes validation because all of the values located at /foo in each item are unique. [ { \"foo\": 8 }, { \"foo\": 12 }, { \"foo\": 42 } ] This value fails validation because the value 8 is repeated in two of the items at the /foo location. [ { \"foo\": 8 }, { \"foo\": 12 }, { \"foo\": 8 } ] This value passes validation because /foo doesn't return a value for {\"bar\": 8} , so the value sets are (8) and (<missing>) , which are unique. [ { \"foo\": 8 }, { \"bar\": 8 } ] This value fails validation because the value 8 is repeated in two of the items at the /foo location. This example highlights the difference between uniqueKeys and uniqueItems . This value would pass \"uniqueItems\": true because bar is different between the two \"foo\": 8 items. [ { \"foo\": 8, \"bar\": true }, { \"foo\": 12, \"bar\": true }, { \"foo\": 8, \"bar\": false } ] 4.2. Multiple Keys The following defines a schema to validate an array with items that have unique combinations of values at /foo and /bar . { \"$schema\": \"https://gregsdennis.github.io/json-everything/meta/unique-path\", \"type\": \"array\", \"items\": { \"type\": \"object\", \"properties\": { \"foo\": { \"type\": \"integer\" }, \"bar\": { \"type\": \"boolean\" } } }, \"uniqueKeys\": [ \"/foo\", \"/bar\" ] } This value passes validation because for all combinations of \"foo\" and \"bar\", the value sets are unique. [ { \"foo\": 8, \"bar\": true }, { \"foo\": 12, \"bar\": true }, { \"foo\": 8, \"bar\": false } ] This value fails validation because the first two items have the same combinations of \"foo\" and \"bar\", (8, true) , even though \"baz\" is different. This example also would pass uniqueItems . [ { \"foo\": 8, \"bar\": true, \"baz\": \"yes\" }, { \"foo\": 8, \"bar\": true, \"baz\": \"no\" }, { \"foo\": 8, \"bar\": false } ]"
  }
}