@using Radzen
@using Radzen.Blazor

<RadzenPanelMenuItem Text="@_assemblyName" Icon="@Icon" Expanded="false">
	<ApiNamespace Namespace="@_rootNamespace"/>
</RadzenPanelMenuItem>

@code {

#pragma warning disable CS8618
    [Parameter]
    public Type AssemblyContaining { get; set; }

    [Parameter]
    public string Icon { get; set; }

	private NamespaceNode _rootNamespace;
	private string _assemblyName;
#pragma warning restore CS8618

	protected override Task OnInitializedAsync()
	{
		var assembly = AssemblyContaining.Assembly;
		var commaIndex = assembly.FullName!.IndexOf(',');
		_assemblyName = assembly.FullName[..commaIndex];

		var types = assembly.ExportedTypes.OrderBy(x => x.FullName); // TODO: filter these?

		_rootNamespace = BuildNamespaceNode(types, _assemblyName);

		return base.OnInitializedAsync();
	}

	private NamespaceNode BuildNamespaceNode(IEnumerable<Type> types, string rootNamespace)
	{
		var namespaceGroups = types.GroupBy(x =>
		{
			var lastDot = x.FullName!.LastIndexOf('.');
			return x.FullName[..lastDot];
		}).ToList();
		var localTypes = namespaceGroups.SingleOrDefault(x => x.Key == rootNamespace)?.ToList() ??
		                 new List<Type>();
		var namespaces = namespaceGroups.Where(x => x.Key != rootNamespace)
			.Select(x => BuildNamespaceNode(x, x.Key)).ToList();

		return new NamespaceNode
		{
			Name = rootNamespace,
			Namespaces = namespaces,
			Types = localTypes
		};
	}

}
