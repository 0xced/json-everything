@using Markdig
@using System.Diagnostics
@using System.Text.RegularExpressions
@using JsonEverythingNet.Services

@inject HttpClient Http
@inject NavigationManager NavigationManager

<div>
	@((MarkupString)_value)
	<AnchorNavigation @ref="_anchorNav" Owner="this"/>
</div>

@code{

	[Parameter]
	public string? Page { get; set; }

	public static readonly Regex HeaderPattern = new(@"<h(\d)>\s*(.*)\s*</h\d>", RegexOptions.Compiled);

	private string _value = "";
		const string _headerLinkPattern = "<h$1 id=\"[[id]]\">[[headerText]]<a id=\"user-content-syntax\" class=\"markdown-anchor m-2\" aria-hidden=\"true\" href=\"[[href]]\"><svg class=\"markdown-anchor\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a></h$1>";
    private const string _headerReplacePattern = @"<h(\d)>\s*{0}\s*</h\d>";

#pragma warning disable CS8618
	private AnchorNavigation _anchorNav;
#pragma warning restore CS8618

	public async Task SetPage(string page)
	{
		if (Page == page) return;

		Page = page;
		await UpdateView();
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		await UpdateView();
	}

	private async Task UpdateView()
	{
		if (string.IsNullOrEmpty(Page)) return;

		var markdown = await Http.GetStringAsync($"/md/{Page}.md");
		var html = Markdown.ToHtml(markdown);

		if (!Page.Contains("release-notes"))
		{
			var localPath = GetPath();
			var matches = HeaderPattern.Matches(html);

			foreach (Match match in matches)
			{
				var headerText = match.Groups[2].Value;
				var href = AnchorRegistry.GetHrefFromText(headerText);
				var headerReplacement = _headerLinkPattern.Replace("[[id]]", href)
					.Replace("[[href]]", $"{localPath}#{href}")
					.Replace("[[headerText]]", headerText);
				var specificReplacePattern = string.Format(_headerReplacePattern, headerText);

				html = Regex.Replace(html, specificReplacePattern, headerReplacement);
			}
		}

		_value = html;
	}

	private string GetPath()
	{
		return NavigationManager.Uri.Replace(NavigationManager.BaseUri, string.Empty).Split('#')[0];
	}
}