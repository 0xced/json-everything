@page "/json-logic"
@using BlazorMonaco
@using System.Text.Json
@using Json.Logic
@using JsonEverythingNet.Services
@using EditorOptions = JsonEverythingNet.Services.EditorOptions
@using System.Text.Encodings.Web
@using System.Text.Json.Nodes

@inject CookieManager CookieManager;

<PageTitle>JSON Logic - json-everything.net</PageTitle>

<div class="row mx-3 fill-remaining">
	<div class="mh-100 scroll">
		<Banner Title="@Banner.AnnouncementTitle" Content="@Banner.DocsMessage" />
		<div class="navbar me-2">
			<div class="align-items-center hstack mx-2">
				<h1 class="display-4">JSON Logic</h1>
				<div class="align-items-center mx-3">
					<div>
						Complex rule definition and evaluation using JSON
						<br/>
						Learn more about
						<a href="https://jsonlogic.com/" target="_blank">JSON Logic <ExternalLinkIcon/></a>
					</div>
				</div>
			</div>
			<div class="align-items-center mt-1">
				@foreach (var library in _libraries)
				{
					<NugetLibrary Library="library"/>
				}
			</div>
		</div>

		<div class="vstack gap-3 mt-4 me-3">
			<div>
				<div class="row">
					<div class="col-5">
						<label class="w-100">
							Logic
							<div class="editor-input">
								<MonacoEditor @ref="_logicEditor" Id="editor-logic" ConstructionOptions="BasicOptions"
								              CssClass="h-100"/>
							</div>
						</label>
					</div>
					<div class="col mx-2 align-items-center row">
						<button class="btn btn-primary w-100" @onclick="Apply">Apply</button>
					</div>
					<div class="col-5">
						<label class="w-100">
							Data
							<div class="editor-input">
								<MonacoEditor @ref="_instanceEditor" Id="editor-instance" ConstructionOptions="BasicOptions"
								              CssClass="h-100"/>
							</div>
						</label>
					</div>
				</div>
			</div>
    
			<label>
				Result
				<div class="editor-input">
					<MonacoEditor @ref="_outputEditor" Id="editor-otuput" ConstructionOptions="ReadOnlyOptions"
					              CssClass="h-100"/>
				</div>
			</label>
		</div>
		<div class="ms-4">
			<Docs Page="playground/logic"/>
		</div>
	</div>
</div>

@code {
#pragma warning disable CS8618
	private MonacoEditor _logicEditor;
	private MonacoEditor _instanceEditor;
	private MonacoEditor _outputEditor;

	private readonly List<LibraryVersion> _libraries = new()
	{
		LibraryVersion.GetFor<Rule>(),
	};
#pragma warning restore CS8618

	private static StandaloneEditorConstructionOptions BasicOptions(MonacoEditor _) => EditorOptions.Basic();
	private static StandaloneEditorConstructionOptions ReadOnlyOptions(MonacoEditor _) => EditorOptions.Readonly();

	private async Task Apply()
	{
		await SaveLogic();
		await SaveInstance();

		Rule rule;
		try
		{
			rule = JsonSerializer.Deserialize<Rule>(await _logicEditor.GetValue())!;
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Rule is invalid\n\n{e.Message}");
			return;
		}
		JsonNode? instance;
		try
		{
			instance = JsonNode.Parse(await _instanceEditor.GetValue());
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Data is invalid\n\n{e.Message}");
			return;
		}

		var results = rule.Apply(instance);

		var resultText = JsonSerializer.Serialize(results, new JsonSerializerOptions
		{
			WriteIndented = true,
			Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
		});

		await _outputEditor.SetValue(resultText);
	}

	private async Task SaveLogic()
	{
		await CookieManager.SaveEditorValue(_logicEditor, "logic");
	}

	private async Task LoadSavedLogic()
	{
		await CookieManager.LoadEditorValue(_logicEditor, "logic");
	}

	private async Task SaveInstance()
	{
		await CookieManager.SaveEditorValue(_instanceEditor, "logic-instance");
	}

	private async Task LoadSavedInstance()
	{
		await CookieManager.LoadEditorValue(_instanceEditor, "logic-instance");
	}

	protected override async Task OnInitializedAsync()
	{
		await CookieManager.Initialize();
	    await _outputEditor.SetValue(string.Empty);

		await LoadSavedLogic();
		await LoadSavedInstance();
	}
}