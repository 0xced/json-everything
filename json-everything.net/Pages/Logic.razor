@page "/json-logic"
@using BlazorMonaco
@using System.Text.Json
@using Json.Logic
@using Json.Patch
@using JsonEverythingNet.Services
@using EditorOptions = JsonEverythingNet.Services.EditorOptions

@inject CookieManager _cookieManager;

<PageTitle>JSON Logic - json-everything.net</PageTitle>

<div class="navbar">
	<div class="align-items-center hstack mx-2">
		<h1 class="display-4">JSON Logic</h1>
		<div class="align-items-center mx-3">
			<div>
				Complex rule definition and evaluation using JSON
				<br/>
				Learn more about
				<a href="https://jsonlogic.com/" target="_blank">JSON Logic <ExternalLinkIcon/></a>
			</div>
		</div>
	</div>
	<div class="align-items-center mt-1">
		@foreach (var library in _libraries)
		{
			<div class="btn version-callout mx-2">
				<span class="font-monospace fw-bold">@library.Name</span><br/>@@ v@(library.Version)
			</div>
		}
	</div>
</div>

<div class="vstack gap-5 mt-4">
	<div>
		<div class="row">
			<div class="col-5">
				<label class="w-100">
					Logic
					<div class="editor-input">
						<MonacoEditor @ref="_logicEditor" Id="editor-logic" ConstructionOptions="BasicOptions"
						              CssClass="h-100" OnKeyUp="SaveLogic"/>
					</div>
				</label>
			</div>
			<div class="col mx-2 align-items-center row">
				<div class="vstack gap-3 align-self-center">
					<button class="btn btn-primary" @onclick="Apply">Apply</button>
					<hr/>
					<button class="btn btn-primary" @onclick="Generate">Generate</button>
				</div>
			</div>
			<div class="col-5">
				<label class="w-100">
					Data
					<div class="editor-input">
						<MonacoEditor @ref="_instanceEditor" Id="editor-instance" ConstructionOptions="BasicOptions"
						              CssClass="h-100" OnKeyUp="SaveInstance"/>
					</div>
				</label>
			</div>
		</div>
	</div>

	<div class="editor-input">
		<MonacoEditor @ref="_outputEditor" Id="editor-otuput" ConstructionOptions="ReadOnlyOptions"
		              CssClass="h-100"/>
	</div>
</div>

@code {
#pragma warning disable CS8618
	private MonacoEditor _logicEditor;
	private MonacoEditor _instanceEditor;
	private MonacoEditor _outputEditor;

	private readonly List<LibraryVersion> _libraries = new()
	{
		LibraryVersion.GetFor<Rule>(),
	};
#pragma warning restore CS8618

	private static StandaloneEditorConstructionOptions BasicOptions(MonacoEditor _) => EditorOptions.Basic();
	private static StandaloneEditorConstructionOptions ReadOnlyOptions(MonacoEditor _) => EditorOptions.Readonly();

	private async Task Apply()
	{
		Rule rule;
		try
		{
			rule = JsonSerializer.Deserialize<Rule>(await _logicEditor.GetValue())!;
		}
		catch (Exception e)
		{
			Console.WriteLine("Rule is invalid");
			return;
		}
		JsonElement instance;
		try
		{
			instance = JsonDocument.Parse(await _instanceEditor.GetValue()).RootElement;
		}
		catch (Exception e)
		{
			Console.WriteLine("Data is invalid");
			return;
		}

		var results = rule.Apply(instance);

		var resultText = JsonSerializer.Serialize(results, new JsonSerializerOptions {WriteIndented = true});

		await _outputEditor.SetValue(resultText);
	}

	private async Task Generate()
	{
		JsonElement source;
		try
		{
			source = JsonDocument.Parse(await _logicEditor.GetValue()).RootElement;
		}
		catch (Exception e)
		{
			Console.WriteLine("Source data is invalid");
			return;
		}
		JsonElement target;
		try
		{
			target = JsonDocument.Parse(await _instanceEditor.GetValue()).RootElement;
		}
		catch (Exception e)
		{
			Console.WriteLine("Target data is invalid");
			return;
		}

		var patch = source.CreatePatch(target);

		if (patch != null)
		{
			var instance = JsonSerializer.Serialize(patch, new JsonSerializerOptions {WriteIndented = true});
			await _outputEditor.SetValue(instance);
		}
		else
			await _outputEditor.SetValue("Unable to create patch");
	}

	private async Task SaveLogic()
	{
		var schemaText = await _logicEditor.GetValue();

		await _cookieManager.Set("logic", schemaText);
	}

	private async Task LoadSavedLogic()
	{
		var schemaText = _cookieManager.Get("logic") ?? string.Empty;

		await _logicEditor.SetValue(schemaText);
	}

	private async Task SaveInstance()
	{
		var schemaText = await _instanceEditor.GetValue();

		await _cookieManager.Set("logic-instance", schemaText);
	}

	private async Task LoadSavedInstance()
	{
		var schemaText = _cookieManager.Get("logic-instance") ?? string.Empty;

		await _instanceEditor.SetValue(schemaText);
	}

	protected override async Task OnInitializedAsync()
	{
		await _cookieManager.Initialize();

		await LoadSavedLogic();
		await LoadSavedInstance();
	}

}