@page "/json-logic"
@using System.Text.Json
@using Json.Logic
@using JsonEverythingNet.Services
@using EditorOptions = JsonEverythingNet.Services.EditorOptions
@using System.Text.Encodings.Web
@using System.Text.Json.Nodes
@using BlazorMonaco.Editor
@using Yaml2JsonNode

@inject DataManager DataManager;
@inject IJSRuntime JsRuntime;

<PageTitle>JSON Logic - json-everything.net</PageTitle>

<div id="layout" class="flex-grow-1 position-relative">
	<div class="dimgray fill-remaining">
		<div class="inner d-flex h-100">
			<div class="green w-25 d-flex">
				<div class="tan grid-panel flex-grow-1 scroll">
					<div class="align-items-center hstack mx-2">
						<img src="img/json-logic.png" height="70" width="70" class="me-3" />
						<h1 class="display-4">JSON Logic</h1>
					</div>
					<div class="align-items-center mx-3">
						<div>
							Complex rule definition and evaluation using JSON. Learn more about
							<a href="https://jsonlogic.com/" target="_blank">JSON Logic <ExternalLinkIcon/></a>
						</div>
					</div>
					<div class="align-items-center mt-1">
						@foreach (var library in _libraries)
						{
						<NugetLibrary Library="@library"/>
						}
					</div>
					<hr />
					<button class="btn btn-primary w-100" @onclick="Apply">Apply</button>
					<hr />
					<MarkdownSpan Content="@HelpSummary"></MarkdownSpan>
				</div>
			</div>
			<div class="gray w-75 d-flex flex-wrap">
				<div class="pink w-50 d-flex flex-grow-1 h-50">
					<div class="grid-panel flex-grow-1 position-relative">
						<span class="editor-lang-@_logicEditorLanguage">@_logicEditorLanguage</span>
						<StandaloneCodeEditor @ref="_logicEditor" Id="editor-logic" ConstructionOptions="BasicOptions"
						                      CssClass="h-100" OnDidChangeModelContent="HandleLogicChanged"/>
					</div>
				</div>
				<div class="cyan w-50 d-flex flex-grow-1 h-50">
					<div class="grid-panel flex-grow-1 position-relative">
						<span class="editor-lang-@_instanceEditorLanguage">@_instanceEditorLanguage</span>
						<StandaloneCodeEditor @ref="_instanceEditor" Id="editor-instance" ConstructionOptions="BasicOptions"
						                      CssClass="h-100" OnDidChangeModelContent="HandleInstanceChanged" />
					</div>
				</div>
				<div class="yellow w-100 d-flex flex-grow-1 h-50">
					<div class="grid-panel flex-grow-1">
						<StandaloneCodeEditor @ref="_outputEditor" Id="editor-output" ConstructionOptions="ReadOnlyOptions"
						                      CssClass="h-100"/>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
#pragma warning disable CS8618
	private StandaloneCodeEditor _logicEditor;
	private string _logicEditorLanguage;
	private StandaloneCodeEditor _instanceEditor;
	private string _instanceEditorLanguage;
	private StandaloneCodeEditor _outputEditor;
#pragma warning restore CS8618

	private readonly List<LibraryVersion> _libraries = [LibraryVersion.GetFor<Rule>()];

	private string HelpSummary { get; set; } = HelpContent.LogicApply;

	private static StandaloneEditorConstructionOptions BasicOptions(StandaloneCodeEditor _) => EditorOptions.Basic();
	private static StandaloneEditorConstructionOptions ReadOnlyOptions(StandaloneCodeEditor _) => EditorOptions.Readonly();

	private async Task Apply()
	{
		await SaveLogic();
		await SaveInstance();
		await _outputEditor.SetValue(string.Empty);

		JsonNode? rule;
		try
		{
			rule = YamlSerializer.Parse(await _logicEditor.GetValue()).ToJsonNode().FirstOrDefault();
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Rule is invalid\n\n{e.Message}");
			return;
		}
		JsonNode? instance;
		try
		{
			instance = JsonNode.Parse(await _instanceEditor.GetValue());
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Data is invalid\n\n{e.Message}");
			return;
		}

		var results = JsonLogic.Apply(rule, instance);

		var resultText = JsonSerializer.Serialize(results, new JsonSerializerOptions
		{
			WriteIndented = true,
			Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
		});

		await _outputEditor.SetValue(resultText);
	}

	private async Task SaveLogic()
	{
		await DataManager.SaveEditorValue(_logicEditor, "logic");
	}

	private async Task LoadSavedLogic()
	{
		await DataManager.LoadEditorValue(_logicEditor, "logic");
	}

	private async Task SaveInstance()
	{
		await DataManager.SaveEditorValue(_instanceEditor, "logic-instance");
	}

	private async Task LoadSavedInstance()
	{
		await DataManager.LoadEditorValue(_instanceEditor, "logic-instance");
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadSavedLogic();
			await LoadSavedInstance();
			await _outputEditor.SetValue(string.Empty);

			_logicEditorLanguage = await _logicEditor.DetectLanguage(JsRuntime);
			_instanceEditorLanguage = await _instanceEditor.DetectLanguage(JsRuntime);
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task HandleLogicChanged()
	{
		_logicEditorLanguage = await _logicEditor.DetectLanguage(JsRuntime);
	}

	private async Task HandleInstanceChanged()
	{
		_instanceEditorLanguage = await _instanceEditor.DetectLanguage(JsRuntime);
	}
}