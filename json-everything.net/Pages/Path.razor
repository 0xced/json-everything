@page "/json-path"
@using BlazorMonaco
@using System.Text.Json
@using Json.Path
@using JsonEverythingNet.Services
@using EditorOptions = JsonEverythingNet.Services.EditorOptions

@inject CookieManager _cookieManager;

<PageTitle>JSON Path - json-everything.net</PageTitle>

<div class="navbar">
	<div class="align-items-center hstack mx-2">
		<h1 class="display-4">JSON Path</h1>
		<div class="align-items-center mx-3">
			<div>
				Query JSON data - "XPath for JSON"
				<br/>
				Learn more about
				<a href="https://github.com/ietf-wg-jsonpath/draft-ietf-jsonpath-base" target="_blank">JSON Path <ExternalLinkIcon/></a>
			</div>
		</div>
	</div>
	<div class="align-items-center mt-1">
		@foreach (var library in _libraries)
		{
			<div class="btn version-callout mx-2">
				<span class="font-monospace fw-bold">@library.Name</span><br/>@@ v@(library.Version)
			</div>
		}
	</div>
</div>

<EditForm Model="_input" class="col-12 mb-4">
	<label class="my-2 w-100">
		Path
		<InputText @bind-Value="_input.Path" DisplayName="Default base URI" class="form-control"
		           @oninput="SavePath"/>
	</label>
</EditForm>

<div class="vstack gap-5">
	<div>
		<div class="row">
			<div class="col-5">
				<div class="editor-input">
					<MonacoEditor @ref="_instanceEditor" Id="editor-instance" ConstructionOptions="BasicOptions"
					              CssClass="h-100" OnKeyUp="SaveInstance"/>
				</div>
			</div>
			<div class="col mx-2 align-items-center row">
				<button class="btn btn-primary w-100" @onclick="Evaluate">Evaluate</button>
			</div>
			<div class="col-5">
				<div class="editor-input">
					<MonacoEditor @ref="_outputEditor" Id="editor-output" ConstructionOptions="ReadOnlyOptions"
					              CssClass="h-100"/>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	#pragma warning disable CS8618
	private MonacoEditor _instanceEditor;
	private MonacoEditor _outputEditor;

	private readonly InputModel _input = new();

	private readonly List<LibraryVersion> _libraries = new()
	{
		LibraryVersion.GetFor<JsonPath>(),
	};
#pragma warning restore CS8618

	private class InputModel
	{
		public string? Path { get; set; }
	}

	private static StandaloneEditorConstructionOptions BasicOptions(MonacoEditor _) => EditorOptions.Basic();
	private static StandaloneEditorConstructionOptions ReadOnlyOptions(MonacoEditor _) => EditorOptions.Readonly();

	protected override async Task OnInitializedAsync()
	{
		await _cookieManager.Initialize();

		LoadSavedPath();
		await LoadSavedInstance();
	}

	private async Task Evaluate()
	{
		JsonPath path;
		try
		{
			path = JsonPath.Parse(_input.Path!);
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Path is invalid\n\n{e.Message}");
			return;
		}
		JsonElement instance;
		try
		{
			instance = JsonDocument.Parse(await _instanceEditor.GetValue()).RootElement;
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Data is invalid\n\n{e.Message}");
			return;
		}

		var results = path.Evaluate(instance);

		var resultText = results.Error == null
			? JsonSerializer.Serialize(results.Matches, new JsonSerializerOptions {WriteIndented = true})
			: string.Empty;

		await _outputEditor.SetValue(resultText);
	}

	private async Task SavePath(ChangeEventArgs args)
	{
		var pathText = args.Value as string;

		await _cookieManager.Set("path", pathText ?? string.Empty);
	}

	private void LoadSavedPath()
	{
		var pathText = _cookieManager.Get("path") ?? string.Empty;

		_input.Path = pathText;
	}

	private async Task SaveInstance()
	{
		await _cookieManager.SaveEditorValue(_instanceEditor, "path-instance");
	}

	private async Task LoadSavedInstance()
	{
		await _cookieManager.LoadEditorValue(_instanceEditor, "path-instance");
	}
}